Shader "Lux/Nature/Tree Creator Leaves" {
Properties {
	_Color ("Main Color", Color) = (1,1,1,1)
	_Shininess ("Shininess", Range (0.01, 1)) = 0.078125
	_MainTex ("Base (RGB) Alpha (A)", 2D) = "white" {}
	_BumpMap ("Normalmap", 2D) = "bump" {}
	_GlossMap ("Gloss (A)", 2D) = "black" {}
	_TranslucencyMap ("Translucency (A)", 2D) = "white" {}
	_ShadowOffset ("Shadow Offset (A)", 2D) = "black" {}
	
	// These are here only to provide default values
	_Cutoff ("Alpha cutoff", Range(0,1)) = 0.3
	_Scale ("Scale", Vector) = (1,1,1,1)
	_SquashAmount ("Squash", Float) = 1
}

SubShader { 
	Tags { "IgnoreProjector"="True" "RenderType"="TreeLeaf" }
	LOD 200
		
	
	Pass {
		Name "FORWARD"
		Tags { "LightMode" = "ForwardBase" }
		ColorMask RGB
Program "vp" {
// Vertex combos: 24
//   opengl - ALU: 86 to 137
//   d3d9 - ALU: 91 to 142
//   d3d11 - ALU: 79 to 122, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 20 [unity_Scale]
Vector 21 [_Scale]
Vector 22 [_SquashPlaneNormal]
Float 23 [_SquashAmount]
Vector 24 [_Wind]
Vector 25 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 100 ALU
PARAM c[28] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..25],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R3.w, R3, R3;
ABS R0.w, vertex.attrib[14];
ADD R0.w, -R0, c[0].y;
MAD R0.xyz, R0, R0.w, vertex.position;
MOV R1.x, c[0].y;
DP3 R1.x, R1.x, c[12];
ADD R1.x, vertex.color, R1;
ADD R1.z, vertex.color.y, R1.x;
MUL R0.xyz, R0, c[21];
MOV R1.y, R1.x;
DP3 R1.x, R0, R1.z;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[26];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[27].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R3.w, R3.w;
ADD R5.xy, R1.xzzw, R1.ywzw;
MAD R2.xyz, R3.w, R3, -vertex.normal;
MAD R1.xyz, R0.w, R2, vertex.normal;
MUL R2.xyz, R5.y, c[24];
MUL R3.xy, vertex.color.y, R1.xzzw;
MUL R4.xyz, vertex.texcoord[1].y, R2;
MUL R3.xz, R3.xyyw, c[27].z;
MUL R2, vertex.attrib[14].y, c[6];
MUL R3.y, vertex.texcoord[1], c[27];
MAD R3.xyz, R5.xyxw, R3, R4;
MAD R0.xyz, R3, c[24].w, R0;
MAD R3.xyz, vertex.texcoord[1].x, c[24], R0;
DP3 R0.x, R3, c[22];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R0.y, R2, R2;
RSQ R0.y, R0.y;
MUL R2.xyz, R0.y, R2;
ADD R0.x, R0, c[22].w;
MUL R0.xyz, R0.x, c[22];
ADD R4.xyz, -R0, R3;
MOV R2.w, c[27];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R0.w, R2, vertex.attrib[14];
DP3 R1.w, R2, R2;
DP3 R0.w, R1, R1;
RSQ R1.w, R1.w;
MUL R3.xyz, R1.w, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R1;
MAD R0.xyz, R0, c[23].x, R4;
MOV R0.w, c[0].y;
MUL R1.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R1;
MUL R4.xyz, R4, R2.w;
MOV R1.xyz, c[18];
MOV R1.w, c[0].y;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP4 R5.z, R1, c[15];
DP4 R5.y, R1, c[14];
DP4 R5.x, R1, c[13];
MAD R1.xyz, R5, c[20].w, -R0;
DP3 result.texcoord[6].y, R4, R1;
DP3 result.texcoord[6].z, R2, R1;
DP3 result.texcoord[6].x, R3, R1;
DP3 R0.y, R4, c[9];
DP3 R0.x, R3, c[9];
DP3 R0.z, R2, c[9];
MUL result.texcoord[1].xyz, R0, c[20].w;
DP3 R0.y, R4, c[10];
DP3 R0.x, R3, c[10];
DP3 R0.z, R2, c[10];
MUL result.texcoord[2].xyz, R0, c[20].w;
MOV R0, c[19];
DP3 R1.y, R4, c[11];
DP3 R1.z, R2, c[11];
DP3 R1.x, R3, c[11];
MUL result.texcoord[3].xyz, R1, c[20].w;
DP4 R1.z, R0, c[15];
DP4 R1.x, R0, c[13];
DP4 R1.y, R0, c[14];
DP3 result.texcoord[4].y, R4, R1;
DP3 result.texcoord[4].z, R2, R1;
DP3 result.texcoord[4].x, R3, R1;
MOV result.color.xyz, c[0].y;
MOV result.texcoord[5].xyz, c[0].x;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[25], c[25].zwzw;
MOV result.color.w, vertex.color;
END
# 100 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 19 [unity_Scale]
Vector 20 [_Scale]
Vector 21 [_SquashPlaneNormal]
Float 22 [_SquashAmount]
Vector 23 [_Wind]
Vector 24 [_MainTex_ST]
"vs_3_0
; 105 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
def c25, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c26, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c27, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c28, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
mov r1.xyz, c11
dp3 r1.x, c25.y, r1
add r1.x, v5, r1
add r0.xyz, r2, c25.x
mad r2, v2.z, c6, r2
add r3, r2, c25.x
dp4 r3.w, r3, r3
abs r0.w, v1
add r0.w, -r0, c25.y
mad r0.xyz, r0, r0.w, v0
add r1.z, v5.y, r1.x
mul r0.xyz, r0, c20
mov r1.y, r1.x
dp3 r1.x, r0, r1.z
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c26
frc r1, r1
mad r1, r1, c25.z, c25.w
frc r1, r1
mad r1, r1, c27.x, c27.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c27.x, c27.z
mul r1, r2, r1
rsq r3.w, r3.w
add r5.xy, r1.xzzw, r1.ywzw
mad r2.xyz, r3.w, r3, -v2
mad r1.xyz, r0.w, r2, v2
mul r2.xyz, r5.y, c23
mul r3.xy, v5.y, r1.xzzw
mul r4.xyz, v4.y, r2
mul r3.xz, r3.xyyw, c28.x
mul r2, v1.y, c5
mul r3.y, v4, c27.w
mad r3.xyz, r5.xyxw, r3, r4
mad r0.xyz, r3, c23.w, r0
mad r3.xyz, v4.x, c23, r0
dp3 r0.x, r3, c21
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c25.x
dp4 r0.y, r2, r2
rsq r0.y, r0.y
mul r2.xyz, r0.y, r2
add r0.x, r0, c21.w
mul r0.xyz, r0.x, c21
add r4.xyz, -r0, r3
mov r2.w, c27.y
add r2, -v1, r2
mad r2, r0.w, r2, v1
dp3 r1.w, r2, r2
dp3 r0.w, r1, r1
rsq r1.w, r1.w
mul r3.xyz, r1.w, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r1
mad r0.xyz, r0, c22.x, r4
mov r0.w, c25.y
mul r1.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r1
mul r4.xyz, r4, r2.w
mov r1.w, c25.y
mov r1.xyz, c17
dp4 r5.z, r1, c14
dp4 r5.y, r1, c13
dp4 r5.x, r1, c12
mad r1.xyz, r5, c19.w, -r0
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
dp3 o8.y, r4, r1
dp3 o8.z, r2, r1
dp3 o8.x, r3, r1
dp3 r0.y, r4, c8
dp3 r0.x, r3, c8
dp3 r0.z, r2, c8
mul o3.xyz, r0, c19.w
dp3 r0.y, r4, c9
dp3 r0.x, r3, c9
dp3 r0.z, r2, c9
mul o4.xyz, r0, c19.w
mov r0, c14
dp4 r5.z, c18, r0
mov r0, c13
dp4 r5.y, c18, r0
dp3 r1.y, r4, c10
dp3 r1.z, r2, c10
dp3 r1.x, r3, c10
mul o5.xyz, r1, c19.w
mov r1, c12
dp4 r5.x, c18, r1
dp3 o6.y, r4, r5
dp3 o6.z, r2, r5
dp3 o6.x, r3, r5
mov o2.xyz, c25.y
mov o7.xyz, c25.x
mad o1.xy, v3, c24, c24.zwzw
mov o2.w, v5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 109 instructions, 6 temp regs, 0 temp arrays:
// ALU 91 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednamopdkccbonmpfogaaebpdapkimljboabaaaaaagibaaaaaadaaaaaa
cmaaaaaapeaaaaaapiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheopmaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaapfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcgiaoaaaa
eaaaabaajkadaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadlcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaa
ahaaaaaagfaaaaadhccabaaaaiaaaaaagiaaaaacagaaaaaadgaaaaagbcaabaaa
aaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaaaaaaaadkiacaaa
adaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaaadaaaaaaaoaaaaaa
baaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakbabaaa
afaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaabkbabaaaafaaaaaa
apaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
aaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaeaaaaaa
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaakgakbaaaaaaaaaaa
aaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
diaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldp
aaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaap
pcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaa
acaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaa
egaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaea
aaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaa
egaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaaacaaaaaaigaabaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgbfbaaaaeaaaaaa
diaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaaaeaaaaaabaaaaaai
icaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
ccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
fgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaadiaaaaahccaabaaa
aaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaadaaaaaa
agacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaaaaaaaaaaabeaaaaa
jkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgipcaaa
aaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaa
aeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaaibcaabaaa
abaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaa
abaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
aaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaai
pccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaadcaaaaal
dccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadgaaaaaihccabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadgaaaaaficcabaaaacaaaaaadkbabaaaafaaaaaabaaaaaai
icaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
icaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaialpaaaaaaai
pcaabaaaabaaaaaaegaobaaaabaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaaegbobaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
adaaaaaajgaebaaaabaaaaaacgajbaaaacaaaaaadcaaaaakhcaabaaaadaaaaaa
jgaebaaaacaaaaaacgajbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaadgaaaaagbcaabaaa
aeaaaaaaakiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaaakiacaaa
adaaaaaaanaaaaaadgaaaaagecaabaaaaeaaaaaaakiacaaaadaaaaaaaoaaaaaa
baaaaaahccaabaaaafaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaah
bcaabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaa
afaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaadaaaaaa
egacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaaeaaaaaa
bkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaabkiacaaaadaaaaaa
anaaaaaadgaaaaagecaabaaaaeaaaaaabkiacaaaadaaaaaaaoaaaaaabaaaaaah
bcaabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahccaabaaa
afaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaaafaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaaeaaaaaaegacbaaa
afaaaaaapgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaaeaaaaaackiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaackiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaaeaaaaaackiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahccaabaaaafaaaaaa
egacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaaafaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaaafaaaaaa
pgipcaaaadaaaaaabeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaagaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaaagaaaaaaegacbaaaadaaaaaa
egacbaaaaeaaaaaadgaaaaaihccabaaaahaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaa
beaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaiaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaaiaaaaaaegacbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahcccabaaaaiaaaaaaegacbaaaadaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_6.xyz;
  tmpvar_28 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_26.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_26.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_26.z;
  vec3 v_30;
  v_30.x = _Object2World[0].x;
  v_30.y = _Object2World[1].x;
  v_30.z = _Object2World[2].x;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_29 * v_30) * unity_Scale.w);
  tmpvar_1 = tmpvar_31;
  vec3 v_32;
  v_32.x = _Object2World[0].y;
  v_32.y = _Object2World[1].y;
  v_32.z = _Object2World[2].y;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * v_32) * unity_Scale.w);
  tmpvar_2 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].z;
  v_34.y = _Object2World[1].z;
  v_34.z = _Object2World[2].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_29 * v_34) * unity_Scale.w);
  tmpvar_3 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_24);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_29 * (((_World2Object * tmpvar_37).xyz * unity_Scale.w) - tmpvar_23));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = xlv_TEXCOORD4;
  mediump vec3 viewDir_20;
  viewDir_20 = tmpvar_17;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_11, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (viewDir_20, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_9 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_19 + viewDir_20)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1 = tmpvar_18;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_6.xyz;
  tmpvar_28 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_26.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_26.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_26.z;
  vec3 v_30;
  v_30.x = _Object2World[0].x;
  v_30.y = _Object2World[1].x;
  v_30.z = _Object2World[2].x;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_29 * v_30) * unity_Scale.w);
  tmpvar_1 = tmpvar_31;
  vec3 v_32;
  v_32.x = _Object2World[0].y;
  v_32.y = _Object2World[1].y;
  v_32.z = _Object2World[2].y;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * v_32) * unity_Scale.w);
  tmpvar_2 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].z;
  v_34.y = _Object2World[1].z;
  v_34.z = _Object2World[2].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_29 * v_34) * unity_Scale.w);
  tmpvar_3 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_24);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_29 * (((_World2Object * tmpvar_37).xyz * unity_Scale.w) - tmpvar_23));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, normal_11);
  tmpvar_12.y = dot (tmpvar_3, normal_11);
  tmpvar_12.z = dot (tmpvar_4, normal_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = xlv_TEXCOORD4;
  mediump vec3 viewDir_20;
  viewDir_20 = tmpvar_17;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (normal_11, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (viewDir_20, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_9 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (normal_11, normalize((lightDir_19 + viewDir_20)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1 = tmpvar_18;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 648
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 661
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 662
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 665
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 669
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 673
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 677
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    #line 681
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 648
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 661
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 631
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 635
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 639
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 643
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 684
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 686
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    #line 690
    surfIN.TtoW1 = IN.TtoW1.xyz;
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    #line 694
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 698
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 702
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    #line 706
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_ProjectionParams]
Vector 20 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Scale]
Vector 23 [_SquashPlaneNormal]
Float 24 [_SquashAmount]
Vector 25 [_Wind]
Vector 26 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 105 ALU
PARAM c[30] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..26],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 },
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R3.w, -R1.x, c[0].y;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R0.xyz, R0, R3.w, vertex.position;
ADD R4, R2, c[0].x;
MUL R0.xyz, R0, c[22];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R4, R4;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[27];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[28].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R4, -vertex.normal;
ADD R4.xy, R1.xzzw, R1.ywzw;
MAD R3.xyz, R3.w, R2, vertex.normal;
MUL R1.xyz, R4.y, c[25];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R4.zw, vertex.color.y, R3.xyxz;
MOV R0.w, c[0].y;
MUL R1.xz, R4.zyww, c[28].z;
MUL R1.y, vertex.texcoord[1], c[28];
MAD R1.xyz, R4.xyxw, R1, R2;
MAD R0.xyz, R1, c[25].w, R0;
MAD R1.xyz, vertex.texcoord[1].x, c[25], R0;
DP3 R0.x, R1, c[23];
ADD R0.x, R0, c[23].w;
MUL R0.xyz, R0.x, c[23];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[24].x, R1;
MUL R1, vertex.attrib[14].y, c[6];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R1.w, R1, R1;
RSQ R2.z, R1.w;
MUL R1.xyz, R2.z, R1;
MOV R1.w, c[28];
ADD R1, -vertex.attrib[14], R1;
DP4 R2.w, R0, c[4];
DP4 R2.z, R0, c[3];
DP4 R2.y, R0, c[2];
DP4 R2.x, R0, c[1];
MUL R4.xyz, R2.xyww, c[29].x;
MUL R4.y, R4, c[19].x;
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
MUL R3.xyz, R0.w, R3;
MAD R1, R3.w, R1, vertex.attrib[14];
MOV result.position, R2;
DP3 R2.x, R1, R1;
RSQ R2.x, R2.x;
MOV result.texcoord[7].zw, R2;
MUL R1.xyz, R2.x, R1;
ADD result.texcoord[7].xy, R4, R4.z;
MUL R4.xyz, R3.zxyw, R1.yzxw;
MAD R4.xyz, R3.yzxw, R1.zxyw, -R4;
MOV R2.xyz, c[18];
MOV R2.w, c[0].y;
MUL R4.xyz, R4, R1.w;
DP4 R5.z, R2, c[15];
DP4 R5.x, R2, c[13];
DP4 R5.y, R2, c[14];
MAD R0.xyz, R5, c[21].w, -R0;
DP3 result.texcoord[6].y, R4, R0;
DP3 result.texcoord[6].z, R3, R0;
DP3 result.texcoord[6].x, R1, R0;
DP3 R0.y, R4, c[9];
DP3 R0.x, R1, c[9];
DP3 R0.z, R3, c[9];
MUL result.texcoord[1].xyz, R0, c[21].w;
DP3 R0.y, R4, c[10];
DP3 R0.x, R1, c[10];
DP3 R0.z, R3, c[10];
MUL result.texcoord[2].xyz, R0, c[21].w;
MOV R0, c[20];
DP3 R2.y, R4, c[11];
DP3 R2.z, R3, c[11];
DP3 R2.x, R1, c[11];
MUL result.texcoord[3].xyz, R2, c[21].w;
DP4 R2.z, R0, c[15];
DP4 R2.x, R0, c[13];
DP4 R2.y, R0, c[14];
DP3 result.texcoord[4].y, R4, R2;
DP3 result.texcoord[4].z, R3, R2;
DP3 result.texcoord[4].x, R1, R2;
MOV result.color.xyz, c[0].y;
MOV result.texcoord[5].xyz, c[0].x;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[26], c[26].zwzw;
MOV result.color.w, vertex.color;
END
# 105 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_ProjectionParams]
Vector 19 [_ScreenParams]
Vector 20 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Scale]
Vector 23 [_SquashPlaneNormal]
Float 24 [_SquashAmount]
Vector 25 [_Wind]
Vector 26 [_MainTex_ST]
"vs_3_0
; 110 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
def c27, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c28, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c29, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c30, 0.10000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c27.x
abs r0.w, v1
add r4.w, -r0, c27.y
mov r1.xyz, c11
dp3 r0.w, c27.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r4.w, v0
add r3, r2, c27.x
mul r0.xyz, r0, c22
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp3 r1.x, r0, r1.x
dp4 r0.w, r3, r3
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c28
frc r1, r1
mad r1, r1, c27.z, c27.w
frc r1, r1
mad r1, r1, c29.x, c29.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c29.x, c29.z
mul r1, r2, r1
add r4.xy, r1.xzzw, r1.ywzw
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
mad r3.xyz, r4.w, r2, v2
mul r1.xyz, r4.y, c25
mul r2.xyz, v4.y, r1
mul r5.xy, v5.y, r3.xzzw
mov r0.w, c27.y
mul r1.xz, r5.xyyw, c30.x
mul r1.y, v4, c29.w
mad r1.xyz, r4.xyxw, r1, r2
mad r0.xyz, r1, c25.w, r0
mad r1.xyz, v4.x, c25, r0
dp3 r0.x, r1, c23
add r0.x, r0, c23.w
mul r0.xyz, r0.x, c23
add r1.xyz, -r0, r1
mad r0.xyz, r0, c24.x, r1
mul r1, v1.y, c5
mad r1, v1.x, c4, r1
mad r1, v1.z, c6, r1
add r1, r1, c27.x
dp4 r1.w, r1, r1
rsq r2.z, r1.w
mul r1.xyz, r2.z, r1
mov r1.w, c29.y
add r1, -v1, r1
dp4 r2.w, r0, c3
dp4 r2.z, r0, c2
dp4 r2.y, r0, c1
dp4 r2.x, r0, c0
mul r4.xyz, r2.xyww, c30.y
mul r4.y, r4, c18.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mul r3.xyz, r0.w, r3
mad r1, r4.w, r1, v1
mov o0, r2
dp3 r2.x, r1, r1
rsq r2.x, r2.x
mov o9.zw, r2
mul r1.xyz, r2.x, r1
mad o9.xy, r4.z, c19.zwzw, r4
mul r4.xyz, r3.zxyw, r1.yzxw
mad r4.xyz, r3.yzxw, r1.zxyw, -r4
mov r2.xyz, c17
mov r2.w, c27.y
dp4 r5.z, r2, c14
dp4 r5.x, r2, c12
dp4 r5.y, r2, c13
mad r0.xyz, r5, c21.w, -r0
mul r4.xyz, r4, r1.w
dp3 o8.y, r4, r0
dp3 o8.z, r3, r0
dp3 o8.x, r1, r0
dp3 r0.y, r4, c8
dp3 r0.x, r1, c8
dp3 r0.z, r3, c8
mul o3.xyz, r0, c21.w
dp3 r0.y, r4, c9
dp3 r0.x, r1, c9
dp3 r0.z, r3, c9
mul o4.xyz, r0, c21.w
mov r0, c14
dp4 r5.z, c20, r0
mov r0, c13
dp4 r5.y, c20, r0
dp3 r2.y, r4, c10
dp3 r2.z, r3, c10
dp3 r2.x, r1, c10
mul o5.xyz, r2, c21.w
mov r2, c12
dp4 r5.x, c20, r2
dp3 o6.y, r4, r5
dp3 o6.z, r3, r5
dp3 o6.x, r1, r5
mov o2.xyz, c27.y
mov o7.xyz, c27.x
mad o1.xy, v3, c26, c26.zwzw
mov o2.w, v5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 115 instructions, 7 temp regs, 0 temp arrays:
// ALU 95 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhngmfadlmleaganepfldpblofmkfplfkabaaaaaadebbaaaaadaaaaaa
cmaaaaaapeaaaaaabaacaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheobeabaaaaakaaaaaa
aiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaanabaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcbmapaaaaeaaaabaamhadaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadlcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaad
hccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaacahaaaaaadgaaaaag
bcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaaaaaaaa
dkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaaadaaaaaa
aoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaabkbabaaa
afaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
aiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
ajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
akaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaakgakbaaa
aaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaaabaaaaaa
aaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdp
amaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaa
dcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaa
acaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaaegaobaia
mbaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaaacaaaaaa
igaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgbfbaaa
aeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaaaeaaaaaa
baaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaaegacbaaa
aeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaadiaaaaah
ccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaa
adaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaaaaaaaaaa
abeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaa
agbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaaaaaaaaabaaaaaai
bcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaal
hcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaa
dgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaa
dgaaaaaihccabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
dgaaaaaficcabaaaacaaaaaadkbabaaaafaaaaaabaaaaaaiicaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaaeaaaaaajgaebaaa
acaaaaaacgajbaaaadaaaaaadcaaaaakhcaabaaaaeaaaaaajgaebaaaadaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaa
pgapbaaaacaaaaaaegacbaaaaeaaaaaadgaaaaagbcaabaaaafaaaaaaakiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaafaaaaaaakiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaafaaaaaaakiacaaaadaaaaaaaoaaaaaabaaaaaahccaabaaa
agaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaabaaaaaahbcaabaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaadiaaaaaihccabaaaadaaaaaaegacbaaaagaaaaaa
pgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaafaaaaaabkiacaaaadaaaaaa
amaaaaaadgaaaaagccaabaaaafaaaaaabkiacaaaadaaaaaaanaaaaaadgaaaaag
ecaabaaaafaaaaaabkiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaafaaaaaabaaaaaahccaabaaaagaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaaadaaaaaa
egacbaaaafaaaaaadiaaaaaihccabaaaaeaaaaaaegacbaaaagaaaaaapgipcaaa
adaaaaaabeaaaaaadgaaaaagbcaabaaaafaaaaaackiacaaaadaaaaaaamaaaaaa
dgaaaaagccaabaaaafaaaaaackiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaa
afaaaaaackiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaafaaaaaabaaaaaahccaabaaaagaaaaaaegacbaaaaeaaaaaa
egacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaaagaaaaaapgipcaaaadaaaaaa
beaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaa
aaaaaaaaegacbaaaafaaaaaabaaaaaahbccabaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaafaaaaaabaaaaaaheccabaaaagaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaabaaaaaahcccabaaaagaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaa
dgaaaaaihccabaaaahaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
diaaaaajhcaabaaaafaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
abaaaaaaaeaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaaaaaaaaai
hcaabaaaafaaaaaaegacbaaaafaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaal
hcaabaaaaaaaaaaaegacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaia
ebaaaaaaaaaaaaaabaaaaaahbccabaaaaiaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaaheccabaaaaiaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaahcccabaaaaiaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaai
bcaabaaaaaaaaaaabkaabaaaabaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaah
icaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaa
aaaaaaaaagadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaa
dgaaaaafmccabaaaajaaaaaakgaobaaaabaaaaaaaaaaaaahdccabaaaajaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_6.xyz;
  tmpvar_28 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_26.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_26.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_26.z;
  vec3 v_30;
  v_30.x = _Object2World[0].x;
  v_30.y = _Object2World[1].x;
  v_30.z = _Object2World[2].x;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_29 * v_30) * unity_Scale.w);
  tmpvar_1 = tmpvar_31;
  vec3 v_32;
  v_32.x = _Object2World[0].y;
  v_32.y = _Object2World[1].y;
  v_32.z = _Object2World[2].y;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * v_32) * unity_Scale.w);
  tmpvar_2 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].z;
  v_34.y = _Object2World[1].z;
  v_34.z = _Object2World[2].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_29 * v_34) * unity_Scale.w);
  tmpvar_3 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_24);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_29 * (((_World2Object * tmpvar_37).xyz * unity_Scale.w) - tmpvar_23));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_24));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float tmpvar_17;
  mediump float lightShadowDataX_18;
  highp float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = _LightShadowData.x;
  lightShadowDataX_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((dist_19 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_18);
  tmpvar_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_24;
  mediump vec3 lightDir_25;
  lightDir_25 = xlv_TEXCOORD4;
  mediump vec3 viewDir_26;
  viewDir_26 = tmpvar_23;
  mediump float atten_27;
  atten_27 = tmpvar_17;
  lowp vec4 c_28;
  lowp float backContrib_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_11, lightDir_25);
  mediump float tmpvar_31;
  tmpvar_31 = clamp (dot (viewDir_26, -(lightDir_25)), 0.0, 1.0);
  backContrib_29 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = clamp (-(tmpvar_30), 0.0, 1.0);
  lowp float tmpvar_33;
  tmpvar_33 = mix (tmpvar_32, backContrib_29, _TranslucencyViewDependency);
  backContrib_29 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_9 * ((tmpvar_34 * 2.0) + max (0.0, ((tmpvar_30 * 0.6) + 0.4))));
  c_28.xyz = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((c_28.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_25 + viewDir_26)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_28.xyz = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_28.xyz * mix (2.0, (atten_27 * 2.0), _ShadowStrength));
  c_28.xyz = tmpvar_37;
  tmpvar_24 = c_28;
  c_1 = tmpvar_24;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec4 tmpvar_27;
  tmpvar_27 = (glstate_matrix_mvp * tmpvar_24);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_6.xyz;
  tmpvar_29 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_26.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_26.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_26.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = _WorldSpaceCameraPos;
  highp vec4 o_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_27 * 0.5);
  highp vec2 tmpvar_41;
  tmpvar_41.x = tmpvar_40.x;
  tmpvar_41.y = (tmpvar_40.y * _ProjectionParams.x);
  o_39.xy = (tmpvar_41 + tmpvar_40.w);
  o_39.zw = tmpvar_27.zw;
  gl_Position = tmpvar_27;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_38).xyz * unity_Scale.w) - tmpvar_23));
  xlv_TEXCOORD7 = o_39;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, normal_11);
  tmpvar_12.y = dot (tmpvar_3, normal_11);
  tmpvar_12.z = dot (tmpvar_4, normal_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_19;
  mediump vec3 lightDir_20;
  lightDir_20 = xlv_TEXCOORD4;
  mediump vec3 viewDir_21;
  viewDir_21 = tmpvar_18;
  mediump float atten_22;
  atten_22 = tmpvar_17;
  lowp vec4 c_23;
  lowp float backContrib_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (normal_11, lightDir_20);
  mediump float tmpvar_26;
  tmpvar_26 = clamp (dot (viewDir_21, -(lightDir_20)), 0.0, 1.0);
  backContrib_24 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp (-(tmpvar_25), 0.0, 1.0);
  lowp float tmpvar_28;
  tmpvar_28 = mix (tmpvar_27, backContrib_24, _TranslucencyViewDependency);
  backContrib_24 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_9 * ((tmpvar_29 * 2.0) + max (0.0, ((tmpvar_25 * 0.6) + 0.4))));
  c_23.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((c_23.xyz + (pow (max (0.0, dot (normal_11, normalize((lightDir_20 + viewDir_21)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_23.xyz = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (c_23.xyz * mix (2.0, (atten_22 * 2.0), _ShadowStrength));
  c_23.xyz = tmpvar_32;
  tmpvar_19 = c_23;
  c_1 = tmpvar_19;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 670
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 671
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 674
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 678
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 682
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 686
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 691
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 670
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 694
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 696
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    #line 700
    surfIN.TtoW1 = IN.TtoW1.xyz;
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    #line 704
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 708
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 712
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    #line 716
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Vector 20 [unity_4LightPosX0]
Vector 21 [unity_4LightPosY0]
Vector 22 [unity_4LightPosZ0]
Vector 23 [unity_4LightAtten0]
Vector 24 [unity_LightColor0]
Vector 25 [unity_LightColor1]
Vector 26 [unity_LightColor2]
Vector 27 [unity_LightColor3]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 28 [unity_Scale]
Vector 29 [_Scale]
Vector 30 [_SquashPlaneNormal]
Float 31 [_SquashAmount]
Vector 32 [_Wind]
Vector 33 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 132 ALU
PARAM c[36] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..33],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R0.w, vertex.attrib[14];
ADD R5.w, -R0, c[0].y;
MOV R1.x, c[0].y;
DP3 R0.w, R1.x, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R2, vertex.normal.z, c[7], R2;
MAD R0.xyz, R0, R5.w, vertex.position;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[29];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[34];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[35].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R3.xy, R1.xzzw, R1.ywzw;
MAD R5.xyz, R5.w, R2, vertex.normal;
MUL R1.xyz, R3.y, c[32];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R3.zw, vertex.color.y, R5.xyxz;
DP3 R4.x, R5, R5;
RSQ R6.x, R4.x;
MUL R5.xyz, R6.x, R5;
MUL R6.xyz, R5, c[28].w;
MOV R1.w, c[0].y;
MUL R1.xz, R3.zyww, c[35].z;
MUL R1.y, vertex.texcoord[1], c[35];
MAD R1.xyz, R3.xyxw, R1, R2;
MAD R0.xyz, R1, c[32].w, R0;
MAD R1.xyz, vertex.texcoord[1].x, c[32], R0;
DP3 R0.x, R1, c[30];
ADD R0.x, R0, c[30].w;
MUL R0.xyz, R0.x, c[30];
ADD R1.xyz, -R0, R1;
MAD R1.xyz, R0, c[31].x, R1;
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
DP4 result.position.w, R1, c[4];
DP4 result.position.z, R1, c[3];
DP4 result.position.y, R1, c[2];
DP4 result.position.x, R1, c[1];
ADD R2, -R0.x, c[20];
ADD R3, -R0.y, c[21];
MUL R0, R3, R3;
MAD R4, R2, R2, R0;
DP4 R0.x, R1, c[11];
ADD R0, -R0.x, c[22];
DP3 R6.w, R6, c[10];
MUL R3, R3, R6.w;
DP3 R6.w, R6, c[9];
MAD R2, R2, R6.w, R3;
DP3 R3.x, R6, c[11];
MAD R4, R0, R0, R4;
MAD R2, R0, R3.x, R2;
MUL R3, R4, c[23];
ADD R3, R3, c[0].y;
RSQ R0.x, R4.x;
RSQ R0.y, R4.y;
RSQ R0.z, R4.z;
RSQ R0.w, R4.w;
MUL R0, R2, R0;
MAX R2, R0, c[0].x;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R0, vertex.attrib[14].z, c[7], R0;
ADD R0, R0, c[0].x;
DP4 R0.w, R0, R0;
RSQ R4.x, R0.w;
RCP R3.x, R3.x;
RCP R3.y, R3.y;
RCP R3.z, R3.z;
RCP R3.w, R3.w;
MUL R2, R2, R3;
MUL R3.xyz, R2.y, c[25];
MAD R3.xyz, R2.x, c[24], R3;
MAD R3.xyz, R2.z, c[26], R3;
MAD result.texcoord[5].xyz, R2.w, c[27], R3;
MOV R2.w, c[0].y;
MUL R0.xyz, R4.x, R0;
MOV R0.w, c[35];
ADD R0, -vertex.attrib[14], R0;
MAD R0, R5.w, R0, vertex.attrib[14];
DP3 R3.w, R0, R0;
RSQ R2.y, R3.w;
MUL R0.xyz, R2.y, R0;
MUL R2.xyz, R5.zxyw, R0.yzxw;
MAD R3.xyz, R5.yzxw, R0.zxyw, -R2;
MOV R2.xyz, c[18];
MUL R3.xyz, R3, R0.w;
DP4 R4.z, R2, c[15];
DP4 R4.x, R2, c[13];
DP4 R4.y, R2, c[14];
MAD R2.xyz, R4, c[28].w, -R1;
DP3 result.texcoord[6].y, R3, R2;
DP3 result.texcoord[6].z, R5, R2;
DP3 result.texcoord[6].x, R0, R2;
DP3 R1.y, R3, c[9];
DP3 R1.x, R0, c[9];
DP3 R1.z, R5, c[9];
MUL result.texcoord[1].xyz, R1, c[28].w;
DP3 R1.y, R3, c[10];
DP3 R1.x, R0, c[10];
DP3 R1.z, R5, c[10];
MUL result.texcoord[2].xyz, R1, c[28].w;
MOV R1, c[19];
DP3 R2.y, R3, c[11];
DP3 R2.z, R5, c[11];
DP3 R2.x, R0, c[11];
MUL result.texcoord[3].xyz, R2, c[28].w;
DP4 R2.z, R1, c[15];
DP4 R2.x, R1, c[13];
DP4 R2.y, R1, c[14];
DP3 result.texcoord[4].y, R3, R2;
DP3 result.texcoord[4].z, R5, R2;
DP3 result.texcoord[4].x, R0, R2;
MOV result.color.xyz, c[0].y;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[33], c[33].zwzw;
MOV result.color.w, vertex.color;
END
# 132 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Vector 19 [unity_4LightPosX0]
Vector 20 [unity_4LightPosY0]
Vector 21 [unity_4LightPosZ0]
Vector 22 [unity_4LightAtten0]
Vector 23 [unity_LightColor0]
Vector 24 [unity_LightColor1]
Vector 25 [unity_LightColor2]
Vector 26 [unity_LightColor3]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 27 [unity_Scale]
Vector 28 [_Scale]
Vector 29 [_SquashPlaneNormal]
Float 30 [_SquashAmount]
Vector 31 [_Wind]
Vector 32 [_MainTex_ST]
"vs_3_0
; 137 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
def c33, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c34, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c35, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c36, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c33.x
abs r0.w, v1
add r5.w, -r0, c33.y
mov r1.xyz, c11
dp3 r0.w, c33.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r5.w, v0
add r3, r2, c33.x
mul r0.xyz, r0, c28
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp4 r0.w, r3, r3
dp3 r1.x, r0, r1.x
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c34
frc r1, r1
mad r1, r1, c33.z, c33.w
frc r1, r1
mad r1, r1, c35.x, c35.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c35.x, c35.z
mul r1, r2, r1
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
add r3.xy, r1.xzzw, r1.ywzw
mad r5.xyz, r5.w, r2, v2
mul r1.xyz, r3.y, c31
mul r2.xyz, v4.y, r1
mul r3.zw, v5.y, r5.xyxz
dp3 r4.x, r5, r5
rsq r6.x, r4.x
mul r5.xyz, r6.x, r5
mul r6.xyz, r5, c27.w
mov r1.w, c33.y
mul r1.xz, r3.zyww, c36.x
mul r1.y, v4, c35.w
mad r1.xyz, r3.xyxw, r1, r2
mad r0.xyz, r1, c31.w, r0
mad r1.xyz, v4.x, c31, r0
dp3 r0.x, r1, c29
add r0.x, r0, c29.w
mul r0.xyz, r0.x, c29
add r1.xyz, -r0, r1
mad r1.xyz, r0, c30.x, r1
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
add r2, -r0.x, c19
add r3, -r0.y, c20
mul r0, r3, r3
mad r4, r2, r2, r0
dp4 r0.x, r1, c10
add r0, -r0.x, c21
dp3 r6.w, r6, c9
mul r3, r3, r6.w
dp3 r6.w, r6, c8
mad r2, r2, r6.w, r3
dp3 r3.x, r6, c10
mad r4, r0, r0, r4
mad r2, r0, r3.x, r2
mul r3, r4, c22
add r3, r3, c33.y
rsq r0.x, r4.x
rsq r0.y, r4.y
rsq r0.z, r4.z
rsq r0.w, r4.w
mul r0, r2, r0
max r2, r0, c33.x
mul r0, v1.y, c5
mad r0, v1.x, c4, r0
mad r0, v1.z, c6, r0
add r0, r0, c33.x
dp4 r0.w, r0, r0
rsq r4.x, r0.w
rcp r3.x, r3.x
rcp r3.y, r3.y
rcp r3.z, r3.z
rcp r3.w, r3.w
mul r2, r2, r3
mul r3.xyz, r2.y, c24
mad r3.xyz, r2.x, c23, r3
mad r3.xyz, r2.z, c25, r3
mad o7.xyz, r2.w, c26, r3
mov r2.w, c33.y
mul r0.xyz, r4.x, r0
mov r0.w, c35.y
add r0, -v1, r0
mad r0, r5.w, r0, v1
dp3 r3.w, r0, r0
rsq r2.y, r3.w
mul r0.xyz, r2.y, r0
mul r2.xyz, r5.zxyw, r0.yzxw
mad r3.xyz, r5.yzxw, r0.zxyw, -r2
mov r2.xyz, c17
dp4 r4.z, r2, c14
dp4 r4.x, r2, c12
dp4 r4.y, r2, c13
mad r4.xyz, r4, c27.w, -r1
mul r2.xyz, r3, r0.w
dp3 o8.y, r2, r4
dp3 o8.z, r5, r4
dp3 o8.x, r0, r4
dp3 r1.y, r2, c8
dp3 r1.x, r0, c8
dp3 r1.z, r5, c8
mul o3.xyz, r1, c27.w
dp3 r1.y, r2, c9
dp3 r1.x, r0, c9
dp3 r1.z, r5, c9
mul o4.xyz, r1, c27.w
mov r1, c14
dp4 r4.z, c18, r1
mov r1, c13
dp4 r4.y, c18, r1
dp3 r3.y, r2, c10
dp3 r3.z, r5, c10
dp3 r3.x, r0, c10
mul o5.xyz, r3, c27.w
mov r3, c12
dp4 r4.x, c18, r3
dp3 o6.y, r2, r4
dp3 o6.z, r5, r4
dp3 o6.x, r0, r4
mov o2.xyz, c33.y
mad o1.xy, v3, c32, c32.zwzw
mov o2.w, v5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 224 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 160 [unity_LightColor4] 4
Vector 176 [unity_LightColor5] 4
Vector 192 [unity_LightColor6] 4
Vector 208 [unity_LightColor7] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 135 instructions, 9 temp regs, 0 temp arrays:
// ALU 118 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednapjalojnomgbfdopnbjpfnnlaljdfgmabaaaaaaaebeaaaaadaaaaaa
cmaaaaaapeaaaaaapiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheopmaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaapfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcaebcaaaa
eaaaabaaibaeaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaakaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadlcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaa
ahaaaaaagfaaaaadhccabaaaaiaaaaaagiaaaaacajaaaaaadgaaaaagbcaabaaa
aaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaaaaaaaadkiacaaa
adaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaaadaaaaaaaoaaaaaa
baaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakbabaaa
afaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaabkbabaaaafaaaaaa
apaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
aaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaeaaaaaa
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaakgakbaaaaaaaaaaa
aaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
diaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldp
aaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaap
pcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaa
acaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaa
egaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaea
aaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaa
egaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaaacaaaaaaigaabaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgbfbaaaaeaaaaaa
diaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaaaeaaaaaabaaaaaai
icaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
ccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
fgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaadiaaaaahccaabaaa
aaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaadaaaaaa
agacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaaaaaaaaaaabeaaaaa
jkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgipcaaa
aaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaa
aeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaaibcaabaaa
abaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaa
abaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
aaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaai
pccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaadcaaaaal
dccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadgaaaaaihccabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadgaaaaaficcabaaaacaaaaaadkbabaaaafaaaaaabaaaaaai
icaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
icaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaialpaaaaaaai
pcaabaaaabaaaaaaegaobaaaabaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaaegbobaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaa
egacbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaahhcaabaaa
adaaaaaajgaebaaaabaaaaaacgajbaaaacaaaaaadcaaaaakhcaabaaaadaaaaaa
jgaebaaaacaaaaaacgajbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaadgaaaaagbcaabaaa
aeaaaaaaakiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaaakiacaaa
adaaaaaaanaaaaaadgaaaaagecaabaaaaeaaaaaaakiacaaaadaaaaaaaoaaaaaa
baaaaaahccaabaaaafaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaah
bcaabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaa
afaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaadaaaaaa
egacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaaeaaaaaa
bkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaabkiacaaaadaaaaaa
anaaaaaadgaaaaagecaabaaaaeaaaaaabkiacaaaadaaaaaaaoaaaaaabaaaaaah
bcaabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahccaabaaa
afaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaaafaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaaeaaaaaaegacbaaa
afaaaaaapgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaaeaaaaaackiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaackiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaaeaaaaaackiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahccaabaaaafaaaaaa
egacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaaafaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaaafaaaaaa
pgipcaaaadaaaaaabeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaagaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaaagaaaaaaegacbaaaadaaaaaa
egacbaaaaeaaaaaadiaaaaaihcaabaaaaeaaaaaafgafbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaaamaaaaaa
agaabaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaa
adaaaaaaaoaaaaaakgakbaaaaaaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
aeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajpcaabaaa
afaaaaaakgakbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaaeaaaaaaaaaaaaaj
pcaabaaaagaaaaaaagaabaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaacaaaaaa
aaaaaaajpcaabaaaaeaaaaaafgafbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaa
adaaaaaadiaaaaaihcaabaaaahaaaaaaegacbaaaacaaaaaapgipcaaaadaaaaaa
beaaaaaadiaaaaaihcaabaaaaiaaaaaafgafbaaaahaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaaklcaabaaaahaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaa
ahaaaaaaegaibaaaaiaaaaaadcaaaaakhcaabaaaahaaaaaaegiccaaaadaaaaaa
aoaaaaaakgakbaaaahaaaaaaegadbaaaahaaaaaadiaaaaahpcaabaaaaiaaaaaa
egaobaaaaeaaaaaafgafbaaaahaaaaaadiaaaaahpcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaaagaaaaaa
egaobaaaagaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaagaaaaaaegaobaaa
agaaaaaaagaabaaaahaaaaaaegaobaaaaiaaaaaadcaaaaajpcaabaaaagaaaaaa
egaobaaaafaaaaaakgakbaaaahaaaaaaegaobaaaagaaaaaadcaaaaajpcaabaaa
aeaaaaaaegaobaaaafaaaaaaegaobaaaafaaaaaaegaobaaaaeaaaaaaeeaaaaaf
pcaabaaaafaaaaaaegaobaaaaeaaaaaadcaaaaanpcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegiocaaaacaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaoaaaaakpcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpegaobaaaaeaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaagaaaaaadeaaaaakpcaabaaaafaaaaaaegaobaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaahpcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegaobaaaafaaaaaadiaaaaaihcaabaaaafaaaaaafgafbaaaaeaaaaaa
egiccaaaacaaaaaaahaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaacaaaaaa
agaaaaaaagaabaaaaeaaaaaaegacbaaaafaaaaaadcaaaaakhcaabaaaaeaaaaaa
egiccaaaacaaaaaaaiaaaaaakgakbaaaaeaaaaaaegacbaaaafaaaaaadcaaaaak
hccabaaaahaaaaaaegiccaaaacaaaaaaajaaaaaapgapbaaaaeaaaaaaegacbaaa
aeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaa
egacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaiaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaabaaaaaaheccabaaaaiaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahcccabaaaaiaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_7.xyz;
  tmpvar_29 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_27.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_27.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_27.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosZ0 - tmpvar_41.z);
  highp vec4 tmpvar_45;
  tmpvar_45 = (((tmpvar_42 * tmpvar_42) + (tmpvar_43 * tmpvar_43)) + (tmpvar_44 * tmpvar_44));
  highp vec4 tmpvar_46;
  tmpvar_46 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_42 * tmpvar_38.x) + (tmpvar_43 * tmpvar_38.y)) + (tmpvar_44 * tmpvar_38.z)) * inversesqrt(tmpvar_45))) * (1.0/((1.0 + (tmpvar_45 * unity_4LightAtten0)))));
  highp vec3 tmpvar_47;
  tmpvar_47 = ((((unity_LightColor[0].xyz * tmpvar_46.x) + (unity_LightColor[1].xyz * tmpvar_46.y)) + (unity_LightColor[2].xyz * tmpvar_46.z)) + (unity_LightColor[3].xyz * tmpvar_46.w));
  tmpvar_5 = tmpvar_47;
  gl_Position = (glstate_matrix_mvp * tmpvar_25);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_40).xyz * unity_Scale.w) - tmpvar_24));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = xlv_TEXCOORD4;
  mediump vec3 viewDir_20;
  viewDir_20 = tmpvar_17;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_11, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (viewDir_20, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_9 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_19 + viewDir_20)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1 = tmpvar_18;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_7.xyz;
  tmpvar_29 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_27.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_27.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_27.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosZ0 - tmpvar_41.z);
  highp vec4 tmpvar_45;
  tmpvar_45 = (((tmpvar_42 * tmpvar_42) + (tmpvar_43 * tmpvar_43)) + (tmpvar_44 * tmpvar_44));
  highp vec4 tmpvar_46;
  tmpvar_46 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_42 * tmpvar_38.x) + (tmpvar_43 * tmpvar_38.y)) + (tmpvar_44 * tmpvar_38.z)) * inversesqrt(tmpvar_45))) * (1.0/((1.0 + (tmpvar_45 * unity_4LightAtten0)))));
  highp vec3 tmpvar_47;
  tmpvar_47 = ((((unity_LightColor[0].xyz * tmpvar_46.x) + (unity_LightColor[1].xyz * tmpvar_46.y)) + (unity_LightColor[2].xyz * tmpvar_46.z)) + (unity_LightColor[3].xyz * tmpvar_46.w));
  tmpvar_5 = tmpvar_47;
  gl_Position = (glstate_matrix_mvp * tmpvar_25);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_40).xyz * unity_Scale.w) - tmpvar_24));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, normal_11);
  tmpvar_12.y = dot (tmpvar_3, normal_11);
  tmpvar_12.z = dot (tmpvar_4, normal_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = xlv_TEXCOORD4;
  mediump vec3 viewDir_20;
  viewDir_20 = tmpvar_17;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (normal_11, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (viewDir_20, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_9 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (normal_11, normalize((lightDir_19 + viewDir_20)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1 = tmpvar_18;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 648
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 661
uniform highp vec4 _MainTex_ST;
#line 685
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 662
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 665
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 669
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 673
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 677
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 681
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 648
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 661
uniform highp vec4 _MainTex_ST;
#line 685
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 631
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 635
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 639
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 643
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 686
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 689
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    surfIN.TtoW1 = IN.TtoW1.xyz;
    #line 693
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 697
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 701
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 705
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_ProjectionParams]
Vector 20 [_WorldSpaceLightPos0]
Vector 21 [unity_4LightPosX0]
Vector 22 [unity_4LightPosY0]
Vector 23 [unity_4LightPosZ0]
Vector 24 [unity_4LightAtten0]
Vector 25 [unity_LightColor0]
Vector 26 [unity_LightColor1]
Vector 27 [unity_LightColor2]
Vector 28 [unity_LightColor3]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Scale]
Vector 31 [_SquashPlaneNormal]
Float 32 [_SquashAmount]
Vector 33 [_Wind]
Vector 34 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 137 ALU
PARAM c[38] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..34],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 },
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R0.w, vertex.attrib[14];
ADD R6.w, -R0, c[0].y;
MOV R1.x, c[0].y;
DP3 R0.w, R1.x, c[12];
MAD R0.xyz, R0, R6.w, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R1.w, R3, R3;
MUL R1.xyz, R0, c[30];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R1, R0.x;
ADD R0.xy, R0, c[17].y;
MUL R0, R0.xxyy, c[35];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R2, -R0, c[0].z;
ADD R2, R2, c[36].x;
MUL R0, R0, R0;
MUL R0, R0, R2;
RSQ R1.w, R1.w;
MAD R2.xyz, R1.w, R3, -vertex.normal;
ADD R4.xy, R0.xzzw, R0.ywzw;
MAD R0.xyz, R6.w, R2, vertex.normal;
MUL R2.xyz, R4.y, c[33];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R4.zw, vertex.color.y, R0.xyxz;
MOV R1.w, c[0].y;
MUL R2.xz, R4.zyww, c[36].z;
MUL R2.y, vertex.texcoord[1], c[36];
MAD R2.xyz, R4.xyxw, R2, R3;
MAD R1.xyz, R2, c[33].w, R1;
MAD R2.xyz, vertex.texcoord[1].x, c[33], R1;
DP3 R0.w, R2, c[31];
ADD R0.w, R0, c[31];
MUL R1.xyz, R0.w, c[31];
ADD R2.xyz, -R1, R2;
MAD R1.xyz, R1, c[32].x, R2;
DP4 R2.x, R1, c[10];
ADD R3, -R2.x, c[22];
DP4 R0.w, R1, c[9];
ADD R2, -R0.w, c[21];
MUL R4, R3, R3;
DP3 R0.w, R0, R0;
RSQ R0.w, R0.w;
MUL R6.xyz, R0.w, R0;
DP4 R5.x, R1, c[11];
MUL R7.xyz, R6, c[29].w;
DP3 R7.w, R7, c[10];
MUL R3, R3, R7.w;
ADD R0, -R5.x, c[23];
MAD R4, R2, R2, R4;
MAD R4, R0, R0, R4;
DP3 R7.w, R7, c[9];
MAD R2, R2, R7.w, R3;
DP3 R3.x, R7, c[11];
MAD R0, R0, R3.x, R2;
MUL R5, R4, c[24];
RSQ R2.x, R4.x;
RSQ R2.y, R4.y;
RSQ R2.z, R4.z;
RSQ R2.w, R4.w;
MUL R0, R0, R2;
ADD R2, R5, c[0].y;
MAX R0, R0, c[0].x;
RCP R2.x, R2.x;
RCP R2.y, R2.y;
RCP R2.w, R2.w;
RCP R2.z, R2.z;
MUL R2, R0, R2;
MUL R0.xyz, R2.y, c[26];
MAD R0.xyz, R2.x, c[25], R0;
MAD R2.xyz, R2.z, c[27], R0;
MAD result.texcoord[5].xyz, R2.w, c[28], R2;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R0, vertex.attrib[14].z, c[7], R0;
ADD R0, R0, c[0].x;
DP4 R0.w, R0, R0;
RSQ R2.z, R0.w;
DP4 R2.w, R1, c[4];
DP4 R2.y, R1, c[2];
DP4 R2.x, R1, c[1];
MUL R3.xyz, R2.xyww, c[37].x;
MUL R3.y, R3, c[19].x;
MUL R0.xyz, R2.z, R0;
MOV R0.w, c[36];
ADD R0, -vertex.attrib[14], R0;
MAD R0, R6.w, R0, vertex.attrib[14];
DP3 R2.z, R0, R0;
ADD result.texcoord[7].xy, R3, R3.z;
RSQ R3.x, R2.z;
DP4 R2.z, R1, c[3];
MUL R0.xyz, R3.x, R0;
MUL R3.xyz, R6.zxyw, R0.yzxw;
MAD R3.xyz, R6.yzxw, R0.zxyw, -R3;
MUL R3.xyz, R3, R0.w;
MOV result.position, R2;
MOV result.texcoord[7].zw, R2;
MOV R2.xyz, c[18];
MOV R2.w, c[0].y;
DP4 R4.z, R2, c[15];
DP4 R4.x, R2, c[13];
DP4 R4.y, R2, c[14];
MAD R1.xyz, R4, c[29].w, -R1;
DP3 result.texcoord[6].y, R3, R1;
DP3 result.texcoord[6].z, R6, R1;
DP3 result.texcoord[6].x, R0, R1;
DP3 R1.y, R3, c[9];
DP3 R1.x, R0, c[9];
DP3 R1.z, R6, c[9];
MUL result.texcoord[1].xyz, R1, c[29].w;
DP3 R1.y, R3, c[10];
DP3 R1.x, R0, c[10];
DP3 R1.z, R6, c[10];
MUL result.texcoord[2].xyz, R1, c[29].w;
MOV R1, c[20];
DP3 R2.y, R3, c[11];
DP3 R2.z, R6, c[11];
DP3 R2.x, R0, c[11];
MUL result.texcoord[3].xyz, R2, c[29].w;
DP4 R2.z, R1, c[15];
DP4 R2.x, R1, c[13];
DP4 R2.y, R1, c[14];
DP3 result.texcoord[4].y, R3, R2;
DP3 result.texcoord[4].z, R6, R2;
DP3 result.texcoord[4].x, R0, R2;
MOV result.color.xyz, c[0].y;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[34], c[34].zwzw;
MOV result.color.w, vertex.color;
END
# 137 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_ProjectionParams]
Vector 19 [_ScreenParams]
Vector 20 [_WorldSpaceLightPos0]
Vector 21 [unity_4LightPosX0]
Vector 22 [unity_4LightPosY0]
Vector 23 [unity_4LightPosZ0]
Vector 24 [unity_4LightAtten0]
Vector 25 [unity_LightColor0]
Vector 26 [unity_LightColor1]
Vector 27 [unity_LightColor2]
Vector 28 [unity_LightColor3]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Scale]
Vector 31 [_SquashPlaneNormal]
Float 32 [_SquashAmount]
Vector 33 [_Wind]
Vector 34 [_MainTex_ST]
"vs_3_0
; 142 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
def c35, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c36, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c37, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c38, 0.10000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c35.x
abs r0.w, v1
add r6.w, -r0, c35.y
mov r1.xyz, c11
dp3 r0.w, c35.y, r1
mad r0.xyz, r0, r6.w, v0
mad r2, v2.z, c6, r2
add r3, r2, c35.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c30
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c16.y
mul r0, r0.xxyy, c36
frc r0, r0
mad r0, r0, c35.z, c35.w
frc r0, r0
mad r0, r0, c37.x, c37.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c37.x, c37.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.xy, r0.xzzw, r0.ywzw
mad r0.xyz, r6.w, r2, v2
mul r2.xyz, r4.y, c33
mul r3.xyz, v4.y, r2
mul r4.zw, v5.y, r0.xyxz
mov r1.w, c35.y
mul r2.xz, r4.zyww, c38.x
mul r2.y, v4, c37.w
mad r2.xyz, r4.xyxw, r2, r3
mad r1.xyz, r2, c33.w, r1
mad r2.xyz, v4.x, c33, r1
dp3 r0.w, r2, c31
add r0.w, r0, c31
mul r1.xyz, r0.w, c31
add r2.xyz, -r1, r2
mad r1.xyz, r1, c32.x, r2
dp4 r2.x, r1, c9
add r3, -r2.x, c22
dp4 r0.w, r1, c8
add r2, -r0.w, c21
mul r4, r3, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r6.xyz, r0.w, r0
dp4 r5.x, r1, c10
mul r7.xyz, r6, c29.w
dp3 r7.w, r7, c9
mul r3, r3, r7.w
add r0, -r5.x, c23
mad r4, r2, r2, r4
mad r4, r0, r0, r4
dp3 r7.w, r7, c8
mad r2, r2, r7.w, r3
dp3 r3.x, r7, c10
mad r0, r0, r3.x, r2
mul r5, r4, c24
rsq r2.x, r4.x
rsq r2.y, r4.y
rsq r2.z, r4.z
rsq r2.w, r4.w
mul r0, r0, r2
add r2, r5, c35.y
max r0, r0, c35.x
rcp r2.x, r2.x
rcp r2.y, r2.y
rcp r2.w, r2.w
rcp r2.z, r2.z
mul r2, r0, r2
mul r0.xyz, r2.y, c26
mad r0.xyz, r2.x, c25, r0
mad r2.xyz, r2.z, c27, r0
mad o7.xyz, r2.w, c28, r2
mul r0, v1.y, c5
mad r0, v1.x, c4, r0
mad r0, v1.z, c6, r0
add r0, r0, c35.x
dp4 r0.w, r0, r0
rsq r2.z, r0.w
dp4 r2.w, r1, c3
dp4 r2.y, r1, c1
dp4 r2.x, r1, c0
mul r3.xyz, r2.xyww, c38.y
mul r3.y, r3, c18.x
mad o9.xy, r3.z, c19.zwzw, r3
mul r0.xyz, r2.z, r0
mov r0.w, c37.y
add r0, -v1, r0
mad r0, r6.w, r0, v1
dp3 r2.z, r0, r0
rsq r3.x, r2.z
dp4 r2.z, r1, c2
mul r0.xyz, r3.x, r0
mul r3.xyz, r6.zxyw, r0.yzxw
mad r3.xyz, r6.yzxw, r0.zxyw, -r3
mul r3.xyz, r3, r0.w
mov o0, r2
mov o9.zw, r2
mov r2.xyz, c17
mov r2.w, c35.y
dp4 r4.z, r2, c14
dp4 r4.x, r2, c12
dp4 r4.y, r2, c13
mad r1.xyz, r4, c29.w, -r1
dp3 o8.y, r3, r1
dp3 o8.z, r6, r1
dp3 o8.x, r0, r1
dp3 r1.y, r3, c8
dp3 r1.x, r0, c8
dp3 r1.z, r6, c8
mul o3.xyz, r1, c29.w
dp3 r1.y, r3, c9
dp3 r1.x, r0, c9
dp3 r1.z, r6, c9
mul o4.xyz, r1, c29.w
mov r1, c14
dp4 r4.z, c20, r1
mov r1, c13
dp4 r4.y, c20, r1
dp3 r2.y, r3, c10
dp3 r2.z, r6, c10
dp3 r2.x, r0, c10
mul o5.xyz, r2, c29.w
mov r2, c12
dp4 r4.x, c20, r2
dp3 o6.y, r3, r4
dp3 o6.z, r6, r4
dp3 o6.x, r0, r4
mov o2.xyz, c35.y
mad o1.xy, v3, c34, c34.zwzw
mov o2.w, v5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 224 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 160 [unity_LightColor4] 4
Vector 176 [unity_LightColor5] 4
Vector 192 [unity_LightColor6] 4
Vector 208 [unity_LightColor7] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 141 instructions, 10 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedljnlbnndofnoibdiiclobhlipinghonoabaaaaaanabeaaaaadaaaaaa
cmaaaaaapeaaaaaabaacaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheobeabaaaaakaaaaaa
aiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaanabaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefclibcaaaaeaaaabaakoaeaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaakaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadlcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaad
hccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaacakaaaaaadgaaaaag
bcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaaaaaaaa
dkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaaadaaaaaa
aoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaabkbabaaa
afaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
aiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
ajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
akaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaakgakbaaa
aaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaaabaaaaaa
aaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdp
amaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaa
dcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaa
acaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaaegaobaia
mbaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaaacaaaaaa
igaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgbfbaaa
aeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaaaeaaaaaa
baaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaaegacbaaa
aeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaadiaaaaah
ccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaa
adaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaaaaaaaaaa
abeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaa
agbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaaaaaaaaabaaaaaai
bcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaal
hcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaa
dgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaa
dgaaaaaihccabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
dgaaaaaficcabaaaacaaaaaadkbabaaaafaaaaaabaaaaaaiicaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaajgaebaaa
acaaaaaacgajbaaaadaaaaaadcaaaaakhcaabaaaaeaaaaaajgaebaaaadaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaa
pgapbaaaacaaaaaaegacbaaaaeaaaaaadgaaaaagbcaabaaaafaaaaaaakiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaafaaaaaaakiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaafaaaaaaakiacaaaadaaaaaaaoaaaaaabaaaaaahccaabaaa
agaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaabaaaaaahbcaabaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaadiaaaaaihccabaaaadaaaaaaegacbaaaagaaaaaa
pgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaafaaaaaabkiacaaaadaaaaaa
amaaaaaadgaaaaagccaabaaaafaaaaaabkiacaaaadaaaaaaanaaaaaadgaaaaag
ecaabaaaafaaaaaabkiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaafaaaaaabaaaaaahccaabaaaagaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaaadaaaaaa
egacbaaaafaaaaaadiaaaaaihccabaaaaeaaaaaaegacbaaaagaaaaaapgipcaaa
adaaaaaabeaaaaaadgaaaaagbcaabaaaafaaaaaackiacaaaadaaaaaaamaaaaaa
dgaaaaagccaabaaaafaaaaaackiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaa
afaaaaaackiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaafaaaaaabaaaaaahccaabaaaagaaaaaaegacbaaaaeaaaaaa
egacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaaagaaaaaapgipcaaaadaaaaaa
beaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaa
aaaaaaaaegacbaaaafaaaaaabaaaaaahbccabaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaafaaaaaabaaaaaaheccabaaaagaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaabaaaaaahcccabaaaagaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaa
diaaaaaihcaabaaaafaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaafaaaaaaegiccaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaa
egacbaaaafaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaafaaaaaaegacbaaa
afaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajpcaabaaaagaaaaaakgakbaia
ebaaaaaaafaaaaaaegiocaaaacaaaaaaaeaaaaaaaaaaaaajpcaabaaaahaaaaaa
agaabaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaajpcaabaaa
afaaaaaafgafbaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaadaaaaaadiaaaaai
hcaabaaaaiaaaaaaegacbaaaadaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaai
hcaabaaaajaaaaaafgafbaaaaiaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
lcaabaaaaiaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaiaaaaaaegaibaaa
ajaaaaaadcaaaaakhcaabaaaaiaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaa
aiaaaaaaegadbaaaaiaaaaaadiaaaaahpcaabaaaajaaaaaaegaobaaaafaaaaaa
fgafbaaaaiaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaafaaaaaaegaobaaaahaaaaaaegaobaaaahaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaahaaaaaaegaobaaaahaaaaaaagaabaaa
aiaaaaaaegaobaaaajaaaaaadcaaaaajpcaabaaaahaaaaaaegaobaaaagaaaaaa
kgakbaaaaiaaaaaaegaobaaaahaaaaaadcaaaaajpcaabaaaafaaaaaaegaobaaa
agaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaeeaaaaafpcaabaaaagaaaaaa
egaobaaaafaaaaaadcaaaaanpcaabaaaafaaaaaaegaobaaaafaaaaaaegiocaaa
acaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaoaaaaak
pcaabaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpegaobaaa
afaaaaaadiaaaaahpcaabaaaagaaaaaaegaobaaaagaaaaaaegaobaaaahaaaaaa
deaaaaakpcaabaaaagaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
agaaaaaadiaaaaaihcaabaaaagaaaaaafgafbaaaafaaaaaaegiccaaaacaaaaaa
ahaaaaaadcaaaaakhcaabaaaagaaaaaaegiccaaaacaaaaaaagaaaaaaagaabaaa
afaaaaaaegacbaaaagaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaacaaaaaa
aiaaaaaakgakbaaaafaaaaaaegacbaaaagaaaaaadcaaaaakhccabaaaahaaaaaa
egiccaaaacaaaaaaajaaaaaapgapbaaaafaaaaaaegacbaaaafaaaaaadiaaaaaj
hcaabaaaafaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
afaaaaaaegacbaaaafaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
aaaaaaaaegacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahbccabaaaaiaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaaheccabaaaaiaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaabaaaaaah
cccabaaaaiaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaibcaabaaa
aaaaaaaabkaabaaaabaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaaaaaaaaaa
agadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaadgaaaaaf
mccabaaaajaaaaaakgaobaaaabaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
aaaaaaaamgaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_7.xyz;
  tmpvar_29 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_27.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_27.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_27.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosZ0 - tmpvar_41.z);
  highp vec4 tmpvar_45;
  tmpvar_45 = (((tmpvar_42 * tmpvar_42) + (tmpvar_43 * tmpvar_43)) + (tmpvar_44 * tmpvar_44));
  highp vec4 tmpvar_46;
  tmpvar_46 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_42 * tmpvar_38.x) + (tmpvar_43 * tmpvar_38.y)) + (tmpvar_44 * tmpvar_38.z)) * inversesqrt(tmpvar_45))) * (1.0/((1.0 + (tmpvar_45 * unity_4LightAtten0)))));
  highp vec3 tmpvar_47;
  tmpvar_47 = ((((unity_LightColor[0].xyz * tmpvar_46.x) + (unity_LightColor[1].xyz * tmpvar_46.y)) + (unity_LightColor[2].xyz * tmpvar_46.z)) + (unity_LightColor[3].xyz * tmpvar_46.w));
  tmpvar_5 = tmpvar_47;
  gl_Position = (glstate_matrix_mvp * tmpvar_25);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_40).xyz * unity_Scale.w) - tmpvar_24));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_25));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float tmpvar_17;
  mediump float lightShadowDataX_18;
  highp float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = _LightShadowData.x;
  lightShadowDataX_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((dist_19 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_18);
  tmpvar_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_24;
  mediump vec3 lightDir_25;
  lightDir_25 = xlv_TEXCOORD4;
  mediump vec3 viewDir_26;
  viewDir_26 = tmpvar_23;
  mediump float atten_27;
  atten_27 = tmpvar_17;
  lowp vec4 c_28;
  lowp float backContrib_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_11, lightDir_25);
  mediump float tmpvar_31;
  tmpvar_31 = clamp (dot (viewDir_26, -(lightDir_25)), 0.0, 1.0);
  backContrib_29 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = clamp (-(tmpvar_30), 0.0, 1.0);
  lowp float tmpvar_33;
  tmpvar_33 = mix (tmpvar_32, backContrib_29, _TranslucencyViewDependency);
  backContrib_29 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_9 * ((tmpvar_34 * 2.0) + max (0.0, ((tmpvar_30 * 0.6) + 0.4))));
  c_28.xyz = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((c_28.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_25 + viewDir_26)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_28.xyz = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_28.xyz * mix (2.0, (atten_27 * 2.0), _ShadowStrength));
  c_28.xyz = tmpvar_37;
  tmpvar_24 = c_28;
  c_1 = tmpvar_24;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_25);
  highp vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_29 = tmpvar_7.xyz;
  tmpvar_30 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_31;
  tmpvar_31[0].x = tmpvar_29.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = tmpvar_27.x;
  tmpvar_31[1].x = tmpvar_29.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = tmpvar_27.y;
  tmpvar_31[2].x = tmpvar_29.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = tmpvar_27.z;
  vec3 v_32;
  v_32.x = _Object2World[0].x;
  v_32.y = _Object2World[1].x;
  v_32.z = _Object2World[2].x;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_31 * v_32) * unity_Scale.w);
  tmpvar_1 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].y;
  v_34.y = _Object2World[1].y;
  v_34.z = _Object2World[2].y;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_31 * v_34) * unity_Scale.w);
  tmpvar_2 = tmpvar_35;
  vec3 v_36;
  v_36.x = _Object2World[0].z;
  v_36.y = _Object2World[1].z;
  v_36.z = _Object2World[2].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_31 * v_36) * unity_Scale.w);
  tmpvar_3 = tmpvar_37;
  mat3 tmpvar_38;
  tmpvar_38[0] = _Object2World[0].xyz;
  tmpvar_38[1] = _Object2World[1].xyz;
  tmpvar_38[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_31 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosX0 - tmpvar_42.x);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosY0 - tmpvar_42.y);
  highp vec4 tmpvar_45;
  tmpvar_45 = (unity_4LightPosZ0 - tmpvar_42.z);
  highp vec4 tmpvar_46;
  tmpvar_46 = (((tmpvar_43 * tmpvar_43) + (tmpvar_44 * tmpvar_44)) + (tmpvar_45 * tmpvar_45));
  highp vec4 tmpvar_47;
  tmpvar_47 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_43 * tmpvar_39.x) + (tmpvar_44 * tmpvar_39.y)) + (tmpvar_45 * tmpvar_39.z)) * inversesqrt(tmpvar_46))) * (1.0/((1.0 + (tmpvar_46 * unity_4LightAtten0)))));
  highp vec3 tmpvar_48;
  tmpvar_48 = ((((unity_LightColor[0].xyz * tmpvar_47.x) + (unity_LightColor[1].xyz * tmpvar_47.y)) + (unity_LightColor[2].xyz * tmpvar_47.z)) + (unity_LightColor[3].xyz * tmpvar_47.w));
  tmpvar_5 = tmpvar_48;
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_28.zw;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_31 * (((_World2Object * tmpvar_41).xyz * unity_Scale.w) - tmpvar_24));
  xlv_TEXCOORD7 = o_49;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, normal_11);
  tmpvar_12.y = dot (tmpvar_3, normal_11);
  tmpvar_12.z = dot (tmpvar_4, normal_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_19;
  mediump vec3 lightDir_20;
  lightDir_20 = xlv_TEXCOORD4;
  mediump vec3 viewDir_21;
  viewDir_21 = tmpvar_18;
  mediump float atten_22;
  atten_22 = tmpvar_17;
  lowp vec4 c_23;
  lowp float backContrib_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (normal_11, lightDir_20);
  mediump float tmpvar_26;
  tmpvar_26 = clamp (dot (viewDir_21, -(lightDir_20)), 0.0, 1.0);
  backContrib_24 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp (-(tmpvar_25), 0.0, 1.0);
  lowp float tmpvar_28;
  tmpvar_28 = mix (tmpvar_27, backContrib_24, _TranslucencyViewDependency);
  backContrib_24 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_9 * ((tmpvar_29 * 2.0) + max (0.0, ((tmpvar_25 * 0.6) + 0.4))));
  c_23.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((c_23.xyz + (pow (max (0.0, dot (normal_11, normalize((lightDir_20 + viewDir_21)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_23.xyz = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (c_23.xyz * mix (2.0, (atten_22 * 2.0), _ShadowStrength));
  c_23.xyz = tmpvar_32;
  tmpvar_19 = c_23;
  c_1 = tmpvar_19;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 670
uniform highp vec4 _MainTex_ST;
#line 695
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 671
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 674
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 678
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 682
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 686
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 690
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 670
uniform highp vec4 _MainTex_ST;
#line 695
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 696
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 699
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    surfIN.TtoW1 = IN.TtoW1.xyz;
    #line 703
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 707
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 711
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 715
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_6.xyz;
  tmpvar_28 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_26.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_26.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_26.z;
  vec3 v_30;
  v_30.x = _Object2World[0].x;
  v_30.y = _Object2World[1].x;
  v_30.z = _Object2World[2].x;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_29 * v_30) * unity_Scale.w);
  tmpvar_1 = tmpvar_31;
  vec3 v_32;
  v_32.x = _Object2World[0].y;
  v_32.y = _Object2World[1].y;
  v_32.z = _Object2World[2].y;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * v_32) * unity_Scale.w);
  tmpvar_2 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].z;
  v_34.y = _Object2World[1].z;
  v_34.z = _Object2World[2].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_29 * v_34) * unity_Scale.w);
  tmpvar_3 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_24);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_29 * (((_World2Object * tmpvar_37).xyz * unity_Scale.w) - tmpvar_23));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_24));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  highp float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_21;
  mediump vec3 lightDir_22;
  lightDir_22 = xlv_TEXCOORD4;
  mediump vec3 viewDir_23;
  viewDir_23 = tmpvar_20;
  mediump float atten_24;
  atten_24 = shadow_17;
  lowp vec4 c_25;
  lowp float backContrib_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_11, lightDir_22);
  mediump float tmpvar_28;
  tmpvar_28 = clamp (dot (viewDir_23, -(lightDir_22)), 0.0, 1.0);
  backContrib_26 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (-(tmpvar_27), 0.0, 1.0);
  lowp float tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, backContrib_26, _TranslucencyViewDependency);
  backContrib_26 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_30 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_9 * ((tmpvar_31 * 2.0) + max (0.0, ((tmpvar_27 * 0.6) + 0.4))));
  c_25.xyz = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((c_25.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_22 + viewDir_23)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_25.xyz = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_25.xyz * mix (2.0, (atten_24 * 2.0), _ShadowStrength));
  c_25.xyz = tmpvar_34;
  tmpvar_21 = c_25;
  c_1 = tmpvar_21;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 670
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 671
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 674
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 678
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 682
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 686
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 691
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 670
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 694
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 696
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    #line 700
    surfIN.TtoW1 = IN.TtoW1.xyz;
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    #line 704
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 708
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 712
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    #line 716
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_7.xyz;
  tmpvar_29 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_27.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_27.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_27.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosZ0 - tmpvar_41.z);
  highp vec4 tmpvar_45;
  tmpvar_45 = (((tmpvar_42 * tmpvar_42) + (tmpvar_43 * tmpvar_43)) + (tmpvar_44 * tmpvar_44));
  highp vec4 tmpvar_46;
  tmpvar_46 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_42 * tmpvar_38.x) + (tmpvar_43 * tmpvar_38.y)) + (tmpvar_44 * tmpvar_38.z)) * inversesqrt(tmpvar_45))) * (1.0/((1.0 + (tmpvar_45 * unity_4LightAtten0)))));
  highp vec3 tmpvar_47;
  tmpvar_47 = ((((unity_LightColor[0].xyz * tmpvar_46.x) + (unity_LightColor[1].xyz * tmpvar_46.y)) + (unity_LightColor[2].xyz * tmpvar_46.z)) + (unity_LightColor[3].xyz * tmpvar_46.w));
  tmpvar_5 = tmpvar_47;
  gl_Position = (glstate_matrix_mvp * tmpvar_25);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_40).xyz * unity_Scale.w) - tmpvar_24));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_25));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_13.xyz;
  diff_ibl_6.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_13.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  highp float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_21;
  mediump vec3 lightDir_22;
  lightDir_22 = xlv_TEXCOORD4;
  mediump vec3 viewDir_23;
  viewDir_23 = tmpvar_20;
  mediump float atten_24;
  atten_24 = shadow_17;
  lowp vec4 c_25;
  lowp float backContrib_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_11, lightDir_22);
  mediump float tmpvar_28;
  tmpvar_28 = clamp (dot (viewDir_23, -(lightDir_22)), 0.0, 1.0);
  backContrib_26 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (-(tmpvar_27), 0.0, 1.0);
  lowp float tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, backContrib_26, _TranslucencyViewDependency);
  backContrib_26 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_30 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_9 * ((tmpvar_31 * 2.0) + max (0.0, ((tmpvar_27 * 0.6) + 0.4))));
  c_25.xyz = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((c_25.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_22 + viewDir_23)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_25.xyz = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_25.xyz * mix (2.0, (atten_24 * 2.0), _ShadowStrength));
  c_25.xyz = tmpvar_34;
  tmpvar_21 = c_25;
  c_1 = tmpvar_21;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 670
uniform highp vec4 _MainTex_ST;
#line 695
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 671
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 674
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 678
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 682
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 686
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 690
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 670
uniform highp vec4 _MainTex_ST;
#line 695
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 696
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 699
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    surfIN.TtoW1 = IN.TtoW1.xyz;
    #line 703
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 707
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 711
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 715
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 20 [unity_Scale]
Vector 21 [_Scale]
Vector 22 [_SquashPlaneNormal]
Float 23 [_SquashAmount]
Vector 24 [_Wind]
Vector 25 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 86 ALU
PARAM c[28] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..25],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R3.w, R3, R3;
ABS R0.w, vertex.attrib[14];
ADD R0.w, -R0, c[0].y;
MAD R0.xyz, R0, R0.w, vertex.position;
MOV R1.x, c[0].y;
DP3 R1.x, R1.x, c[12];
ADD R1.x, vertex.color, R1;
ADD R1.z, vertex.color.y, R1.x;
MUL R0.xyz, R0, c[21];
MOV R1.y, R1.x;
DP3 R1.x, R0, R1.z;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[26];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
RSQ R3.w, R3.w;
ADD R2, R2, c[27].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
MAD R2.xyz, R3.w, R3, -vertex.normal;
MAD R3.xyz, R0.w, R2, vertex.normal;
ADD R5.xy, R1.xzzw, R1.ywzw;
MUL R1.xyz, R5.y, c[24];
MUL R2.xy, vertex.color.y, R3.xzzw;
MUL R4.xyz, vertex.texcoord[1].y, R1;
MUL R2.xz, R2.xyyw, c[27].z;
MUL R1, vertex.attrib[14].y, c[6];
MUL R2.y, vertex.texcoord[1], c[27];
MAD R2.xyz, R5.xyxw, R2, R4;
MAD R0.xyz, R2, c[24].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[24], R0;
DP3 R0.x, R2, c[22];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R0.y, R1, R1;
RSQ R0.y, R0.y;
MOV R3.w, c[0].y;
MUL R1.xyz, R0.y, R1;
ADD R0.x, R0, c[22].w;
MUL R0.xyz, R0.x, c[22];
ADD R4.xyz, -R0, R2;
MOV R1.w, c[27];
ADD R1, -vertex.attrib[14], R1;
MAD R1, R0.w, R1, vertex.attrib[14];
DP3 R2.x, R1, R1;
DP3 R0.w, R3, R3;
RSQ R2.x, R2.x;
MAD R0.xyz, R0, c[23].x, R4;
MUL R2.xyz, R2.x, R1;
RSQ R0.w, R0.w;
MUL R1.xyz, R0.w, R3;
MOV R0.w, c[0].y;
MUL R3.xyz, R1.zxyw, R2.yzxw;
MAD R5.xyz, R1.yzxw, R2.zxyw, -R3;
MOV R3.xyz, c[18];
DP4 R4.z, R3, c[15];
DP4 R4.y, R3, c[14];
DP4 R4.x, R3, c[13];
MAD R4.xyz, R4, c[20].w, -R0;
MUL R3.xyz, R5, R1.w;
DP3 result.texcoord[3].y, R3, R4;
DP3 result.texcoord[3].z, R1, R4;
DP3 result.texcoord[3].x, R2, R4;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MOV R0, c[19];
DP4 R4.z, R0, c[15];
DP4 R4.x, R0, c[13];
DP4 R4.y, R0, c[14];
DP3 result.texcoord[1].y, R4, R3;
DP3 result.texcoord[1].z, R1, R4;
DP3 result.texcoord[1].x, R4, R2;
MOV result.texcoord[2].xyz, c[0].x;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[25], c[25].zwzw;
END
# 86 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 19 [unity_Scale]
Vector 20 [_Scale]
Vector 21 [_SquashPlaneNormal]
Float 22 [_SquashAmount]
Vector 23 [_Wind]
Vector 24 [_MainTex_ST]
"vs_3_0
; 91 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c25, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c26, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c27, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c28, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
mov r1.xyz, c11
dp3 r1.x, c25.y, r1
add r1.x, v5, r1
add r0.xyz, r2, c25.x
mad r2, v2.z, c6, r2
add r3, r2, c25.x
dp4 r3.w, r3, r3
abs r0.w, v1
add r0.w, -r0, c25.y
mad r0.xyz, r0, r0.w, v0
add r1.z, v5.y, r1.x
mul r0.xyz, r0, c20
mov r1.y, r1.x
dp3 r1.x, r0, r1.z
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c26
frc r1, r1
mad r1, r1, c25.z, c25.w
frc r1, r1
mad r1, r1, c27.x, c27.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c27.x, c27.z
mul r1, r2, r1
rsq r3.w, r3.w
add r5.xy, r1.xzzw, r1.ywzw
mad r2.xyz, r3.w, r3, -v2
mad r1.xyz, r0.w, r2, v2
mul r2.xyz, r5.y, c23
mul r3.xy, v5.y, r1.xzzw
mul r4.xyz, v4.y, r2
mul r3.xz, r3.xyyw, c28.x
mul r2, v1.y, c5
mul r3.y, v4, c27.w
mad r3.xyz, r5.xyxw, r3, r4
mad r0.xyz, r3, c23.w, r0
mad r3.xyz, v4.x, c23, r0
dp3 r0.x, r3, c21
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c25.x
dp4 r0.y, r2, r2
rsq r0.y, r0.y
mul r2.xyz, r0.y, r2
add r0.x, r0, c21.w
mul r0.xyz, r0.x, c21
add r4.xyz, -r0, r3
mov r2.w, c27.y
add r2, -v1, r2
mad r2, r0.w, r2, v1
dp3 r1.w, r2, r2
dp3 r0.w, r1, r1
rsq r1.w, r1.w
mul r3.xyz, r1.w, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r1
mad r0.xyz, r0, c22.x, r4
mov r0.w, c25.y
mul r1.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r1
mov r1.w, c25.y
mov r1.xyz, c17
dp4 r5.z, r1, c14
dp4 r5.y, r1, c13
dp4 r5.x, r1, c12
mad r1.xyz, r5, c19.w, -r0
mul r4.xyz, r4, r2.w
dp3 o4.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c18, r0
mov r0, c13
dp4 r5.y, c18, r0
dp3 o4.z, r2, r1
dp3 o4.x, r3, r1
mov r1, c12
dp4 r5.x, c18, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mov o3.xyz, c25.x
mad o1.xy, v3, c24, c24.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 86 instructions, 5 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddnahlkkfaeaobpoaiilkofkafijjpahjabaaaaaagmanaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcnaalaaaaeaaaabaa
peacaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
acaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadgaaaaaihccabaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaa
aeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaa
adaaaaaabdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaa
adaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaeaaaaaa
egacbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaaeaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaadaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_23 = tmpvar_3.xyz;
  tmpvar_24 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_25;
  tmpvar_25[0].x = tmpvar_23.x;
  tmpvar_25[0].y = tmpvar_24.x;
  tmpvar_25[0].z = tmpvar_22.x;
  tmpvar_25[1].x = tmpvar_23.y;
  tmpvar_25[1].y = tmpvar_24.y;
  tmpvar_25[1].z = tmpvar_22.y;
  tmpvar_25[2].x = tmpvar_23.z;
  tmpvar_25[2].y = tmpvar_24.z;
  tmpvar_25[2].z = tmpvar_22.z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_21);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_25 * (((_World2Object * tmpvar_27).xyz * unity_Scale.w) - tmpvar_20));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_28;
  mediump vec3 lightDir_29;
  lightDir_29 = xlv_TEXCOORD1;
  mediump vec3 viewDir_30;
  viewDir_30 = tmpvar_27;
  lowp vec4 c_31;
  lowp float backContrib_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_8, lightDir_29);
  mediump float tmpvar_34;
  tmpvar_34 = clamp (dot (viewDir_30, -(lightDir_29)), 0.0, 1.0);
  backContrib_32 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = clamp (-(tmpvar_33), 0.0, 1.0);
  lowp float tmpvar_36;
  tmpvar_36 = mix (tmpvar_35, backContrib_32, _TranslucencyViewDependency);
  backContrib_32 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_36 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_6 * ((tmpvar_37 * 2.0) + max (0.0, ((tmpvar_33 * 0.6) + 0.4))));
  c_31.xyz = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((c_31.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_29 + viewDir_30)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_31.xyz = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_31.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_31.xyz = tmpvar_40;
  tmpvar_28 = c_31;
  c_1 = tmpvar_28;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_23 = tmpvar_3.xyz;
  tmpvar_24 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_25;
  tmpvar_25[0].x = tmpvar_23.x;
  tmpvar_25[0].y = tmpvar_24.x;
  tmpvar_25[0].z = tmpvar_22.x;
  tmpvar_25[1].x = tmpvar_23.y;
  tmpvar_25[1].y = tmpvar_24.y;
  tmpvar_25[1].z = tmpvar_22.y;
  tmpvar_25[2].x = tmpvar_23.z;
  tmpvar_25[2].y = tmpvar_24.z;
  tmpvar_25[2].z = tmpvar_22.z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_21);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_25 * (((_World2Object * tmpvar_27).xyz * unity_Scale.w) - tmpvar_20));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_4 = normal_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_28;
  mediump vec3 lightDir_29;
  lightDir_29 = xlv_TEXCOORD1;
  mediump vec3 viewDir_30;
  viewDir_30 = tmpvar_27;
  lowp vec4 c_31;
  lowp float backContrib_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (normal_8, lightDir_29);
  mediump float tmpvar_34;
  tmpvar_34 = clamp (dot (viewDir_30, -(lightDir_29)), 0.0, 1.0);
  backContrib_32 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = clamp (-(tmpvar_33), 0.0, 1.0);
  lowp float tmpvar_36;
  tmpvar_36 = mix (tmpvar_35, backContrib_32, _TranslucencyViewDependency);
  backContrib_32 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_36 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_6 * ((tmpvar_37 * 2.0) + max (0.0, ((tmpvar_33 * 0.6) + 0.4))));
  c_31.xyz = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((c_31.xyz + (pow (max (0.0, dot (normal_8, normalize((lightDir_29 + viewDir_30)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_31.xyz = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_31.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_31.xyz = tmpvar_40;
  tmpvar_28 = c_31;
  c_1 = tmpvar_28;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 650
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 651
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 654
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 658
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 662
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    #line 666
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 650
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 639
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 671
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 675
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 679
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 683
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_ProjectionParams]
Vector 20 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Scale]
Vector 23 [_SquashPlaneNormal]
Float 24 [_SquashAmount]
Vector 25 [_Wind]
Vector 26 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 91 ALU
PARAM c[30] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..26],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 },
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R3.w, -R1.x, c[0].y;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R0.xyz, R0, R3.w, vertex.position;
ADD R4, R2, c[0].x;
MUL R0.xyz, R0, c[22];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R4, R4;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[27];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[28].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R4, -vertex.normal;
ADD R4.xy, R1.xzzw, R1.ywzw;
MAD R3.xyz, R3.w, R2, vertex.normal;
MUL R1.xyz, R4.y, c[25];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R4.zw, vertex.color.y, R3.xyxz;
MOV R0.w, c[0].y;
MUL R1.xz, R4.zyww, c[28].z;
MUL R1.y, vertex.texcoord[1], c[28];
MAD R1.xyz, R4.xyxw, R1, R2;
MAD R0.xyz, R1, c[25].w, R0;
MAD R1.xyz, vertex.texcoord[1].x, c[25], R0;
DP3 R0.x, R1, c[23];
ADD R0.x, R0, c[23].w;
MUL R0.xyz, R0.x, c[23];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[24].x, R1;
MUL R1, vertex.attrib[14].y, c[6];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R1.w, R1, R1;
RSQ R2.z, R1.w;
MUL R1.xyz, R2.z, R1;
MOV R1.w, c[28];
ADD R1, -vertex.attrib[14], R1;
DP4 R2.w, R0, c[4];
DP4 R2.z, R0, c[3];
DP4 R2.y, R0, c[2];
DP4 R2.x, R0, c[1];
MUL R4.xyz, R2.xyww, c[29].x;
MUL R4.y, R4, c[19].x;
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
MAD R1, R3.w, R1, vertex.attrib[14];
MOV result.position, R2;
DP3 R2.x, R1, R1;
RSQ R2.x, R2.x;
MOV result.texcoord[4].zw, R2;
MUL R1.xyz, R2.x, R1;
MUL R3.xyz, R0.w, R3;
ADD result.texcoord[4].xy, R4, R4.z;
MUL R4.xyz, R3.zxyw, R1.yzxw;
MAD R4.xyz, R3.yzxw, R1.zxyw, -R4;
MOV R2.w, c[0].y;
MOV R2.xyz, c[18];
DP4 R5.z, R2, c[15];
DP4 R5.x, R2, c[13];
DP4 R5.y, R2, c[14];
MAD R0.xyz, R5, c[21].w, -R0;
MUL R4.xyz, R4, R1.w;
DP3 result.texcoord[3].y, R4, R0;
DP3 result.texcoord[3].z, R3, R0;
MOV R2, c[20];
DP3 result.texcoord[3].x, R1, R0;
DP4 R0.z, R2, c[15];
DP4 R0.x, R2, c[13];
DP4 R0.y, R2, c[14];
DP3 result.texcoord[1].y, R0, R4;
DP3 result.texcoord[1].z, R3, R0;
DP3 result.texcoord[1].x, R0, R1;
MOV result.texcoord[2].xyz, c[0].x;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[26], c[26].zwzw;
END
# 91 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_ProjectionParams]
Vector 19 [_ScreenParams]
Vector 20 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Scale]
Vector 23 [_SquashPlaneNormal]
Float 24 [_SquashAmount]
Vector 25 [_Wind]
Vector 26 [_MainTex_ST]
"vs_3_0
; 96 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
def c27, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c28, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c29, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c30, 0.10000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c27.x
abs r0.w, v1
add r4.w, -r0, c27.y
mov r1.xyz, c11
dp3 r0.w, c27.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r4.w, v0
add r3, r2, c27.x
mul r0.xyz, r0, c22
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp3 r1.x, r0, r1.x
dp4 r0.w, r3, r3
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c28
frc r1, r1
mad r1, r1, c27.z, c27.w
frc r1, r1
mad r1, r1, c29.x, c29.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c29.x, c29.z
mul r1, r2, r1
add r4.xy, r1.xzzw, r1.ywzw
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
mad r3.xyz, r4.w, r2, v2
mul r1.xyz, r4.y, c25
mul r2.xyz, v4.y, r1
mul r5.xy, v5.y, r3.xzzw
mov r0.w, c27.y
mul r1.xz, r5.xyyw, c30.x
mul r1.y, v4, c29.w
mad r1.xyz, r4.xyxw, r1, r2
mad r0.xyz, r1, c25.w, r0
mad r1.xyz, v4.x, c25, r0
dp3 r0.x, r1, c23
add r0.x, r0, c23.w
mul r0.xyz, r0.x, c23
add r1.xyz, -r0, r1
mad r0.xyz, r0, c24.x, r1
mul r1, v1.y, c5
mad r1, v1.x, c4, r1
mad r1, v1.z, c6, r1
add r1, r1, c27.x
dp4 r1.w, r1, r1
rsq r2.z, r1.w
mul r1.xyz, r2.z, r1
mov r1.w, c29.y
add r1, -v1, r1
dp4 r2.w, r0, c3
dp4 r2.z, r0, c2
dp4 r2.y, r0, c1
dp4 r2.x, r0, c0
mul r4.xyz, r2.xyww, c30.y
mul r4.y, r4, c18.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mul r3.xyz, r0.w, r3
mad r1, r4.w, r1, v1
mov o0, r2
dp3 r2.x, r1, r1
rsq r2.x, r2.x
mov o5.zw, r2
mul r1.xyz, r2.x, r1
mad o5.xy, r4.z, c19.zwzw, r4
mul r4.xyz, r3.zxyw, r1.yzxw
mad r4.xyz, r3.yzxw, r1.zxyw, -r4
mov r2.w, c27.y
mov r2.xyz, c17
dp4 r5.z, r2, c14
dp4 r5.x, r2, c12
dp4 r5.y, r2, c13
mad r0.xyz, r5, c21.w, -r0
mul r4.xyz, r4, r1.w
mov r2, c14
dp4 r5.z, c20, r2
mov r2, c12
dp4 r5.x, c20, r2
dp3 o4.y, r4, r0
dp3 o4.z, r3, r0
dp3 o4.x, r1, r0
mov r0, c13
dp4 r5.y, c20, r0
dp3 o2.y, r5, r4
dp3 o2.z, r3, r5
dp3 o2.x, r5, r1
mov o3.xyz, c27.x
mad o1.xy, v3, c26, c26.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 92 instructions, 6 temp regs, 0 temp arrays:
// ALU 83 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlhiinahncmljdndegcliipmmefnpbjplabaaaaaadiaoaaaaadaaaaaa
cmaaaaaapeaaaaaakmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcieamaaaaeaaaabaacbadaaaafjaaaaae
egiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafjaaaaae
egiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaa
giaaaaacagaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaa
dgaaaaagccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaa
aaaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaia
mbaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaabaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaa
acaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalp
aaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaap
pcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaa
adaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaaba
pcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaah
pcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaa
aaaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaa
aaaaaaaabkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaa
egaobaaaaeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
hcaabaaaaeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaa
egbcbaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaa
dgaaaaafecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaa
igaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaaaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaa
egiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaa
agiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaa
egiocaaaadaaaaaaadaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaa
ogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaaeaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaagaabaaaacaaaaaaegacbaaaaeaaaaaabaaaaaaiicaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaa
acaaaaaaegaobaaaadaaaaaaegaobaaaadaaaaaaeeaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaadgaaaaaficaabaaaadaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaa
adaaaaaapgapbaaaaaaaaaaaegaobaaaadaaaaaaegbobaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaadaaaaaadiaaaaahhcaabaaaaeaaaaaacgajbaaaacaaaaaajgaebaaa
adaaaaaadcaaaaakhcaabaaaaeaaaaaajgaebaaaacaaaaaacgajbaaaadaaaaaa
egacbaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaapgapbaaaadaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaacaaaaaaaaaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaa
acaaaaaaaaaaaaaaegacbaaaafaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaafaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaadgaaaaaihccabaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaafaaaaaaegacbaaaafaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaa
egacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaeaaaaaaegacbaaaadaaaaaa
egacbaaaaaaaaaaabaaaaaaheccabaaaaeaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaa
diaaaaaibcaabaaaaaaaaaaabkaabaaaabaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaadpdiaaaaak
fcaabaaaaaaaaaaaagadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaaaadgaaaaafmccabaaaafaaaaaakgaobaaaabaaaaaaaaaaaaahdccabaaa
afaaaaaakgakbaaaaaaaaaaamgaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_23 = tmpvar_3.xyz;
  tmpvar_24 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_25;
  tmpvar_25[0].x = tmpvar_23.x;
  tmpvar_25[0].y = tmpvar_24.x;
  tmpvar_25[0].z = tmpvar_22.x;
  tmpvar_25[1].x = tmpvar_23.y;
  tmpvar_25[1].y = tmpvar_24.y;
  tmpvar_25[1].z = tmpvar_22.y;
  tmpvar_25[2].x = tmpvar_23.z;
  tmpvar_25[2].y = tmpvar_24.z;
  tmpvar_25[2].z = tmpvar_22.z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_21);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_25 * (((_World2Object * tmpvar_27).xyz * unity_Scale.w) - tmpvar_20));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_21));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float tmpvar_27;
  mediump float lightShadowDataX_28;
  highp float dist_29;
  lowp float tmpvar_30;
  tmpvar_30 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = max (float((dist_29 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_28);
  tmpvar_27 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_34;
  mediump vec3 lightDir_35;
  lightDir_35 = xlv_TEXCOORD1;
  mediump vec3 viewDir_36;
  viewDir_36 = tmpvar_33;
  mediump float atten_37;
  atten_37 = tmpvar_27;
  lowp vec4 c_38;
  lowp float backContrib_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (tmpvar_8, lightDir_35);
  mediump float tmpvar_41;
  tmpvar_41 = clamp (dot (viewDir_36, -(lightDir_35)), 0.0, 1.0);
  backContrib_39 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = clamp (-(tmpvar_40), 0.0, 1.0);
  lowp float tmpvar_43;
  tmpvar_43 = mix (tmpvar_42, backContrib_39, _TranslucencyViewDependency);
  backContrib_39 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((tmpvar_43 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_45;
  tmpvar_45 = (tmpvar_6 * ((tmpvar_44 * 2.0) + max (0.0, ((tmpvar_40 * 0.6) + 0.4))));
  c_38.xyz = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((c_38.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_35 + viewDir_36)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_38.xyz = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = (c_38.xyz * mix (2.0, (atten_37 * 2.0), _ShadowStrength));
  c_38.xyz = tmpvar_47;
  tmpvar_34 = c_38;
  c_1 = tmpvar_34;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec4 tmpvar_23;
  tmpvar_23 = (glstate_matrix_mvp * tmpvar_21);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_3.xyz;
  tmpvar_25 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_22.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_22.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_22.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_23 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_23.zw;
  gl_Position = tmpvar_23;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_20));
  xlv_TEXCOORD4 = o_29;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_4 = normal_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_29;
  mediump vec3 lightDir_30;
  lightDir_30 = xlv_TEXCOORD1;
  mediump vec3 viewDir_31;
  viewDir_31 = tmpvar_28;
  mediump float atten_32;
  atten_32 = tmpvar_27;
  lowp vec4 c_33;
  lowp float backContrib_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (normal_8, lightDir_30);
  mediump float tmpvar_36;
  tmpvar_36 = clamp (dot (viewDir_31, -(lightDir_30)), 0.0, 1.0);
  backContrib_34 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = clamp (-(tmpvar_35), 0.0, 1.0);
  lowp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_37, backContrib_34, _TranslucencyViewDependency);
  backContrib_34 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_38 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_6 * ((tmpvar_39 * 2.0) + max (0.0, ((tmpvar_35 * 0.6) + 0.4))));
  c_33.xyz = tmpvar_40;
  mediump vec3 tmpvar_41;
  tmpvar_41 = ((c_33.xyz + (pow (max (0.0, dot (normal_8, normalize((lightDir_30 + viewDir_31)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_33.xyz = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42 = (c_33.xyz * mix (2.0, (atten_32 * 2.0), _ShadowStrength));
  c_33.xyz = tmpvar_42;
  tmpvar_29 = c_33;
  c_1 = tmpvar_29;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 660
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 663
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 667
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 671
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 676
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 635
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 639
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 643
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 647
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 679
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 681
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 685
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 689
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 693
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Vector 20 [unity_4LightPosX0]
Vector 21 [unity_4LightPosY0]
Vector 22 [unity_4LightPosZ0]
Vector 23 [unity_4LightAtten0]
Vector 24 [unity_LightColor0]
Vector 25 [unity_LightColor1]
Vector 26 [unity_LightColor2]
Vector 27 [unity_LightColor3]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 28 [unity_Scale]
Vector 29 [_Scale]
Vector 30 [_SquashPlaneNormal]
Float 31 [_SquashAmount]
Vector 32 [_Wind]
Vector 33 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 118 ALU
PARAM c[36] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..33],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R0.w, vertex.attrib[14];
ADD R5.w, -R0, c[0].y;
MOV R1.x, c[0].y;
DP3 R0.w, R1.x, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R2, vertex.normal.z, c[7], R2;
MAD R0.xyz, R0, R5.w, vertex.position;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[29];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[34];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[35].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R3.xy, R1.xzzw, R1.ywzw;
MAD R5.xyz, R5.w, R2, vertex.normal;
MUL R1.xyz, R3.y, c[32];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R3.zw, vertex.color.y, R5.xyxz;
DP3 R4.x, R5, R5;
RSQ R6.x, R4.x;
MUL R5.xyz, R6.x, R5;
MUL R6.xyz, R5, c[28].w;
MOV R1.w, c[0].y;
MUL R1.xz, R3.zyww, c[35].z;
MUL R1.y, vertex.texcoord[1], c[35];
MAD R1.xyz, R3.xyxw, R1, R2;
MAD R0.xyz, R1, c[32].w, R0;
MAD R1.xyz, vertex.texcoord[1].x, c[32], R0;
DP3 R0.x, R1, c[30];
ADD R0.x, R0, c[30].w;
MUL R0.xyz, R0.x, c[30];
ADD R1.xyz, -R0, R1;
MAD R1.xyz, R0, c[31].x, R1;
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
ADD R2, -R0.x, c[20];
ADD R3, -R0.y, c[21];
MUL R0, R3, R3;
MAD R4, R2, R2, R0;
DP4 R0.x, R1, c[11];
ADD R0, -R0.x, c[22];
DP3 R6.w, R6, c[10];
MUL R3, R3, R6.w;
DP3 R6.w, R6, c[9];
MAD R2, R2, R6.w, R3;
DP3 R3.x, R6, c[11];
MAD R4, R0, R0, R4;
MAD R2, R0, R3.x, R2;
MUL R3, R4, c[23];
ADD R3, R3, c[0].y;
RSQ R0.x, R4.x;
RSQ R0.y, R4.y;
RSQ R0.z, R4.z;
RSQ R0.w, R4.w;
MUL R0, R2, R0;
MAX R2, R0, c[0].x;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R0, vertex.attrib[14].z, c[7], R0;
ADD R0, R0, c[0].x;
DP4 R0.w, R0, R0;
RSQ R4.x, R0.w;
RCP R3.x, R3.x;
RCP R3.y, R3.y;
RCP R3.z, R3.z;
RCP R3.w, R3.w;
MUL R2, R2, R3;
MUL R3.xyz, R2.y, c[25];
MAD R3.xyz, R2.x, c[24], R3;
MAD R3.xyz, R2.z, c[26], R3;
MAD result.texcoord[2].xyz, R2.w, c[27], R3;
MOV R2.w, c[0].y;
MUL R0.xyz, R4.x, R0;
MOV R0.w, c[35];
ADD R0, -vertex.attrib[14], R0;
MAD R0, R5.w, R0, vertex.attrib[14];
DP3 R3.w, R0, R0;
RSQ R2.y, R3.w;
MUL R0.xyz, R2.y, R0;
MUL R2.xyz, R5.zxyw, R0.yzxw;
MAD R3.xyz, R5.yzxw, R0.zxyw, -R2;
MOV R2.xyz, c[18];
MUL R3.xyz, R3, R0.w;
DP4 R4.z, R2, c[15];
DP4 R4.x, R2, c[13];
DP4 R4.y, R2, c[14];
MAD R2.xyz, R4, c[28].w, -R1;
DP3 result.texcoord[3].y, R3, R2;
DP3 result.texcoord[3].z, R5, R2;
DP3 result.texcoord[3].x, R0, R2;
DP4 result.position.w, R1, c[4];
DP4 result.position.z, R1, c[3];
DP4 result.position.y, R1, c[2];
DP4 result.position.x, R1, c[1];
MOV R1, c[19];
DP4 R2.z, R1, c[15];
DP4 R2.x, R1, c[13];
DP4 R2.y, R1, c[14];
DP3 result.texcoord[1].y, R2, R3;
DP3 result.texcoord[1].z, R5, R2;
DP3 result.texcoord[1].x, R2, R0;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[33], c[33].zwzw;
END
# 118 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Vector 19 [unity_4LightPosX0]
Vector 20 [unity_4LightPosY0]
Vector 21 [unity_4LightPosZ0]
Vector 22 [unity_4LightAtten0]
Vector 23 [unity_LightColor0]
Vector 24 [unity_LightColor1]
Vector 25 [unity_LightColor2]
Vector 26 [unity_LightColor3]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 27 [unity_Scale]
Vector 28 [_Scale]
Vector 29 [_SquashPlaneNormal]
Float 30 [_SquashAmount]
Vector 31 [_Wind]
Vector 32 [_MainTex_ST]
"vs_3_0
; 123 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c33, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c34, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c35, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c36, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c33.x
abs r0.w, v1
add r5.w, -r0, c33.y
mov r1.xyz, c11
dp3 r0.w, c33.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r5.w, v0
add r3, r2, c33.x
mul r0.xyz, r0, c28
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp4 r0.w, r3, r3
dp3 r1.x, r0, r1.x
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c34
frc r1, r1
mad r1, r1, c33.z, c33.w
frc r1, r1
mad r1, r1, c35.x, c35.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c35.x, c35.z
mul r1, r2, r1
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
add r3.xy, r1.xzzw, r1.ywzw
mad r5.xyz, r5.w, r2, v2
mul r1.xyz, r3.y, c31
mul r2.xyz, v4.y, r1
mul r3.zw, v5.y, r5.xyxz
dp3 r4.x, r5, r5
rsq r6.x, r4.x
mul r5.xyz, r6.x, r5
mul r6.xyz, r5, c27.w
mov r1.w, c33.y
mul r1.xz, r3.zyww, c36.x
mul r1.y, v4, c35.w
mad r1.xyz, r3.xyxw, r1, r2
mad r0.xyz, r1, c31.w, r0
mad r1.xyz, v4.x, c31, r0
dp3 r0.x, r1, c29
add r0.x, r0, c29.w
mul r0.xyz, r0.x, c29
add r1.xyz, -r0, r1
mad r1.xyz, r0, c30.x, r1
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
add r2, -r0.x, c19
add r3, -r0.y, c20
mul r0, r3, r3
mad r4, r2, r2, r0
dp4 r0.x, r1, c10
add r0, -r0.x, c21
dp3 r6.w, r6, c9
mul r3, r3, r6.w
dp3 r6.w, r6, c8
mad r2, r2, r6.w, r3
dp3 r3.x, r6, c10
mad r4, r0, r0, r4
mad r2, r0, r3.x, r2
mul r3, r4, c22
add r3, r3, c33.y
rsq r0.x, r4.x
rsq r0.y, r4.y
rsq r0.z, r4.z
rsq r0.w, r4.w
mul r0, r2, r0
max r2, r0, c33.x
mul r0, v1.y, c5
mad r0, v1.x, c4, r0
mad r0, v1.z, c6, r0
add r0, r0, c33.x
dp4 r0.w, r0, r0
rsq r4.x, r0.w
rcp r3.x, r3.x
rcp r3.y, r3.y
rcp r3.z, r3.z
rcp r3.w, r3.w
mul r2, r2, r3
mul r3.xyz, r2.y, c24
mad r3.xyz, r2.x, c23, r3
mad r3.xyz, r2.z, c25, r3
mad o3.xyz, r2.w, c26, r3
mov r2.w, c33.y
mul r0.xyz, r4.x, r0
mov r0.w, c35.y
add r0, -v1, r0
mad r0, r5.w, r0, v1
dp3 r3.w, r0, r0
rsq r2.y, r3.w
mul r0.xyz, r2.y, r0
mul r2.xyz, r5.zxyw, r0.yzxw
mad r3.xyz, r5.yzxw, r0.zxyw, -r2
mov r2.xyz, c17
dp4 r4.z, r2, c14
dp4 r4.x, r2, c12
dp4 r4.y, r2, c13
mad r4.xyz, r4, c27.w, -r1
mul r2.xyz, r3, r0.w
dp3 o4.y, r2, r4
dp3 o4.z, r5, r4
dp3 o4.x, r0, r4
mov r3, c12
dp4 r4.x, c18, r3
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
mov r1, c14
dp4 r4.z, c18, r1
mov r1, c13
dp4 r4.y, c18, r1
dp3 o2.y, r4, r2
dp3 o2.z, r5, r4
dp3 o2.x, r4, r0
mad o1.xy, v3, c32, c32.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 224 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 160 [unity_LightColor4] 4
Vector 176 [unity_LightColor5] 4
Vector 192 [unity_LightColor6] 4
Vector 208 [unity_LightColor7] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 112 instructions, 9 temp regs, 0 temp arrays:
// ALU 106 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedeligjebdkmjdpadbnmfbmkohjfhdlpphabaaaaaaaibbaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmapaaaaeaaaabaa
nladaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaakaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
ajaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaabaaaaaaiicaabaaaabaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaabaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaabaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaabaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaaabaaaaaa
egaobaaaabaaaaaaegaobaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaaabaaaaaa
egaobaaaabaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegaobaaaabaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaahhcaabaaaadaaaaaajgaebaaa
abaaaaaacgajbaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaacaaaaaa
cgajbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaabaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
acaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaeaaaaaafgafbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaa
amaaaaaaagaabaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaa
egiccaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaaj
pcaabaaaafaaaaaakgakbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaaeaaaaaa
aaaaaaajpcaabaaaagaaaaaaagaabaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaa
acaaaaaaaaaaaaajpcaabaaaaeaaaaaafgafbaiaebaaaaaaaeaaaaaaegiocaaa
acaaaaaaadaaaaaadiaaaaaihcaabaaaahaaaaaaegacbaaaacaaaaaapgipcaaa
adaaaaaabeaaaaaadiaaaaaihcaabaaaaiaaaaaafgafbaaaahaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaaklcaabaaaahaaaaaaegiicaaaadaaaaaaamaaaaaa
agaabaaaahaaaaaaegaibaaaaiaaaaaadcaaaaakhcaabaaaahaaaaaaegiccaaa
adaaaaaaaoaaaaaakgakbaaaahaaaaaaegadbaaaahaaaaaadiaaaaahpcaabaaa
aiaaaaaaegaobaaaaeaaaaaafgafbaaaahaaaaaadiaaaaahpcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaa
agaaaaaaegaobaaaagaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaagaaaaaa
egaobaaaagaaaaaaagaabaaaahaaaaaaegaobaaaaiaaaaaadcaaaaajpcaabaaa
agaaaaaaegaobaaaafaaaaaakgakbaaaahaaaaaaegaobaaaagaaaaaadcaaaaaj
pcaabaaaaeaaaaaaegaobaaaafaaaaaaegaobaaaafaaaaaaegaobaaaaeaaaaaa
eeaaaaafpcaabaaaafaaaaaaegaobaaaaeaaaaaadcaaaaanpcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegiocaaaacaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpaoaaaaakpcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpegaobaaaaeaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaa
afaaaaaaegaobaaaagaaaaaadeaaaaakpcaabaaaafaaaaaaegaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaahpcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegaobaaaafaaaaaadiaaaaaihcaabaaaafaaaaaafgafbaaa
aeaaaaaaegiccaaaacaaaaaaahaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaa
acaaaaaaagaaaaaaagaabaaaaeaaaaaaegacbaaaafaaaaaadcaaaaakhcaabaaa
aeaaaaaaegiccaaaacaaaaaaaiaaaaaakgakbaaaaeaaaaaaegacbaaaafaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaaajaaaaaapgapbaaaaeaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaa
beaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaeaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaaeaaaaaaegacbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaadaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_26 = tmpvar_4.xyz;
  tmpvar_27 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_28;
  tmpvar_28[0].x = tmpvar_26.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = tmpvar_23.x;
  tmpvar_28[1].x = tmpvar_26.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = tmpvar_23.y;
  tmpvar_28[2].x = tmpvar_26.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = tmpvar_23.z;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_25.x) + (tmpvar_33 * tmpvar_25.y)) + (tmpvar_34 * tmpvar_25.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w));
  tmpvar_2 = tmpvar_37;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_28 * (((_World2Object * tmpvar_30).xyz * unity_Scale.w) - tmpvar_21));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_28;
  mediump vec3 lightDir_29;
  lightDir_29 = xlv_TEXCOORD1;
  mediump vec3 viewDir_30;
  viewDir_30 = tmpvar_27;
  lowp vec4 c_31;
  lowp float backContrib_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_8, lightDir_29);
  mediump float tmpvar_34;
  tmpvar_34 = clamp (dot (viewDir_30, -(lightDir_29)), 0.0, 1.0);
  backContrib_32 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = clamp (-(tmpvar_33), 0.0, 1.0);
  lowp float tmpvar_36;
  tmpvar_36 = mix (tmpvar_35, backContrib_32, _TranslucencyViewDependency);
  backContrib_32 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_36 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_6 * ((tmpvar_37 * 2.0) + max (0.0, ((tmpvar_33 * 0.6) + 0.4))));
  c_31.xyz = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((c_31.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_29 + viewDir_30)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_31.xyz = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_31.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_31.xyz = tmpvar_40;
  tmpvar_28 = c_31;
  c_1 = tmpvar_28;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_26 = tmpvar_4.xyz;
  tmpvar_27 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_28;
  tmpvar_28[0].x = tmpvar_26.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = tmpvar_23.x;
  tmpvar_28[1].x = tmpvar_26.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = tmpvar_23.y;
  tmpvar_28[2].x = tmpvar_26.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = tmpvar_23.z;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_25.x) + (tmpvar_33 * tmpvar_25.y)) + (tmpvar_34 * tmpvar_25.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w));
  tmpvar_2 = tmpvar_37;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_28 * (((_World2Object * tmpvar_30).xyz * unity_Scale.w) - tmpvar_21));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_4 = normal_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_28;
  mediump vec3 lightDir_29;
  lightDir_29 = xlv_TEXCOORD1;
  mediump vec3 viewDir_30;
  viewDir_30 = tmpvar_27;
  lowp vec4 c_31;
  lowp float backContrib_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (normal_8, lightDir_29);
  mediump float tmpvar_34;
  tmpvar_34 = clamp (dot (viewDir_30, -(lightDir_29)), 0.0, 1.0);
  backContrib_32 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = clamp (-(tmpvar_33), 0.0, 1.0);
  lowp float tmpvar_36;
  tmpvar_36 = mix (tmpvar_35, backContrib_32, _TranslucencyViewDependency);
  backContrib_32 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_36 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_6 * ((tmpvar_37 * 2.0) + max (0.0, ((tmpvar_33 * 0.6) + 0.4))));
  c_31.xyz = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((c_31.xyz + (pow (max (0.0, dot (normal_8, normalize((lightDir_29 + viewDir_30)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_31.xyz = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_31.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_31.xyz = tmpvar_40;
  tmpvar_28 = c_31;
  c_1 = tmpvar_28;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 650
uniform highp vec4 _MainTex_ST;
#line 670
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 651
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 654
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 658
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 662
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 666
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 650
uniform highp vec4 _MainTex_ST;
#line 670
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 639
    o.Emission *= IN.color.w;
}
#line 671
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 674
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 678
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 682
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 686
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_ProjectionParams]
Vector 20 [_WorldSpaceLightPos0]
Vector 21 [unity_4LightPosX0]
Vector 22 [unity_4LightPosY0]
Vector 23 [unity_4LightPosZ0]
Vector 24 [unity_4LightAtten0]
Vector 25 [unity_LightColor0]
Vector 26 [unity_LightColor1]
Vector 27 [unity_LightColor2]
Vector 28 [unity_LightColor3]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Scale]
Vector 31 [_SquashPlaneNormal]
Float 32 [_SquashAmount]
Vector 33 [_Wind]
Vector 34 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 123 ALU
PARAM c[38] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..34],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 },
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R0.w, vertex.attrib[14];
ADD R6.w, -R0, c[0].y;
MOV R1.x, c[0].y;
DP3 R0.w, R1.x, c[12];
MAD R0.xyz, R0, R6.w, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R1.w, R3, R3;
MUL R1.xyz, R0, c[30];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R1, R0.x;
ADD R0.xy, R0, c[17].y;
MUL R0, R0.xxyy, c[35];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R2, -R0, c[0].z;
ADD R2, R2, c[36].x;
MUL R0, R0, R0;
MUL R0, R0, R2;
RSQ R1.w, R1.w;
MAD R2.xyz, R1.w, R3, -vertex.normal;
ADD R4.xy, R0.xzzw, R0.ywzw;
MAD R0.xyz, R6.w, R2, vertex.normal;
MUL R2.xyz, R4.y, c[33];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R4.zw, vertex.color.y, R0.xyxz;
MOV R1.w, c[0].y;
MUL R2.xz, R4.zyww, c[36].z;
MUL R2.y, vertex.texcoord[1], c[36];
MAD R2.xyz, R4.xyxw, R2, R3;
MAD R1.xyz, R2, c[33].w, R1;
MAD R2.xyz, vertex.texcoord[1].x, c[33], R1;
DP3 R0.w, R2, c[31];
ADD R0.w, R0, c[31];
MUL R1.xyz, R0.w, c[31];
ADD R2.xyz, -R1, R2;
MAD R1.xyz, R1, c[32].x, R2;
DP4 R2.x, R1, c[10];
ADD R3, -R2.x, c[22];
DP4 R0.w, R1, c[9];
ADD R2, -R0.w, c[21];
MUL R4, R3, R3;
DP3 R0.w, R0, R0;
RSQ R0.w, R0.w;
MUL R6.xyz, R0.w, R0;
DP4 R5.x, R1, c[11];
MUL R7.xyz, R6, c[29].w;
DP3 R7.w, R7, c[10];
MUL R3, R3, R7.w;
ADD R0, -R5.x, c[23];
MAD R4, R2, R2, R4;
MAD R4, R0, R0, R4;
DP3 R7.w, R7, c[9];
MAD R2, R2, R7.w, R3;
DP3 R3.x, R7, c[11];
MAD R0, R0, R3.x, R2;
MUL R5, R4, c[24];
RSQ R2.x, R4.x;
RSQ R2.y, R4.y;
RSQ R2.z, R4.z;
RSQ R2.w, R4.w;
MUL R0, R0, R2;
ADD R2, R5, c[0].y;
MAX R0, R0, c[0].x;
RCP R2.x, R2.x;
RCP R2.y, R2.y;
RCP R2.w, R2.w;
RCP R2.z, R2.z;
MUL R2, R0, R2;
MUL R0.xyz, R2.y, c[26];
MAD R0.xyz, R2.x, c[25], R0;
MAD R2.xyz, R2.z, c[27], R0;
MAD result.texcoord[2].xyz, R2.w, c[28], R2;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R0, vertex.attrib[14].z, c[7], R0;
ADD R0, R0, c[0].x;
DP4 R0.w, R0, R0;
RSQ R2.z, R0.w;
DP4 R2.w, R1, c[4];
DP4 R2.y, R1, c[2];
DP4 R2.x, R1, c[1];
MUL R3.xyz, R2.xyww, c[37].x;
MUL R3.y, R3, c[19].x;
MUL R0.xyz, R2.z, R0;
MOV R0.w, c[36];
ADD R0, -vertex.attrib[14], R0;
MAD R0, R6.w, R0, vertex.attrib[14];
DP3 R2.z, R0, R0;
ADD result.texcoord[4].xy, R3, R3.z;
RSQ R3.x, R2.z;
DP4 R2.z, R1, c[3];
MUL R0.xyz, R3.x, R0;
MUL R3.xyz, R6.zxyw, R0.yzxw;
MAD R3.xyz, R6.yzxw, R0.zxyw, -R3;
MOV result.position, R2;
MOV result.texcoord[4].zw, R2;
MOV R2.w, c[0].y;
MOV R2.xyz, c[18];
DP4 R4.z, R2, c[15];
DP4 R4.x, R2, c[13];
DP4 R4.y, R2, c[14];
MAD R1.xyz, R4, c[29].w, -R1;
MUL R3.xyz, R3, R0.w;
DP3 result.texcoord[3].y, R3, R1;
DP3 result.texcoord[3].z, R6, R1;
MOV R2, c[20];
DP3 result.texcoord[3].x, R0, R1;
DP4 R1.z, R2, c[15];
DP4 R1.x, R2, c[13];
DP4 R1.y, R2, c[14];
DP3 result.texcoord[1].y, R1, R3;
DP3 result.texcoord[1].z, R6, R1;
DP3 result.texcoord[1].x, R1, R0;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[34], c[34].zwzw;
END
# 123 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_ProjectionParams]
Vector 19 [_ScreenParams]
Vector 20 [_WorldSpaceLightPos0]
Vector 21 [unity_4LightPosX0]
Vector 22 [unity_4LightPosY0]
Vector 23 [unity_4LightPosZ0]
Vector 24 [unity_4LightAtten0]
Vector 25 [unity_LightColor0]
Vector 26 [unity_LightColor1]
Vector 27 [unity_LightColor2]
Vector 28 [unity_LightColor3]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Scale]
Vector 31 [_SquashPlaneNormal]
Float 32 [_SquashAmount]
Vector 33 [_Wind]
Vector 34 [_MainTex_ST]
"vs_3_0
; 128 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
def c35, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c36, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c37, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c38, 0.10000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c35.x
abs r0.w, v1
add r6.w, -r0, c35.y
mov r1.xyz, c11
dp3 r0.w, c35.y, r1
mad r0.xyz, r0, r6.w, v0
mad r2, v2.z, c6, r2
add r3, r2, c35.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c30
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c16.y
mul r0, r0.xxyy, c36
frc r0, r0
mad r0, r0, c35.z, c35.w
frc r0, r0
mad r0, r0, c37.x, c37.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c37.x, c37.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.xy, r0.xzzw, r0.ywzw
mad r0.xyz, r6.w, r2, v2
mul r2.xyz, r4.y, c33
mul r3.xyz, v4.y, r2
mul r4.zw, v5.y, r0.xyxz
mov r1.w, c35.y
mul r2.xz, r4.zyww, c38.x
mul r2.y, v4, c37.w
mad r2.xyz, r4.xyxw, r2, r3
mad r1.xyz, r2, c33.w, r1
mad r2.xyz, v4.x, c33, r1
dp3 r0.w, r2, c31
add r0.w, r0, c31
mul r1.xyz, r0.w, c31
add r2.xyz, -r1, r2
mad r1.xyz, r1, c32.x, r2
dp4 r2.x, r1, c9
add r3, -r2.x, c22
dp4 r0.w, r1, c8
add r2, -r0.w, c21
mul r4, r3, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r6.xyz, r0.w, r0
dp4 r5.x, r1, c10
mul r7.xyz, r6, c29.w
dp3 r7.w, r7, c9
mul r3, r3, r7.w
add r0, -r5.x, c23
mad r4, r2, r2, r4
mad r4, r0, r0, r4
dp3 r7.w, r7, c8
mad r2, r2, r7.w, r3
dp3 r3.x, r7, c10
mad r0, r0, r3.x, r2
mul r5, r4, c24
rsq r2.x, r4.x
rsq r2.y, r4.y
rsq r2.z, r4.z
rsq r2.w, r4.w
mul r0, r0, r2
add r2, r5, c35.y
max r0, r0, c35.x
rcp r2.x, r2.x
rcp r2.y, r2.y
rcp r2.w, r2.w
rcp r2.z, r2.z
mul r2, r0, r2
mul r0.xyz, r2.y, c26
mad r0.xyz, r2.x, c25, r0
mad r2.xyz, r2.z, c27, r0
mad o3.xyz, r2.w, c28, r2
mul r0, v1.y, c5
mad r0, v1.x, c4, r0
mad r0, v1.z, c6, r0
add r0, r0, c35.x
dp4 r0.w, r0, r0
rsq r2.z, r0.w
dp4 r2.w, r1, c3
dp4 r2.y, r1, c1
dp4 r2.x, r1, c0
mul r3.xyz, r2.xyww, c38.y
mul r3.y, r3, c18.x
mad o5.xy, r3.z, c19.zwzw, r3
mul r0.xyz, r2.z, r0
mov r0.w, c37.y
add r0, -v1, r0
mad r0, r6.w, r0, v1
dp3 r2.z, r0, r0
rsq r3.x, r2.z
dp4 r2.z, r1, c2
mul r0.xyz, r3.x, r0
mul r3.xyz, r6.zxyw, r0.yzxw
mad r3.xyz, r6.yzxw, r0.zxyw, -r3
mov o0, r2
mov o5.zw, r2
mov r2.w, c35.y
mov r2.xyz, c17
dp4 r4.z, r2, c14
dp4 r4.x, r2, c12
dp4 r4.y, r2, c13
mad r1.xyz, r4, c29.w, -r1
mul r3.xyz, r3, r0.w
mov r2, c14
dp4 r4.z, c20, r2
mov r2, c12
dp4 r4.x, c20, r2
dp3 o4.y, r3, r1
dp3 o4.z, r6, r1
dp3 o4.x, r0, r1
mov r1, c13
dp4 r4.y, c20, r1
dp3 o2.y, r4, r3
dp3 o2.z, r6, r4
dp3 o2.x, r4, r0
mad o1.xy, v3, c34, c34.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 224 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 160 [unity_LightColor4] 4
Vector 176 [unity_LightColor5] 4
Vector 192 [unity_LightColor6] 4
Vector 208 [unity_LightColor7] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 118 instructions, 10 temp regs, 0 temp arrays:
// ALU 110 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojbbggfbjajfgfhhmaibgcmafkgebdmbabaaaaaanebbaaaaadaaaaaa
cmaaaaaapeaaaaaakmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefccabaaaaaeaaaabaaaiaeaaaafjaaaaae
egiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaaakaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafjaaaaae
egiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaa
giaaaaacakaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaa
dgaaaaagccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaa
aaaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaia
mbaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaabaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaa
acaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalp
aaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaap
pcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaa
adaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaaba
pcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaah
pcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaa
aaaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaa
aaaaaaaabkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaa
egaobaaaaeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
hcaabaaaaeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaa
egbcbaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaa
dgaaaaafecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaa
igaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaaaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaa
egiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaa
agiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaa
egiocaaaadaaaaaaadaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaa
ogikcaaaaaaaaaaaamaaaaaabaaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaaacaaaaaaegaobaaaacaaaaaa
egaobaaaacaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaa
acaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaa
egbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaa
egaobaaaacaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaajgaebaaaacaaaaaacgajbaaa
adaaaaaadcaaaaakhcaabaaaaeaaaaaajgaebaaaadaaaaaacgajbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaapgapbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaacaaaaaaaaaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaa
acaaaaaaaaaaaaaaegacbaaaafaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaafaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaadiaaaaaihcaabaaaafaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaadaaaaaaamaaaaaaagaabaaa
aaaaaaaaegacbaaaafaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaadaaaaaa
aoaaaaaakgakbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaafaaaaaa
egacbaaaafaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajpcaabaaaagaaaaaa
kgakbaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaaeaaaaaaaaaaaaajpcaabaaa
ahaaaaaaagaabaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaaj
pcaabaaaafaaaaaafgafbaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaadaaaaaa
diaaaaaihcaabaaaaiaaaaaaegacbaaaadaaaaaapgipcaaaadaaaaaabeaaaaaa
diaaaaaihcaabaaaajaaaaaafgafbaaaaiaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaaiaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaiaaaaaa
egaibaaaajaaaaaadcaaaaakhcaabaaaaiaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaiaaaaaaegadbaaaaiaaaaaadiaaaaahpcaabaaaajaaaaaaegaobaaa
afaaaaaafgafbaaaaiaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaafaaaaaaegaobaaaahaaaaaaegaobaaa
ahaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaaahaaaaaaegaobaaaahaaaaaa
agaabaaaaiaaaaaaegaobaaaajaaaaaadcaaaaajpcaabaaaahaaaaaaegaobaaa
agaaaaaakgakbaaaaiaaaaaaegaobaaaahaaaaaadcaaaaajpcaabaaaafaaaaaa
egaobaaaagaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaeeaaaaafpcaabaaa
agaaaaaaegaobaaaafaaaaaadcaaaaanpcaabaaaafaaaaaaegaobaaaafaaaaaa
egiocaaaacaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aoaaaaakpcaabaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
egaobaaaafaaaaaadiaaaaahpcaabaaaagaaaaaaegaobaaaagaaaaaaegaobaaa
ahaaaaaadeaaaaakpcaabaaaagaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaagaaaaaadiaaaaaihcaabaaaagaaaaaafgafbaaaafaaaaaaegiccaaa
acaaaaaaahaaaaaadcaaaaakhcaabaaaagaaaaaaegiccaaaacaaaaaaagaaaaaa
agaabaaaafaaaaaaegacbaaaagaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaa
acaaaaaaaiaaaaaakgakbaaaafaaaaaaegacbaaaagaaaaaadcaaaaakhccabaaa
adaaaaaaegiccaaaacaaaaaaajaaaaaapgapbaaaafaaaaaaegacbaaaafaaaaaa
diaaaaajhcaabaaaafaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
abaaaaaaaeaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaaaaaaaaai
hcaabaaaafaaaaaaegacbaaaafaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaal
hcaabaaaaaaaaaaaegacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaia
ebaaaaaaaaaaaaaabaaaaaahbccabaaaaeaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaaheccabaaaaeaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaahcccabaaaaeaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaai
bcaabaaaaaaaaaaabkaabaaaabaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaah
icaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaa
aaaaaaaaagadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaa
dgaaaaafmccabaaaafaaaaaakgaobaaaabaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_26 = tmpvar_4.xyz;
  tmpvar_27 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_28;
  tmpvar_28[0].x = tmpvar_26.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = tmpvar_23.x;
  tmpvar_28[1].x = tmpvar_26.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = tmpvar_23.y;
  tmpvar_28[2].x = tmpvar_26.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = tmpvar_23.z;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_25.x) + (tmpvar_33 * tmpvar_25.y)) + (tmpvar_34 * tmpvar_25.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w));
  tmpvar_2 = tmpvar_37;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_28 * (((_World2Object * tmpvar_30).xyz * unity_Scale.w) - tmpvar_21));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float tmpvar_27;
  mediump float lightShadowDataX_28;
  highp float dist_29;
  lowp float tmpvar_30;
  tmpvar_30 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = max (float((dist_29 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_28);
  tmpvar_27 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_34;
  mediump vec3 lightDir_35;
  lightDir_35 = xlv_TEXCOORD1;
  mediump vec3 viewDir_36;
  viewDir_36 = tmpvar_33;
  mediump float atten_37;
  atten_37 = tmpvar_27;
  lowp vec4 c_38;
  lowp float backContrib_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (tmpvar_8, lightDir_35);
  mediump float tmpvar_41;
  tmpvar_41 = clamp (dot (viewDir_36, -(lightDir_35)), 0.0, 1.0);
  backContrib_39 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = clamp (-(tmpvar_40), 0.0, 1.0);
  lowp float tmpvar_43;
  tmpvar_43 = mix (tmpvar_42, backContrib_39, _TranslucencyViewDependency);
  backContrib_39 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((tmpvar_43 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_45;
  tmpvar_45 = (tmpvar_6 * ((tmpvar_44 * 2.0) + max (0.0, ((tmpvar_40 * 0.6) + 0.4))));
  c_38.xyz = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((c_38.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_35 + viewDir_36)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_38.xyz = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = (c_38.xyz * mix (2.0, (atten_37 * 2.0), _ShadowStrength));
  c_38.xyz = tmpvar_47;
  tmpvar_34 = c_38;
  c_1 = tmpvar_34;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec4 tmpvar_24;
  tmpvar_24 = (glstate_matrix_mvp * tmpvar_22);
  mat3 tmpvar_25;
  tmpvar_25[0] = _Object2World[0].xyz;
  tmpvar_25[1] = _Object2World[1].xyz;
  tmpvar_25[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_4.xyz;
  tmpvar_28 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_23.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_23.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_23.z;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosX0 - tmpvar_32.x);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosY0 - tmpvar_32.y);
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_4LightPosZ0 - tmpvar_32.z);
  highp vec4 tmpvar_36;
  tmpvar_36 = (((tmpvar_33 * tmpvar_33) + (tmpvar_34 * tmpvar_34)) + (tmpvar_35 * tmpvar_35));
  highp vec4 tmpvar_37;
  tmpvar_37 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_33 * tmpvar_26.x) + (tmpvar_34 * tmpvar_26.y)) + (tmpvar_35 * tmpvar_26.z)) * inversesqrt(tmpvar_36))) * (1.0/((1.0 + (tmpvar_36 * unity_4LightAtten0)))));
  highp vec3 tmpvar_38;
  tmpvar_38 = ((((unity_LightColor[0].xyz * tmpvar_37.x) + (unity_LightColor[1].xyz * tmpvar_37.y)) + (unity_LightColor[2].xyz * tmpvar_37.z)) + (unity_LightColor[3].xyz * tmpvar_37.w));
  tmpvar_2 = tmpvar_38;
  highp vec4 o_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_24 * 0.5);
  highp vec2 tmpvar_41;
  tmpvar_41.x = tmpvar_40.x;
  tmpvar_41.y = (tmpvar_40.y * _ProjectionParams.x);
  o_39.xy = (tmpvar_41 + tmpvar_40.w);
  o_39.zw = tmpvar_24.zw;
  gl_Position = tmpvar_24;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_29 * (((_World2Object * tmpvar_31).xyz * unity_Scale.w) - tmpvar_21));
  xlv_TEXCOORD4 = o_39;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_4 = normal_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_29;
  mediump vec3 lightDir_30;
  lightDir_30 = xlv_TEXCOORD1;
  mediump vec3 viewDir_31;
  viewDir_31 = tmpvar_28;
  mediump float atten_32;
  atten_32 = tmpvar_27;
  lowp vec4 c_33;
  lowp float backContrib_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (normal_8, lightDir_30);
  mediump float tmpvar_36;
  tmpvar_36 = clamp (dot (viewDir_31, -(lightDir_30)), 0.0, 1.0);
  backContrib_34 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = clamp (-(tmpvar_35), 0.0, 1.0);
  lowp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_37, backContrib_34, _TranslucencyViewDependency);
  backContrib_34 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_38 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_6 * ((tmpvar_39 * 2.0) + max (0.0, ((tmpvar_35 * 0.6) + 0.4))));
  c_33.xyz = tmpvar_40;
  mediump vec3 tmpvar_41;
  tmpvar_41 = ((c_33.xyz + (pow (max (0.0, dot (normal_8, normalize((lightDir_30 + viewDir_31)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_33.xyz = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42 = (c_33.xyz * mix (2.0, (atten_32 * 2.0), _ShadowStrength));
  c_33.xyz = tmpvar_42;
  tmpvar_29 = c_33;
  c_1 = tmpvar_29;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
#line 680
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 660
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 663
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 667
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 671
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 675
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
#line 680
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 635
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 639
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 643
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 647
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 681
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 684
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 688
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 692
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 696
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_23 = tmpvar_3.xyz;
  tmpvar_24 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_25;
  tmpvar_25[0].x = tmpvar_23.x;
  tmpvar_25[0].y = tmpvar_24.x;
  tmpvar_25[0].z = tmpvar_22.x;
  tmpvar_25[1].x = tmpvar_23.y;
  tmpvar_25[1].y = tmpvar_24.y;
  tmpvar_25[1].z = tmpvar_22.y;
  tmpvar_25[2].x = tmpvar_23.z;
  tmpvar_25[2].y = tmpvar_24.z;
  tmpvar_25[2].z = tmpvar_22.z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_21);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_25 * (((_World2Object * tmpvar_27).xyz * unity_Scale.w) - tmpvar_20));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_21));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float shadow_27;
  lowp float tmpvar_28;
  tmpvar_28 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_29;
  tmpvar_29 = (_LightShadowData.x + (tmpvar_28 * (1.0 - _LightShadowData.x)));
  shadow_27 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_31;
  mediump vec3 lightDir_32;
  lightDir_32 = xlv_TEXCOORD1;
  mediump vec3 viewDir_33;
  viewDir_33 = tmpvar_30;
  mediump float atten_34;
  atten_34 = shadow_27;
  lowp vec4 c_35;
  lowp float backContrib_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (tmpvar_8, lightDir_32);
  mediump float tmpvar_38;
  tmpvar_38 = clamp (dot (viewDir_33, -(lightDir_32)), 0.0, 1.0);
  backContrib_36 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (-(tmpvar_37), 0.0, 1.0);
  lowp float tmpvar_40;
  tmpvar_40 = mix (tmpvar_39, backContrib_36, _TranslucencyViewDependency);
  backContrib_36 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((tmpvar_40 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_6 * ((tmpvar_41 * 2.0) + max (0.0, ((tmpvar_37 * 0.6) + 0.4))));
  c_35.xyz = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((c_35.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_32 + viewDir_33)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_35.xyz = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = (c_35.xyz * mix (2.0, (atten_34 * 2.0), _ShadowStrength));
  c_35.xyz = tmpvar_44;
  tmpvar_31 = c_35;
  c_1 = tmpvar_31;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 660
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 663
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 667
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 671
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 676
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 635
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 639
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 643
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 647
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 679
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 681
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 685
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 689
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 693
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_26 = tmpvar_4.xyz;
  tmpvar_27 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_28;
  tmpvar_28[0].x = tmpvar_26.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = tmpvar_23.x;
  tmpvar_28[1].x = tmpvar_26.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = tmpvar_23.y;
  tmpvar_28[2].x = tmpvar_26.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = tmpvar_23.z;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_25.x) + (tmpvar_33 * tmpvar_25.y)) + (tmpvar_34 * tmpvar_25.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w));
  tmpvar_2 = tmpvar_37;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_28 * (((_World2Object * tmpvar_30).xyz * unity_Scale.w) - tmpvar_21));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float shadow_27;
  lowp float tmpvar_28;
  tmpvar_28 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_29;
  tmpvar_29 = (_LightShadowData.x + (tmpvar_28 * (1.0 - _LightShadowData.x)));
  shadow_27 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_31;
  mediump vec3 lightDir_32;
  lightDir_32 = xlv_TEXCOORD1;
  mediump vec3 viewDir_33;
  viewDir_33 = tmpvar_30;
  mediump float atten_34;
  atten_34 = shadow_27;
  lowp vec4 c_35;
  lowp float backContrib_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (tmpvar_8, lightDir_32);
  mediump float tmpvar_38;
  tmpvar_38 = clamp (dot (viewDir_33, -(lightDir_32)), 0.0, 1.0);
  backContrib_36 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (-(tmpvar_37), 0.0, 1.0);
  lowp float tmpvar_40;
  tmpvar_40 = mix (tmpvar_39, backContrib_36, _TranslucencyViewDependency);
  backContrib_36 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((tmpvar_40 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_6 * ((tmpvar_41 * 2.0) + max (0.0, ((tmpvar_37 * 0.6) + 0.4))));
  c_35.xyz = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((c_35.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_32 + viewDir_33)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_35.xyz = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = (c_35.xyz * mix (2.0, (atten_34 * 2.0), _ShadowStrength));
  c_35.xyz = tmpvar_44;
  tmpvar_31 = c_35;
  c_1 = tmpvar_31;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
#line 680
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 660
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 663
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 667
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 671
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 675
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
#line 680
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 635
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 639
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 643
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 647
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 681
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 684
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 688
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 692
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 696
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 20 [unity_Scale]
Vector 21 [_Scale]
Vector 22 [_SquashPlaneNormal]
Float 23 [_SquashAmount]
Vector 24 [_Wind]
Vector 25 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 100 ALU
PARAM c[28] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..25],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R3.w, R3, R3;
ABS R0.w, vertex.attrib[14];
ADD R0.w, -R0, c[0].y;
MAD R0.xyz, R0, R0.w, vertex.position;
MOV R1.x, c[0].y;
DP3 R1.x, R1.x, c[12];
ADD R1.x, vertex.color, R1;
ADD R1.z, vertex.color.y, R1.x;
MUL R0.xyz, R0, c[21];
MOV R1.y, R1.x;
DP3 R1.x, R0, R1.z;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[26];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[27].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R3.w, R3.w;
ADD R5.xy, R1.xzzw, R1.ywzw;
MAD R2.xyz, R3.w, R3, -vertex.normal;
MAD R1.xyz, R0.w, R2, vertex.normal;
MUL R2.xyz, R5.y, c[24];
MUL R3.xy, vertex.color.y, R1.xzzw;
MUL R4.xyz, vertex.texcoord[1].y, R2;
MUL R3.xz, R3.xyyw, c[27].z;
MUL R2, vertex.attrib[14].y, c[6];
MUL R3.y, vertex.texcoord[1], c[27];
MAD R3.xyz, R5.xyxw, R3, R4;
MAD R0.xyz, R3, c[24].w, R0;
MAD R3.xyz, vertex.texcoord[1].x, c[24], R0;
DP3 R0.x, R3, c[22];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R0.y, R2, R2;
RSQ R0.y, R0.y;
MUL R2.xyz, R0.y, R2;
ADD R0.x, R0, c[22].w;
MUL R0.xyz, R0.x, c[22];
ADD R4.xyz, -R0, R3;
MOV R2.w, c[27];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R0.w, R2, vertex.attrib[14];
DP3 R1.w, R2, R2;
DP3 R0.w, R1, R1;
RSQ R1.w, R1.w;
MUL R3.xyz, R1.w, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R1;
MAD R0.xyz, R0, c[23].x, R4;
MOV R0.w, c[0].y;
MUL R1.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R1;
MUL R4.xyz, R4, R2.w;
MOV R1.xyz, c[18];
MOV R1.w, c[0].y;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP4 R5.z, R1, c[15];
DP4 R5.y, R1, c[14];
DP4 R5.x, R1, c[13];
MAD R1.xyz, R5, c[20].w, -R0;
DP3 result.texcoord[6].y, R4, R1;
DP3 result.texcoord[6].z, R2, R1;
DP3 result.texcoord[6].x, R3, R1;
DP3 R0.y, R4, c[9];
DP3 R0.x, R3, c[9];
DP3 R0.z, R2, c[9];
MUL result.texcoord[1].xyz, R0, c[20].w;
DP3 R0.y, R4, c[10];
DP3 R0.x, R3, c[10];
DP3 R0.z, R2, c[10];
MUL result.texcoord[2].xyz, R0, c[20].w;
MOV R0, c[19];
DP3 R1.y, R4, c[11];
DP3 R1.z, R2, c[11];
DP3 R1.x, R3, c[11];
MUL result.texcoord[3].xyz, R1, c[20].w;
DP4 R1.z, R0, c[15];
DP4 R1.x, R0, c[13];
DP4 R1.y, R0, c[14];
DP3 result.texcoord[4].y, R4, R1;
DP3 result.texcoord[4].z, R2, R1;
DP3 result.texcoord[4].x, R3, R1;
MOV result.color.xyz, c[0].y;
MOV result.texcoord[5].xyz, c[0].x;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[25], c[25].zwzw;
MOV result.color.w, vertex.color;
END
# 100 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 19 [unity_Scale]
Vector 20 [_Scale]
Vector 21 [_SquashPlaneNormal]
Float 22 [_SquashAmount]
Vector 23 [_Wind]
Vector 24 [_MainTex_ST]
"vs_3_0
; 105 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
def c25, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c26, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c27, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c28, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
mov r1.xyz, c11
dp3 r1.x, c25.y, r1
add r1.x, v5, r1
add r0.xyz, r2, c25.x
mad r2, v2.z, c6, r2
add r3, r2, c25.x
dp4 r3.w, r3, r3
abs r0.w, v1
add r0.w, -r0, c25.y
mad r0.xyz, r0, r0.w, v0
add r1.z, v5.y, r1.x
mul r0.xyz, r0, c20
mov r1.y, r1.x
dp3 r1.x, r0, r1.z
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c26
frc r1, r1
mad r1, r1, c25.z, c25.w
frc r1, r1
mad r1, r1, c27.x, c27.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c27.x, c27.z
mul r1, r2, r1
rsq r3.w, r3.w
add r5.xy, r1.xzzw, r1.ywzw
mad r2.xyz, r3.w, r3, -v2
mad r1.xyz, r0.w, r2, v2
mul r2.xyz, r5.y, c23
mul r3.xy, v5.y, r1.xzzw
mul r4.xyz, v4.y, r2
mul r3.xz, r3.xyyw, c28.x
mul r2, v1.y, c5
mul r3.y, v4, c27.w
mad r3.xyz, r5.xyxw, r3, r4
mad r0.xyz, r3, c23.w, r0
mad r3.xyz, v4.x, c23, r0
dp3 r0.x, r3, c21
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c25.x
dp4 r0.y, r2, r2
rsq r0.y, r0.y
mul r2.xyz, r0.y, r2
add r0.x, r0, c21.w
mul r0.xyz, r0.x, c21
add r4.xyz, -r0, r3
mov r2.w, c27.y
add r2, -v1, r2
mad r2, r0.w, r2, v1
dp3 r1.w, r2, r2
dp3 r0.w, r1, r1
rsq r1.w, r1.w
mul r3.xyz, r1.w, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r1
mad r0.xyz, r0, c22.x, r4
mov r0.w, c25.y
mul r1.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r1
mul r4.xyz, r4, r2.w
mov r1.w, c25.y
mov r1.xyz, c17
dp4 r5.z, r1, c14
dp4 r5.y, r1, c13
dp4 r5.x, r1, c12
mad r1.xyz, r5, c19.w, -r0
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
dp3 o8.y, r4, r1
dp3 o8.z, r2, r1
dp3 o8.x, r3, r1
dp3 r0.y, r4, c8
dp3 r0.x, r3, c8
dp3 r0.z, r2, c8
mul o3.xyz, r0, c19.w
dp3 r0.y, r4, c9
dp3 r0.x, r3, c9
dp3 r0.z, r2, c9
mul o4.xyz, r0, c19.w
mov r0, c14
dp4 r5.z, c18, r0
mov r0, c13
dp4 r5.y, c18, r0
dp3 r1.y, r4, c10
dp3 r1.z, r2, c10
dp3 r1.x, r3, c10
mul o5.xyz, r1, c19.w
mov r1, c12
dp4 r5.x, c18, r1
dp3 o6.y, r4, r5
dp3 o6.z, r2, r5
dp3 o6.x, r3, r5
mov o2.xyz, c25.y
mov o7.xyz, c25.x
mad o1.xy, v3, c24, c24.zwzw
mov o2.w, v5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 109 instructions, 6 temp regs, 0 temp arrays:
// ALU 91 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednamopdkccbonmpfogaaebpdapkimljboabaaaaaagibaaaaaadaaaaaa
cmaaaaaapeaaaaaapiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheopmaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaapfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcgiaoaaaa
eaaaabaajkadaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadlcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaa
ahaaaaaagfaaaaadhccabaaaaiaaaaaagiaaaaacagaaaaaadgaaaaagbcaabaaa
aaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaaaaaaaadkiacaaa
adaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaaadaaaaaaaoaaaaaa
baaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakbabaaa
afaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaabkbabaaaafaaaaaa
apaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
aaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaeaaaaaa
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaakgakbaaaaaaaaaaa
aaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
diaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldp
aaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaap
pcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaa
acaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaa
egaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaea
aaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaa
egaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaaacaaaaaaigaabaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgbfbaaaaeaaaaaa
diaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaaaeaaaaaabaaaaaai
icaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
ccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
fgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaadiaaaaahccaabaaa
aaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaadaaaaaa
agacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaaaaaaaaaaabeaaaaa
jkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgipcaaa
aaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaa
aeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaaibcaabaaa
abaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaa
abaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
aaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaai
pccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaadcaaaaal
dccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadgaaaaaihccabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadgaaaaaficcabaaaacaaaaaadkbabaaaafaaaaaabaaaaaai
icaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
icaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaialpaaaaaaai
pcaabaaaabaaaaaaegaobaaaabaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaaegbobaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaaeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaahhcaabaaa
adaaaaaajgaebaaaabaaaaaacgajbaaaacaaaaaadcaaaaakhcaabaaaadaaaaaa
jgaebaaaacaaaaaacgajbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaadgaaaaagbcaabaaa
aeaaaaaaakiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaaakiacaaa
adaaaaaaanaaaaaadgaaaaagecaabaaaaeaaaaaaakiacaaaadaaaaaaaoaaaaaa
baaaaaahccaabaaaafaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaah
bcaabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaa
afaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaadaaaaaa
egacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaaeaaaaaa
bkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaabkiacaaaadaaaaaa
anaaaaaadgaaaaagecaabaaaaeaaaaaabkiacaaaadaaaaaaaoaaaaaabaaaaaah
bcaabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahccaabaaa
afaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaaafaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaaeaaaaaaegacbaaa
afaaaaaapgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaaeaaaaaackiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaackiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaaeaaaaaackiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahccaabaaaafaaaaaa
egacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaaafaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaaafaaaaaa
pgipcaaaadaaaaaabeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaagaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaaagaaaaaaegacbaaaadaaaaaa
egacbaaaaeaaaaaadgaaaaaihccabaaaahaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaa
beaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaiaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaaiaaaaaaegacbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahcccabaaaaiaaaaaaegacbaaaadaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_6.xyz;
  tmpvar_28 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_26.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_26.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_26.z;
  vec3 v_30;
  v_30.x = _Object2World[0].x;
  v_30.y = _Object2World[1].x;
  v_30.z = _Object2World[2].x;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_29 * v_30) * unity_Scale.w);
  tmpvar_1 = tmpvar_31;
  vec3 v_32;
  v_32.x = _Object2World[0].y;
  v_32.y = _Object2World[1].y;
  v_32.z = _Object2World[2].y;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * v_32) * unity_Scale.w);
  tmpvar_2 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].z;
  v_34.y = _Object2World[1].z;
  v_34.z = _Object2World[2].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_29 * v_34) * unity_Scale.w);
  tmpvar_3 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_24);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_29 * (((_World2Object * tmpvar_37).xyz * unity_Scale.w) - tmpvar_23));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = xlv_TEXCOORD4;
  mediump vec3 viewDir_20;
  viewDir_20 = tmpvar_17;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_11, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (viewDir_20, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_9 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_19 + viewDir_20)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1 = tmpvar_18;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_6.xyz;
  tmpvar_28 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_26.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_26.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_26.z;
  vec3 v_30;
  v_30.x = _Object2World[0].x;
  v_30.y = _Object2World[1].x;
  v_30.z = _Object2World[2].x;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_29 * v_30) * unity_Scale.w);
  tmpvar_1 = tmpvar_31;
  vec3 v_32;
  v_32.x = _Object2World[0].y;
  v_32.y = _Object2World[1].y;
  v_32.z = _Object2World[2].y;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * v_32) * unity_Scale.w);
  tmpvar_2 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].z;
  v_34.y = _Object2World[1].z;
  v_34.z = _Object2World[2].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_29 * v_34) * unity_Scale.w);
  tmpvar_3 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_24);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_29 * (((_World2Object * tmpvar_37).xyz * unity_Scale.w) - tmpvar_23));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, normal_11);
  tmpvar_12.y = dot (tmpvar_3, normal_11);
  tmpvar_12.z = dot (tmpvar_4, normal_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = xlv_TEXCOORD4;
  mediump vec3 viewDir_20;
  viewDir_20 = tmpvar_17;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (normal_11, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (viewDir_20, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_9 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (normal_11, normalize((lightDir_19 + viewDir_20)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1 = tmpvar_18;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 660
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 661
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 664
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 668
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 672
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 676
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    #line 680
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 660
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 631
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 635
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 639
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 643
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 683
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 685
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    #line 689
    surfIN.TtoW1 = IN.TtoW1.xyz;
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    #line 693
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 697
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    #line 701
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    #line 705
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_ProjectionParams]
Vector 20 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Scale]
Vector 23 [_SquashPlaneNormal]
Float 24 [_SquashAmount]
Vector 25 [_Wind]
Vector 26 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 105 ALU
PARAM c[30] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..26],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 },
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R3.w, -R1.x, c[0].y;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R0.xyz, R0, R3.w, vertex.position;
ADD R4, R2, c[0].x;
MUL R0.xyz, R0, c[22];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R4, R4;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[27];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[28].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R4, -vertex.normal;
ADD R4.xy, R1.xzzw, R1.ywzw;
MAD R3.xyz, R3.w, R2, vertex.normal;
MUL R1.xyz, R4.y, c[25];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R4.zw, vertex.color.y, R3.xyxz;
MOV R0.w, c[0].y;
MUL R1.xz, R4.zyww, c[28].z;
MUL R1.y, vertex.texcoord[1], c[28];
MAD R1.xyz, R4.xyxw, R1, R2;
MAD R0.xyz, R1, c[25].w, R0;
MAD R1.xyz, vertex.texcoord[1].x, c[25], R0;
DP3 R0.x, R1, c[23];
ADD R0.x, R0, c[23].w;
MUL R0.xyz, R0.x, c[23];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[24].x, R1;
MUL R1, vertex.attrib[14].y, c[6];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R1.w, R1, R1;
RSQ R2.z, R1.w;
MUL R1.xyz, R2.z, R1;
MOV R1.w, c[28];
ADD R1, -vertex.attrib[14], R1;
DP4 R2.w, R0, c[4];
DP4 R2.z, R0, c[3];
DP4 R2.y, R0, c[2];
DP4 R2.x, R0, c[1];
MUL R4.xyz, R2.xyww, c[29].x;
MUL R4.y, R4, c[19].x;
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
MUL R3.xyz, R0.w, R3;
MAD R1, R3.w, R1, vertex.attrib[14];
MOV result.position, R2;
DP3 R2.x, R1, R1;
RSQ R2.x, R2.x;
MOV result.texcoord[7].zw, R2;
MUL R1.xyz, R2.x, R1;
ADD result.texcoord[7].xy, R4, R4.z;
MUL R4.xyz, R3.zxyw, R1.yzxw;
MAD R4.xyz, R3.yzxw, R1.zxyw, -R4;
MOV R2.xyz, c[18];
MOV R2.w, c[0].y;
MUL R4.xyz, R4, R1.w;
DP4 R5.z, R2, c[15];
DP4 R5.x, R2, c[13];
DP4 R5.y, R2, c[14];
MAD R0.xyz, R5, c[21].w, -R0;
DP3 result.texcoord[6].y, R4, R0;
DP3 result.texcoord[6].z, R3, R0;
DP3 result.texcoord[6].x, R1, R0;
DP3 R0.y, R4, c[9];
DP3 R0.x, R1, c[9];
DP3 R0.z, R3, c[9];
MUL result.texcoord[1].xyz, R0, c[21].w;
DP3 R0.y, R4, c[10];
DP3 R0.x, R1, c[10];
DP3 R0.z, R3, c[10];
MUL result.texcoord[2].xyz, R0, c[21].w;
MOV R0, c[20];
DP3 R2.y, R4, c[11];
DP3 R2.z, R3, c[11];
DP3 R2.x, R1, c[11];
MUL result.texcoord[3].xyz, R2, c[21].w;
DP4 R2.z, R0, c[15];
DP4 R2.x, R0, c[13];
DP4 R2.y, R0, c[14];
DP3 result.texcoord[4].y, R4, R2;
DP3 result.texcoord[4].z, R3, R2;
DP3 result.texcoord[4].x, R1, R2;
MOV result.color.xyz, c[0].y;
MOV result.texcoord[5].xyz, c[0].x;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[26], c[26].zwzw;
MOV result.color.w, vertex.color;
END
# 105 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_ProjectionParams]
Vector 19 [_ScreenParams]
Vector 20 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Scale]
Vector 23 [_SquashPlaneNormal]
Float 24 [_SquashAmount]
Vector 25 [_Wind]
Vector 26 [_MainTex_ST]
"vs_3_0
; 110 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
def c27, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c28, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c29, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c30, 0.10000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c27.x
abs r0.w, v1
add r4.w, -r0, c27.y
mov r1.xyz, c11
dp3 r0.w, c27.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r4.w, v0
add r3, r2, c27.x
mul r0.xyz, r0, c22
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp3 r1.x, r0, r1.x
dp4 r0.w, r3, r3
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c28
frc r1, r1
mad r1, r1, c27.z, c27.w
frc r1, r1
mad r1, r1, c29.x, c29.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c29.x, c29.z
mul r1, r2, r1
add r4.xy, r1.xzzw, r1.ywzw
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
mad r3.xyz, r4.w, r2, v2
mul r1.xyz, r4.y, c25
mul r2.xyz, v4.y, r1
mul r5.xy, v5.y, r3.xzzw
mov r0.w, c27.y
mul r1.xz, r5.xyyw, c30.x
mul r1.y, v4, c29.w
mad r1.xyz, r4.xyxw, r1, r2
mad r0.xyz, r1, c25.w, r0
mad r1.xyz, v4.x, c25, r0
dp3 r0.x, r1, c23
add r0.x, r0, c23.w
mul r0.xyz, r0.x, c23
add r1.xyz, -r0, r1
mad r0.xyz, r0, c24.x, r1
mul r1, v1.y, c5
mad r1, v1.x, c4, r1
mad r1, v1.z, c6, r1
add r1, r1, c27.x
dp4 r1.w, r1, r1
rsq r2.z, r1.w
mul r1.xyz, r2.z, r1
mov r1.w, c29.y
add r1, -v1, r1
dp4 r2.w, r0, c3
dp4 r2.z, r0, c2
dp4 r2.y, r0, c1
dp4 r2.x, r0, c0
mul r4.xyz, r2.xyww, c30.y
mul r4.y, r4, c18.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mul r3.xyz, r0.w, r3
mad r1, r4.w, r1, v1
mov o0, r2
dp3 r2.x, r1, r1
rsq r2.x, r2.x
mov o9.zw, r2
mul r1.xyz, r2.x, r1
mad o9.xy, r4.z, c19.zwzw, r4
mul r4.xyz, r3.zxyw, r1.yzxw
mad r4.xyz, r3.yzxw, r1.zxyw, -r4
mov r2.xyz, c17
mov r2.w, c27.y
dp4 r5.z, r2, c14
dp4 r5.x, r2, c12
dp4 r5.y, r2, c13
mad r0.xyz, r5, c21.w, -r0
mul r4.xyz, r4, r1.w
dp3 o8.y, r4, r0
dp3 o8.z, r3, r0
dp3 o8.x, r1, r0
dp3 r0.y, r4, c8
dp3 r0.x, r1, c8
dp3 r0.z, r3, c8
mul o3.xyz, r0, c21.w
dp3 r0.y, r4, c9
dp3 r0.x, r1, c9
dp3 r0.z, r3, c9
mul o4.xyz, r0, c21.w
mov r0, c14
dp4 r5.z, c20, r0
mov r0, c13
dp4 r5.y, c20, r0
dp3 r2.y, r4, c10
dp3 r2.z, r3, c10
dp3 r2.x, r1, c10
mul o5.xyz, r2, c21.w
mov r2, c12
dp4 r5.x, c20, r2
dp3 o6.y, r4, r5
dp3 o6.z, r3, r5
dp3 o6.x, r1, r5
mov o2.xyz, c27.y
mov o7.xyz, c27.x
mad o1.xy, v3, c26, c26.zwzw
mov o2.w, v5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 115 instructions, 7 temp regs, 0 temp arrays:
// ALU 95 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhngmfadlmleaganepfldpblofmkfplfkabaaaaaadebbaaaaadaaaaaa
cmaaaaaapeaaaaaabaacaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheobeabaaaaakaaaaaa
aiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaanabaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefcbmapaaaaeaaaabaamhadaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadlcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaad
hccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaacahaaaaaadgaaaaag
bcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaaaaaaaa
dkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaaadaaaaaa
aoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaabkbabaaa
afaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
aiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
ajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
akaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaakgakbaaa
aaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaaabaaaaaa
aaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdp
amaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaa
dcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaa
acaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaaegaobaia
mbaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaaacaaaaaa
igaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgbfbaaa
aeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaaaeaaaaaa
baaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaaegacbaaa
aeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaadiaaaaah
ccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaa
adaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaaaaaaaaaa
abeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaa
agbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaaaaaaaaabaaaaaai
bcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaal
hcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaa
dgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaa
dgaaaaaihccabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
dgaaaaaficcabaaaacaaaaaadkbabaaaafaaaaaabaaaaaaiicaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaaaaaaaaaegacbaaa
aeaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaaeaaaaaajgaebaaa
acaaaaaacgajbaaaadaaaaaadcaaaaakhcaabaaaaeaaaaaajgaebaaaadaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaa
pgapbaaaacaaaaaaegacbaaaaeaaaaaadgaaaaagbcaabaaaafaaaaaaakiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaafaaaaaaakiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaafaaaaaaakiacaaaadaaaaaaaoaaaaaabaaaaaahccaabaaa
agaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaabaaaaaahbcaabaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaadiaaaaaihccabaaaadaaaaaaegacbaaaagaaaaaa
pgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaafaaaaaabkiacaaaadaaaaaa
amaaaaaadgaaaaagccaabaaaafaaaaaabkiacaaaadaaaaaaanaaaaaadgaaaaag
ecaabaaaafaaaaaabkiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaafaaaaaabaaaaaahccaabaaaagaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaaadaaaaaa
egacbaaaafaaaaaadiaaaaaihccabaaaaeaaaaaaegacbaaaagaaaaaapgipcaaa
adaaaaaabeaaaaaadgaaaaagbcaabaaaafaaaaaackiacaaaadaaaaaaamaaaaaa
dgaaaaagccaabaaaafaaaaaackiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaa
afaaaaaackiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaafaaaaaabaaaaaahccaabaaaagaaaaaaegacbaaaaeaaaaaa
egacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaaagaaaaaapgipcaaaadaaaaaa
beaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaa
aaaaaaaaegacbaaaafaaaaaabaaaaaahbccabaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaafaaaaaabaaaaaaheccabaaaagaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaabaaaaaahcccabaaaagaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaa
dgaaaaaihccabaaaahaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
diaaaaajhcaabaaaafaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
abaaaaaaaeaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaaaaaaaaai
hcaabaaaafaaaaaaegacbaaaafaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaal
hcaabaaaaaaaaaaaegacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaia
ebaaaaaaaaaaaaaabaaaaaahbccabaaaaiaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaaheccabaaaaiaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaahcccabaaaaiaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaai
bcaabaaaaaaaaaaabkaabaaaabaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaah
icaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaa
aaaaaaaaagadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaa
dgaaaaafmccabaaaajaaaaaakgaobaaaabaaaaaaaaaaaaahdccabaaaajaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_6.xyz;
  tmpvar_28 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_26.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_26.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_26.z;
  vec3 v_30;
  v_30.x = _Object2World[0].x;
  v_30.y = _Object2World[1].x;
  v_30.z = _Object2World[2].x;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_29 * v_30) * unity_Scale.w);
  tmpvar_1 = tmpvar_31;
  vec3 v_32;
  v_32.x = _Object2World[0].y;
  v_32.y = _Object2World[1].y;
  v_32.z = _Object2World[2].y;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * v_32) * unity_Scale.w);
  tmpvar_2 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].z;
  v_34.y = _Object2World[1].z;
  v_34.z = _Object2World[2].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_29 * v_34) * unity_Scale.w);
  tmpvar_3 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_24);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_29 * (((_World2Object * tmpvar_37).xyz * unity_Scale.w) - tmpvar_23));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_24));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float tmpvar_17;
  mediump float lightShadowDataX_18;
  highp float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = _LightShadowData.x;
  lightShadowDataX_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((dist_19 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_18);
  tmpvar_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_24;
  mediump vec3 lightDir_25;
  lightDir_25 = xlv_TEXCOORD4;
  mediump vec3 viewDir_26;
  viewDir_26 = tmpvar_23;
  mediump float atten_27;
  atten_27 = tmpvar_17;
  lowp vec4 c_28;
  lowp float backContrib_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_11, lightDir_25);
  mediump float tmpvar_31;
  tmpvar_31 = clamp (dot (viewDir_26, -(lightDir_25)), 0.0, 1.0);
  backContrib_29 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = clamp (-(tmpvar_30), 0.0, 1.0);
  lowp float tmpvar_33;
  tmpvar_33 = mix (tmpvar_32, backContrib_29, _TranslucencyViewDependency);
  backContrib_29 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_9 * ((tmpvar_34 * 2.0) + max (0.0, ((tmpvar_30 * 0.6) + 0.4))));
  c_28.xyz = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((c_28.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_25 + viewDir_26)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_28.xyz = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_28.xyz * mix (2.0, (atten_27 * 2.0), _ShadowStrength));
  c_28.xyz = tmpvar_37;
  tmpvar_24 = c_28;
  c_1 = tmpvar_24;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec4 tmpvar_27;
  tmpvar_27 = (glstate_matrix_mvp * tmpvar_24);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_6.xyz;
  tmpvar_29 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_26.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_26.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_26.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_37;
  highp vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = _WorldSpaceCameraPos;
  highp vec4 o_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_27 * 0.5);
  highp vec2 tmpvar_41;
  tmpvar_41.x = tmpvar_40.x;
  tmpvar_41.y = (tmpvar_40.y * _ProjectionParams.x);
  o_39.xy = (tmpvar_41 + tmpvar_40.w);
  o_39.zw = tmpvar_27.zw;
  gl_Position = tmpvar_27;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_38).xyz * unity_Scale.w) - tmpvar_23));
  xlv_TEXCOORD7 = o_39;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, normal_11);
  tmpvar_12.y = dot (tmpvar_3, normal_11);
  tmpvar_12.z = dot (tmpvar_4, normal_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_19;
  mediump vec3 lightDir_20;
  lightDir_20 = xlv_TEXCOORD4;
  mediump vec3 viewDir_21;
  viewDir_21 = tmpvar_18;
  mediump float atten_22;
  atten_22 = tmpvar_17;
  lowp vec4 c_23;
  lowp float backContrib_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (normal_11, lightDir_20);
  mediump float tmpvar_26;
  tmpvar_26 = clamp (dot (viewDir_21, -(lightDir_20)), 0.0, 1.0);
  backContrib_24 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp (-(tmpvar_25), 0.0, 1.0);
  lowp float tmpvar_28;
  tmpvar_28 = mix (tmpvar_27, backContrib_24, _TranslucencyViewDependency);
  backContrib_24 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_9 * ((tmpvar_29 * 2.0) + max (0.0, ((tmpvar_25 * 0.6) + 0.4))));
  c_23.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((c_23.xyz + (pow (max (0.0, dot (normal_11, normalize((lightDir_20 + viewDir_21)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_23.xyz = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (c_23.xyz * mix (2.0, (atten_22 * 2.0), _ShadowStrength));
  c_23.xyz = tmpvar_32;
  tmpvar_19 = c_23;
  c_1 = tmpvar_19;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 669
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 670
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 673
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 677
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 681
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 685
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 690
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 669
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 693
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 695
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    #line 699
    surfIN.TtoW1 = IN.TtoW1.xyz;
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    #line 703
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 707
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 711
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    #line 715
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Vector 20 [unity_4LightPosX0]
Vector 21 [unity_4LightPosY0]
Vector 22 [unity_4LightPosZ0]
Vector 23 [unity_4LightAtten0]
Vector 24 [unity_LightColor0]
Vector 25 [unity_LightColor1]
Vector 26 [unity_LightColor2]
Vector 27 [unity_LightColor3]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 28 [unity_Scale]
Vector 29 [_Scale]
Vector 30 [_SquashPlaneNormal]
Float 31 [_SquashAmount]
Vector 32 [_Wind]
Vector 33 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 132 ALU
PARAM c[36] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..33],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R0.w, vertex.attrib[14];
ADD R5.w, -R0, c[0].y;
MOV R1.x, c[0].y;
DP3 R0.w, R1.x, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R2, vertex.normal.z, c[7], R2;
MAD R0.xyz, R0, R5.w, vertex.position;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[29];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[34];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[35].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R3.xy, R1.xzzw, R1.ywzw;
MAD R5.xyz, R5.w, R2, vertex.normal;
MUL R1.xyz, R3.y, c[32];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R3.zw, vertex.color.y, R5.xyxz;
DP3 R4.x, R5, R5;
RSQ R6.x, R4.x;
MUL R5.xyz, R6.x, R5;
MUL R6.xyz, R5, c[28].w;
MOV R1.w, c[0].y;
MUL R1.xz, R3.zyww, c[35].z;
MUL R1.y, vertex.texcoord[1], c[35];
MAD R1.xyz, R3.xyxw, R1, R2;
MAD R0.xyz, R1, c[32].w, R0;
MAD R1.xyz, vertex.texcoord[1].x, c[32], R0;
DP3 R0.x, R1, c[30];
ADD R0.x, R0, c[30].w;
MUL R0.xyz, R0.x, c[30];
ADD R1.xyz, -R0, R1;
MAD R1.xyz, R0, c[31].x, R1;
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
DP4 result.position.w, R1, c[4];
DP4 result.position.z, R1, c[3];
DP4 result.position.y, R1, c[2];
DP4 result.position.x, R1, c[1];
ADD R2, -R0.x, c[20];
ADD R3, -R0.y, c[21];
MUL R0, R3, R3;
MAD R4, R2, R2, R0;
DP4 R0.x, R1, c[11];
ADD R0, -R0.x, c[22];
DP3 R6.w, R6, c[10];
MUL R3, R3, R6.w;
DP3 R6.w, R6, c[9];
MAD R2, R2, R6.w, R3;
DP3 R3.x, R6, c[11];
MAD R4, R0, R0, R4;
MAD R2, R0, R3.x, R2;
MUL R3, R4, c[23];
ADD R3, R3, c[0].y;
RSQ R0.x, R4.x;
RSQ R0.y, R4.y;
RSQ R0.z, R4.z;
RSQ R0.w, R4.w;
MUL R0, R2, R0;
MAX R2, R0, c[0].x;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R0, vertex.attrib[14].z, c[7], R0;
ADD R0, R0, c[0].x;
DP4 R0.w, R0, R0;
RSQ R4.x, R0.w;
RCP R3.x, R3.x;
RCP R3.y, R3.y;
RCP R3.z, R3.z;
RCP R3.w, R3.w;
MUL R2, R2, R3;
MUL R3.xyz, R2.y, c[25];
MAD R3.xyz, R2.x, c[24], R3;
MAD R3.xyz, R2.z, c[26], R3;
MAD result.texcoord[5].xyz, R2.w, c[27], R3;
MOV R2.w, c[0].y;
MUL R0.xyz, R4.x, R0;
MOV R0.w, c[35];
ADD R0, -vertex.attrib[14], R0;
MAD R0, R5.w, R0, vertex.attrib[14];
DP3 R3.w, R0, R0;
RSQ R2.y, R3.w;
MUL R0.xyz, R2.y, R0;
MUL R2.xyz, R5.zxyw, R0.yzxw;
MAD R3.xyz, R5.yzxw, R0.zxyw, -R2;
MOV R2.xyz, c[18];
MUL R3.xyz, R3, R0.w;
DP4 R4.z, R2, c[15];
DP4 R4.x, R2, c[13];
DP4 R4.y, R2, c[14];
MAD R2.xyz, R4, c[28].w, -R1;
DP3 result.texcoord[6].y, R3, R2;
DP3 result.texcoord[6].z, R5, R2;
DP3 result.texcoord[6].x, R0, R2;
DP3 R1.y, R3, c[9];
DP3 R1.x, R0, c[9];
DP3 R1.z, R5, c[9];
MUL result.texcoord[1].xyz, R1, c[28].w;
DP3 R1.y, R3, c[10];
DP3 R1.x, R0, c[10];
DP3 R1.z, R5, c[10];
MUL result.texcoord[2].xyz, R1, c[28].w;
MOV R1, c[19];
DP3 R2.y, R3, c[11];
DP3 R2.z, R5, c[11];
DP3 R2.x, R0, c[11];
MUL result.texcoord[3].xyz, R2, c[28].w;
DP4 R2.z, R1, c[15];
DP4 R2.x, R1, c[13];
DP4 R2.y, R1, c[14];
DP3 result.texcoord[4].y, R3, R2;
DP3 result.texcoord[4].z, R5, R2;
DP3 result.texcoord[4].x, R0, R2;
MOV result.color.xyz, c[0].y;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[33], c[33].zwzw;
MOV result.color.w, vertex.color;
END
# 132 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Vector 19 [unity_4LightPosX0]
Vector 20 [unity_4LightPosY0]
Vector 21 [unity_4LightPosZ0]
Vector 22 [unity_4LightAtten0]
Vector 23 [unity_LightColor0]
Vector 24 [unity_LightColor1]
Vector 25 [unity_LightColor2]
Vector 26 [unity_LightColor3]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 27 [unity_Scale]
Vector 28 [_Scale]
Vector 29 [_SquashPlaneNormal]
Float 30 [_SquashAmount]
Vector 31 [_Wind]
Vector 32 [_MainTex_ST]
"vs_3_0
; 137 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
def c33, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c34, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c35, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c36, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c33.x
abs r0.w, v1
add r5.w, -r0, c33.y
mov r1.xyz, c11
dp3 r0.w, c33.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r5.w, v0
add r3, r2, c33.x
mul r0.xyz, r0, c28
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp4 r0.w, r3, r3
dp3 r1.x, r0, r1.x
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c34
frc r1, r1
mad r1, r1, c33.z, c33.w
frc r1, r1
mad r1, r1, c35.x, c35.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c35.x, c35.z
mul r1, r2, r1
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
add r3.xy, r1.xzzw, r1.ywzw
mad r5.xyz, r5.w, r2, v2
mul r1.xyz, r3.y, c31
mul r2.xyz, v4.y, r1
mul r3.zw, v5.y, r5.xyxz
dp3 r4.x, r5, r5
rsq r6.x, r4.x
mul r5.xyz, r6.x, r5
mul r6.xyz, r5, c27.w
mov r1.w, c33.y
mul r1.xz, r3.zyww, c36.x
mul r1.y, v4, c35.w
mad r1.xyz, r3.xyxw, r1, r2
mad r0.xyz, r1, c31.w, r0
mad r1.xyz, v4.x, c31, r0
dp3 r0.x, r1, c29
add r0.x, r0, c29.w
mul r0.xyz, r0.x, c29
add r1.xyz, -r0, r1
mad r1.xyz, r0, c30.x, r1
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
add r2, -r0.x, c19
add r3, -r0.y, c20
mul r0, r3, r3
mad r4, r2, r2, r0
dp4 r0.x, r1, c10
add r0, -r0.x, c21
dp3 r6.w, r6, c9
mul r3, r3, r6.w
dp3 r6.w, r6, c8
mad r2, r2, r6.w, r3
dp3 r3.x, r6, c10
mad r4, r0, r0, r4
mad r2, r0, r3.x, r2
mul r3, r4, c22
add r3, r3, c33.y
rsq r0.x, r4.x
rsq r0.y, r4.y
rsq r0.z, r4.z
rsq r0.w, r4.w
mul r0, r2, r0
max r2, r0, c33.x
mul r0, v1.y, c5
mad r0, v1.x, c4, r0
mad r0, v1.z, c6, r0
add r0, r0, c33.x
dp4 r0.w, r0, r0
rsq r4.x, r0.w
rcp r3.x, r3.x
rcp r3.y, r3.y
rcp r3.z, r3.z
rcp r3.w, r3.w
mul r2, r2, r3
mul r3.xyz, r2.y, c24
mad r3.xyz, r2.x, c23, r3
mad r3.xyz, r2.z, c25, r3
mad o7.xyz, r2.w, c26, r3
mov r2.w, c33.y
mul r0.xyz, r4.x, r0
mov r0.w, c35.y
add r0, -v1, r0
mad r0, r5.w, r0, v1
dp3 r3.w, r0, r0
rsq r2.y, r3.w
mul r0.xyz, r2.y, r0
mul r2.xyz, r5.zxyw, r0.yzxw
mad r3.xyz, r5.yzxw, r0.zxyw, -r2
mov r2.xyz, c17
dp4 r4.z, r2, c14
dp4 r4.x, r2, c12
dp4 r4.y, r2, c13
mad r4.xyz, r4, c27.w, -r1
mul r2.xyz, r3, r0.w
dp3 o8.y, r2, r4
dp3 o8.z, r5, r4
dp3 o8.x, r0, r4
dp3 r1.y, r2, c8
dp3 r1.x, r0, c8
dp3 r1.z, r5, c8
mul o3.xyz, r1, c27.w
dp3 r1.y, r2, c9
dp3 r1.x, r0, c9
dp3 r1.z, r5, c9
mul o4.xyz, r1, c27.w
mov r1, c14
dp4 r4.z, c18, r1
mov r1, c13
dp4 r4.y, c18, r1
dp3 r3.y, r2, c10
dp3 r3.z, r5, c10
dp3 r3.x, r0, c10
mul o5.xyz, r3, c27.w
mov r3, c12
dp4 r4.x, c18, r3
dp3 o6.y, r2, r4
dp3 o6.z, r5, r4
dp3 o6.x, r0, r4
mov o2.xyz, c33.y
mad o1.xy, v3, c32, c32.zwzw
mov o2.w, v5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 224 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 160 [unity_LightColor4] 4
Vector 176 [unity_LightColor5] 4
Vector 192 [unity_LightColor6] 4
Vector 208 [unity_LightColor7] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 135 instructions, 9 temp regs, 0 temp arrays:
// ALU 118 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecednapjalojnomgbfdopnbjpfnnlaljdfgmabaaaaaaaebeaaaaadaaaaaa
cmaaaaaapeaaaaaapiabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheopmaaaaaaajaaaaaa
aiaaaaaaoaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaapfaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaomaaaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaomaaaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaomaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaomaaaaaaagaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaedepemepfcaaklfdeieefcaebcaaaa
eaaaabaaibaeaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaa
abaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaakaaaaaafjaaaaaeegiocaaa
adaaaaaabfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaa
aaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaad
dcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaadlcbabaaaafaaaaaa
ghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaad
pccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaa
gfaaaaadhccabaaaafaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaa
ahaaaaaagfaaaaadhccabaaaaiaaaaaagiaaaaacajaaaaaadgaaaaagbcaabaaa
aaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaaaaaaaadkiacaaa
adaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaaadaaaaaaaoaaaaaa
baaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaaakbabaaa
afaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaabkbabaaaafaaaaaa
apaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
aaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadp
dcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaeaaaaaa
afaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaakgakbaaaaaaaaaaa
aaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaaabaaaaaaaaaaaaaa
diaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldp
aaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaap
pcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaa
acaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialp
aaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaa
egaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaea
aaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaa
egaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaaacaaaaaaigaabaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
adaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgbfbaaaaeaaaaaa
diaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaaaeaaaaaabaaaaaai
icaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
ccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
fgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaaaeaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaadiaaaaahccaabaaa
aaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaadaaaaaa
agacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaaaaaaaaaaabeaaaaa
jkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaaegacbaaaadaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaapgipcaaa
aaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaa
aeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaaibcaabaaa
abaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaa
abaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
aaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaai
pccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaadcaaaaal
dccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadgaaaaaihccabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaaaaadgaaaaaficcabaaaacaaaaaadkbabaaaafaaaaaabaaaaaai
icaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaabaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
icaabaaaabaaaaaaegaobaaaabaaaaaaegaobaaaabaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaa
egacbaaaabaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaialpaaaaaaai
pcaabaaaabaaaaaaegaobaaaabaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaaj
pcaabaaaabaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaaegbobaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaa
aaaaaaaaegacbaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaa
egacbaaaaeaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaahhcaabaaa
adaaaaaajgaebaaaabaaaaaacgajbaaaacaaaaaadcaaaaakhcaabaaaadaaaaaa
jgaebaaaacaaaaaacgajbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaadgaaaaagbcaabaaa
aeaaaaaaakiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaaakiacaaa
adaaaaaaanaaaaaadgaaaaagecaabaaaaeaaaaaaakiacaaaadaaaaaaaoaaaaaa
baaaaaahccaabaaaafaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaah
bcaabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaa
afaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaadaaaaaa
egacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaaeaaaaaa
bkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaabkiacaaaadaaaaaa
anaaaaaadgaaaaagecaabaaaaeaaaaaabkiacaaaadaaaaaaaoaaaaaabaaaaaah
bcaabaaaafaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahccaabaaa
afaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaaafaaaaaa
egacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaaeaaaaaaegacbaaa
afaaaaaapgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaaeaaaaaackiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaaeaaaaaackiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaaeaaaaaackiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaa
afaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahccaabaaaafaaaaaa
egacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahecaabaaaafaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaaafaaaaaa
pgipcaaaadaaaaaabeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaagaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaaagaaaaaaegacbaaaadaaaaaa
egacbaaaaeaaaaaadiaaaaaihcaabaaaaeaaaaaafgafbaaaaaaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaaamaaaaaa
agaabaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaa
adaaaaaaaoaaaaaakgakbaaaaaaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaa
aeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajpcaabaaa
afaaaaaakgakbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaaeaaaaaaaaaaaaaj
pcaabaaaagaaaaaaagaabaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaacaaaaaa
aaaaaaajpcaabaaaaeaaaaaafgafbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaa
adaaaaaadiaaaaaihcaabaaaahaaaaaaegacbaaaacaaaaaapgipcaaaadaaaaaa
beaaaaaadiaaaaaihcaabaaaaiaaaaaafgafbaaaahaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaaklcaabaaaahaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaa
ahaaaaaaegaibaaaaiaaaaaadcaaaaakhcaabaaaahaaaaaaegiccaaaadaaaaaa
aoaaaaaakgakbaaaahaaaaaaegadbaaaahaaaaaadiaaaaahpcaabaaaaiaaaaaa
egaobaaaaeaaaaaafgafbaaaahaaaaaadiaaaaahpcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaaagaaaaaa
egaobaaaagaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaagaaaaaaegaobaaa
agaaaaaaagaabaaaahaaaaaaegaobaaaaiaaaaaadcaaaaajpcaabaaaagaaaaaa
egaobaaaafaaaaaakgakbaaaahaaaaaaegaobaaaagaaaaaadcaaaaajpcaabaaa
aeaaaaaaegaobaaaafaaaaaaegaobaaaafaaaaaaegaobaaaaeaaaaaaeeaaaaaf
pcaabaaaafaaaaaaegaobaaaaeaaaaaadcaaaaanpcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegiocaaaacaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpaoaaaaakpcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpegaobaaaaeaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaagaaaaaadeaaaaakpcaabaaaafaaaaaaegaobaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaahpcaabaaaaeaaaaaaegaobaaa
aeaaaaaaegaobaaaafaaaaaadiaaaaaihcaabaaaafaaaaaafgafbaaaaeaaaaaa
egiccaaaacaaaaaaahaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaacaaaaaa
agaaaaaaagaabaaaaeaaaaaaegacbaaaafaaaaaadcaaaaakhcaabaaaaeaaaaaa
egiccaaaacaaaaaaaiaaaaaakgakbaaaaeaaaaaaegacbaaaafaaaaaadcaaaaak
hccabaaaahaaaaaaegiccaaaacaaaaaaajaaaaaapgapbaaaaeaaaaaaegacbaaa
aeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaa
aaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaa
egacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaiaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaabaaaaaaheccabaaaaiaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahcccabaaaaiaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_7.xyz;
  tmpvar_29 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_27.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_27.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_27.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosZ0 - tmpvar_41.z);
  highp vec4 tmpvar_45;
  tmpvar_45 = (((tmpvar_42 * tmpvar_42) + (tmpvar_43 * tmpvar_43)) + (tmpvar_44 * tmpvar_44));
  highp vec4 tmpvar_46;
  tmpvar_46 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_42 * tmpvar_38.x) + (tmpvar_43 * tmpvar_38.y)) + (tmpvar_44 * tmpvar_38.z)) * inversesqrt(tmpvar_45))) * (1.0/((1.0 + (tmpvar_45 * unity_4LightAtten0)))));
  highp vec3 tmpvar_47;
  tmpvar_47 = ((((unity_LightColor[0].xyz * tmpvar_46.x) + (unity_LightColor[1].xyz * tmpvar_46.y)) + (unity_LightColor[2].xyz * tmpvar_46.z)) + (unity_LightColor[3].xyz * tmpvar_46.w));
  tmpvar_5 = tmpvar_47;
  gl_Position = (glstate_matrix_mvp * tmpvar_25);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_40).xyz * unity_Scale.w) - tmpvar_24));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = xlv_TEXCOORD4;
  mediump vec3 viewDir_20;
  viewDir_20 = tmpvar_17;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_11, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (viewDir_20, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_9 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_19 + viewDir_20)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1 = tmpvar_18;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_7.xyz;
  tmpvar_29 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_27.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_27.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_27.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosZ0 - tmpvar_41.z);
  highp vec4 tmpvar_45;
  tmpvar_45 = (((tmpvar_42 * tmpvar_42) + (tmpvar_43 * tmpvar_43)) + (tmpvar_44 * tmpvar_44));
  highp vec4 tmpvar_46;
  tmpvar_46 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_42 * tmpvar_38.x) + (tmpvar_43 * tmpvar_38.y)) + (tmpvar_44 * tmpvar_38.z)) * inversesqrt(tmpvar_45))) * (1.0/((1.0 + (tmpvar_45 * unity_4LightAtten0)))));
  highp vec3 tmpvar_47;
  tmpvar_47 = ((((unity_LightColor[0].xyz * tmpvar_46.x) + (unity_LightColor[1].xyz * tmpvar_46.y)) + (unity_LightColor[2].xyz * tmpvar_46.z)) + (unity_LightColor[3].xyz * tmpvar_46.w));
  tmpvar_5 = tmpvar_47;
  gl_Position = (glstate_matrix_mvp * tmpvar_25);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_40).xyz * unity_Scale.w) - tmpvar_24));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, normal_11);
  tmpvar_12.y = dot (tmpvar_3, normal_11);
  tmpvar_12.z = dot (tmpvar_4, normal_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = xlv_TEXCOORD4;
  mediump vec3 viewDir_20;
  viewDir_20 = tmpvar_17;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (normal_11, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (viewDir_20, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_9 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (normal_11, normalize((lightDir_19 + viewDir_20)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1 = tmpvar_18;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 660
uniform highp vec4 _MainTex_ST;
#line 684
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 661
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 664
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 668
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 672
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 676
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 680
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 660
uniform highp vec4 _MainTex_ST;
#line 684
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 631
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 635
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 639
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 643
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 685
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 688
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    surfIN.TtoW1 = IN.TtoW1.xyz;
    #line 692
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 696
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 700
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 704
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_ProjectionParams]
Vector 20 [_WorldSpaceLightPos0]
Vector 21 [unity_4LightPosX0]
Vector 22 [unity_4LightPosY0]
Vector 23 [unity_4LightPosZ0]
Vector 24 [unity_4LightAtten0]
Vector 25 [unity_LightColor0]
Vector 26 [unity_LightColor1]
Vector 27 [unity_LightColor2]
Vector 28 [unity_LightColor3]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Scale]
Vector 31 [_SquashPlaneNormal]
Float 32 [_SquashAmount]
Vector 33 [_Wind]
Vector 34 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 137 ALU
PARAM c[38] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..34],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 },
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R0.w, vertex.attrib[14];
ADD R6.w, -R0, c[0].y;
MOV R1.x, c[0].y;
DP3 R0.w, R1.x, c[12];
MAD R0.xyz, R0, R6.w, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R1.w, R3, R3;
MUL R1.xyz, R0, c[30];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R1, R0.x;
ADD R0.xy, R0, c[17].y;
MUL R0, R0.xxyy, c[35];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R2, -R0, c[0].z;
ADD R2, R2, c[36].x;
MUL R0, R0, R0;
MUL R0, R0, R2;
RSQ R1.w, R1.w;
MAD R2.xyz, R1.w, R3, -vertex.normal;
ADD R4.xy, R0.xzzw, R0.ywzw;
MAD R0.xyz, R6.w, R2, vertex.normal;
MUL R2.xyz, R4.y, c[33];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R4.zw, vertex.color.y, R0.xyxz;
MOV R1.w, c[0].y;
MUL R2.xz, R4.zyww, c[36].z;
MUL R2.y, vertex.texcoord[1], c[36];
MAD R2.xyz, R4.xyxw, R2, R3;
MAD R1.xyz, R2, c[33].w, R1;
MAD R2.xyz, vertex.texcoord[1].x, c[33], R1;
DP3 R0.w, R2, c[31];
ADD R0.w, R0, c[31];
MUL R1.xyz, R0.w, c[31];
ADD R2.xyz, -R1, R2;
MAD R1.xyz, R1, c[32].x, R2;
DP4 R2.x, R1, c[10];
ADD R3, -R2.x, c[22];
DP4 R0.w, R1, c[9];
ADD R2, -R0.w, c[21];
MUL R4, R3, R3;
DP3 R0.w, R0, R0;
RSQ R0.w, R0.w;
MUL R6.xyz, R0.w, R0;
DP4 R5.x, R1, c[11];
MUL R7.xyz, R6, c[29].w;
DP3 R7.w, R7, c[10];
MUL R3, R3, R7.w;
ADD R0, -R5.x, c[23];
MAD R4, R2, R2, R4;
MAD R4, R0, R0, R4;
DP3 R7.w, R7, c[9];
MAD R2, R2, R7.w, R3;
DP3 R3.x, R7, c[11];
MAD R0, R0, R3.x, R2;
MUL R5, R4, c[24];
RSQ R2.x, R4.x;
RSQ R2.y, R4.y;
RSQ R2.z, R4.z;
RSQ R2.w, R4.w;
MUL R0, R0, R2;
ADD R2, R5, c[0].y;
MAX R0, R0, c[0].x;
RCP R2.x, R2.x;
RCP R2.y, R2.y;
RCP R2.w, R2.w;
RCP R2.z, R2.z;
MUL R2, R0, R2;
MUL R0.xyz, R2.y, c[26];
MAD R0.xyz, R2.x, c[25], R0;
MAD R2.xyz, R2.z, c[27], R0;
MAD result.texcoord[5].xyz, R2.w, c[28], R2;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R0, vertex.attrib[14].z, c[7], R0;
ADD R0, R0, c[0].x;
DP4 R0.w, R0, R0;
RSQ R2.z, R0.w;
DP4 R2.w, R1, c[4];
DP4 R2.y, R1, c[2];
DP4 R2.x, R1, c[1];
MUL R3.xyz, R2.xyww, c[37].x;
MUL R3.y, R3, c[19].x;
MUL R0.xyz, R2.z, R0;
MOV R0.w, c[36];
ADD R0, -vertex.attrib[14], R0;
MAD R0, R6.w, R0, vertex.attrib[14];
DP3 R2.z, R0, R0;
ADD result.texcoord[7].xy, R3, R3.z;
RSQ R3.x, R2.z;
DP4 R2.z, R1, c[3];
MUL R0.xyz, R3.x, R0;
MUL R3.xyz, R6.zxyw, R0.yzxw;
MAD R3.xyz, R6.yzxw, R0.zxyw, -R3;
MUL R3.xyz, R3, R0.w;
MOV result.position, R2;
MOV result.texcoord[7].zw, R2;
MOV R2.xyz, c[18];
MOV R2.w, c[0].y;
DP4 R4.z, R2, c[15];
DP4 R4.x, R2, c[13];
DP4 R4.y, R2, c[14];
MAD R1.xyz, R4, c[29].w, -R1;
DP3 result.texcoord[6].y, R3, R1;
DP3 result.texcoord[6].z, R6, R1;
DP3 result.texcoord[6].x, R0, R1;
DP3 R1.y, R3, c[9];
DP3 R1.x, R0, c[9];
DP3 R1.z, R6, c[9];
MUL result.texcoord[1].xyz, R1, c[29].w;
DP3 R1.y, R3, c[10];
DP3 R1.x, R0, c[10];
DP3 R1.z, R6, c[10];
MUL result.texcoord[2].xyz, R1, c[29].w;
MOV R1, c[20];
DP3 R2.y, R3, c[11];
DP3 R2.z, R6, c[11];
DP3 R2.x, R0, c[11];
MUL result.texcoord[3].xyz, R2, c[29].w;
DP4 R2.z, R1, c[15];
DP4 R2.x, R1, c[13];
DP4 R2.y, R1, c[14];
DP3 result.texcoord[4].y, R3, R2;
DP3 result.texcoord[4].z, R6, R2;
DP3 result.texcoord[4].x, R0, R2;
MOV result.color.xyz, c[0].y;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[34], c[34].zwzw;
MOV result.color.w, vertex.color;
END
# 137 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_ProjectionParams]
Vector 19 [_ScreenParams]
Vector 20 [_WorldSpaceLightPos0]
Vector 21 [unity_4LightPosX0]
Vector 22 [unity_4LightPosY0]
Vector 23 [unity_4LightPosZ0]
Vector 24 [unity_4LightAtten0]
Vector 25 [unity_LightColor0]
Vector 26 [unity_LightColor1]
Vector 27 [unity_LightColor2]
Vector 28 [unity_LightColor3]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Scale]
Vector 31 [_SquashPlaneNormal]
Float 32 [_SquashAmount]
Vector 33 [_Wind]
Vector 34 [_MainTex_ST]
"vs_3_0
; 142 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_color0 o2
dcl_texcoord1 o3
dcl_texcoord2 o4
dcl_texcoord3 o5
dcl_texcoord4 o6
dcl_texcoord5 o7
dcl_texcoord6 o8
dcl_texcoord7 o9
def c35, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c36, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c37, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c38, 0.10000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c35.x
abs r0.w, v1
add r6.w, -r0, c35.y
mov r1.xyz, c11
dp3 r0.w, c35.y, r1
mad r0.xyz, r0, r6.w, v0
mad r2, v2.z, c6, r2
add r3, r2, c35.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c30
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c16.y
mul r0, r0.xxyy, c36
frc r0, r0
mad r0, r0, c35.z, c35.w
frc r0, r0
mad r0, r0, c37.x, c37.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c37.x, c37.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.xy, r0.xzzw, r0.ywzw
mad r0.xyz, r6.w, r2, v2
mul r2.xyz, r4.y, c33
mul r3.xyz, v4.y, r2
mul r4.zw, v5.y, r0.xyxz
mov r1.w, c35.y
mul r2.xz, r4.zyww, c38.x
mul r2.y, v4, c37.w
mad r2.xyz, r4.xyxw, r2, r3
mad r1.xyz, r2, c33.w, r1
mad r2.xyz, v4.x, c33, r1
dp3 r0.w, r2, c31
add r0.w, r0, c31
mul r1.xyz, r0.w, c31
add r2.xyz, -r1, r2
mad r1.xyz, r1, c32.x, r2
dp4 r2.x, r1, c9
add r3, -r2.x, c22
dp4 r0.w, r1, c8
add r2, -r0.w, c21
mul r4, r3, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r6.xyz, r0.w, r0
dp4 r5.x, r1, c10
mul r7.xyz, r6, c29.w
dp3 r7.w, r7, c9
mul r3, r3, r7.w
add r0, -r5.x, c23
mad r4, r2, r2, r4
mad r4, r0, r0, r4
dp3 r7.w, r7, c8
mad r2, r2, r7.w, r3
dp3 r3.x, r7, c10
mad r0, r0, r3.x, r2
mul r5, r4, c24
rsq r2.x, r4.x
rsq r2.y, r4.y
rsq r2.z, r4.z
rsq r2.w, r4.w
mul r0, r0, r2
add r2, r5, c35.y
max r0, r0, c35.x
rcp r2.x, r2.x
rcp r2.y, r2.y
rcp r2.w, r2.w
rcp r2.z, r2.z
mul r2, r0, r2
mul r0.xyz, r2.y, c26
mad r0.xyz, r2.x, c25, r0
mad r2.xyz, r2.z, c27, r0
mad o7.xyz, r2.w, c28, r2
mul r0, v1.y, c5
mad r0, v1.x, c4, r0
mad r0, v1.z, c6, r0
add r0, r0, c35.x
dp4 r0.w, r0, r0
rsq r2.z, r0.w
dp4 r2.w, r1, c3
dp4 r2.y, r1, c1
dp4 r2.x, r1, c0
mul r3.xyz, r2.xyww, c38.y
mul r3.y, r3, c18.x
mad o9.xy, r3.z, c19.zwzw, r3
mul r0.xyz, r2.z, r0
mov r0.w, c37.y
add r0, -v1, r0
mad r0, r6.w, r0, v1
dp3 r2.z, r0, r0
rsq r3.x, r2.z
dp4 r2.z, r1, c2
mul r0.xyz, r3.x, r0
mul r3.xyz, r6.zxyw, r0.yzxw
mad r3.xyz, r6.yzxw, r0.zxyw, -r3
mul r3.xyz, r3, r0.w
mov o0, r2
mov o9.zw, r2
mov r2.xyz, c17
mov r2.w, c35.y
dp4 r4.z, r2, c14
dp4 r4.x, r2, c12
dp4 r4.y, r2, c13
mad r1.xyz, r4, c29.w, -r1
dp3 o8.y, r3, r1
dp3 o8.z, r6, r1
dp3 o8.x, r0, r1
dp3 r1.y, r3, c8
dp3 r1.x, r0, c8
dp3 r1.z, r6, c8
mul o3.xyz, r1, c29.w
dp3 r1.y, r3, c9
dp3 r1.x, r0, c9
dp3 r1.z, r6, c9
mul o4.xyz, r1, c29.w
mov r1, c14
dp4 r4.z, c20, r1
mov r1, c13
dp4 r4.y, c20, r1
dp3 r2.y, r3, c10
dp3 r2.z, r6, c10
dp3 r2.x, r0, c10
mul o5.xyz, r2, c29.w
mov r2, c12
dp4 r4.x, c20, r2
dp3 o6.y, r3, r4
dp3 o6.z, r6, r4
dp3 o6.x, r0, r4
mov o2.xyz, c35.y
mad o1.xy, v3, c34, c34.zwzw
mov o2.w, v5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 224 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 160 [unity_LightColor4] 4
Vector 176 [unity_LightColor5] 4
Vector 192 [unity_LightColor6] 4
Vector 208 [unity_LightColor7] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 141 instructions, 10 temp regs, 0 temp arrays:
// ALU 122 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedljnlbnndofnoibdiiclobhlipinghonoabaaaaaanabeaaaaadaaaaaa
cmaaaaaapeaaaaaabaacaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheobeabaaaaakaaaaaa
aiaaaaaapiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaanabaaaaaaaaaaaaaaaaaaaa
adaaaaaaacaaaaaaapaaaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaaeabaaaaacaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaaaeabaaaa
adaaaaaaaaaaaaaaadaaaaaaafaaaaaaahaiaaaaaeabaaaaaeaaaaaaaaaaaaaa
adaaaaaaagaaaaaaahaiaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaa
ahaiaaaaaeabaaaaagaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahaiaaaaaeabaaaa
ahaaaaaaaaaaaaaaadaaaaaaajaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklfdeieefclibcaaaaeaaaabaakoaeaaaa
fjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaaakaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaa
fjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaad
pcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaa
fpaaaaaddcbabaaaaeaaaaaafpaaaaadlcbabaaaafaaaaaaghaaaaaepccabaaa
aaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadpccabaaaacaaaaaa
gfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadhccabaaa
afaaaaaagfaaaaadhccabaaaagaaaaaagfaaaaadhccabaaaahaaaaaagfaaaaad
hccabaaaaiaaaaaagfaaaaadpccabaaaajaaaaaagiaaaaacakaaaaaadgaaaaag
bcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaaaaaaaaa
dkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaaadaaaaaa
aoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaaaaaaiadp
aaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaaaaaaaaaa
akbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaabkbabaaa
afaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
aiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
ajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaa
akaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaaaaaaaaaa
egbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaakgakbaaa
aaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaaabaaaaaa
aaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdp
amaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaa
dcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialp
aaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaa
acaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaaegaobaia
mbaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaa
acaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaaacaaaaaa
igaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaaegiccaaa
aaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaafgbfbaaa
aeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaaaeaaaaaa
baaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaaeeaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaaegacbaaa
aeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaajhcaabaaa
aeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaadiaaaaah
ccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaa
adaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaaaaaaaaaa
abeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaaegacbaaa
adaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
pgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaa
agbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaaaaaaaaaabaaaaaai
bcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaai
bcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaal
hcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaa
dgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaa
dgaaaaaihccabaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
dgaaaaaficcabaaaacaaaaaadkbabaaaafaaaaaabaaaaaaiicaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaa
egaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaa
acaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaajgaebaaa
acaaaaaacgajbaaaadaaaaaadcaaaaakhcaabaaaaeaaaaaajgaebaaaadaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaa
pgapbaaaacaaaaaaegacbaaaaeaaaaaadgaaaaagbcaabaaaafaaaaaaakiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaafaaaaaaakiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaafaaaaaaakiacaaaadaaaaaaaoaaaaaabaaaaaahccaabaaa
agaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaabaaaaaahbcaabaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaa
adaaaaaaegacbaaaafaaaaaadiaaaaaihccabaaaadaaaaaaegacbaaaagaaaaaa
pgipcaaaadaaaaaabeaaaaaadgaaaaagbcaabaaaafaaaaaabkiacaaaadaaaaaa
amaaaaaadgaaaaagccaabaaaafaaaaaabkiacaaaadaaaaaaanaaaaaadgaaaaag
ecaabaaaafaaaaaabkiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaaagaaaaaa
egacbaaaacaaaaaaegacbaaaafaaaaaabaaaaaahccaabaaaagaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaaadaaaaaa
egacbaaaafaaaaaadiaaaaaihccabaaaaeaaaaaaegacbaaaagaaaaaapgipcaaa
adaaaaaabeaaaaaadgaaaaagbcaabaaaafaaaaaackiacaaaadaaaaaaamaaaaaa
dgaaaaagccaabaaaafaaaaaackiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaa
afaaaaaackiacaaaadaaaaaaaoaaaaaabaaaaaahbcaabaaaagaaaaaaegacbaaa
acaaaaaaegacbaaaafaaaaaabaaaaaahccaabaaaagaaaaaaegacbaaaaeaaaaaa
egacbaaaafaaaaaabaaaaaahecaabaaaagaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaadiaaaaaihccabaaaafaaaaaaegacbaaaagaaaaaapgipcaaaadaaaaaa
beaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaa
aaaaaaaaegacbaaaafaaaaaabaaaaaahbccabaaaagaaaaaaegacbaaaacaaaaaa
egacbaaaafaaaaaabaaaaaaheccabaaaagaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaabaaaaaahcccabaaaagaaaaaaegacbaaaaeaaaaaaegacbaaaafaaaaaa
diaaaaaihcaabaaaafaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaakhcaabaaaafaaaaaaegiccaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaa
egacbaaaafaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaafaaaaaaegacbaaa
afaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajpcaabaaaagaaaaaakgakbaia
ebaaaaaaafaaaaaaegiocaaaacaaaaaaaeaaaaaaaaaaaaajpcaabaaaahaaaaaa
agaabaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaajpcaabaaa
afaaaaaafgafbaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaadaaaaaadiaaaaai
hcaabaaaaiaaaaaaegacbaaaadaaaaaapgipcaaaadaaaaaabeaaaaaadiaaaaai
hcaabaaaajaaaaaafgafbaaaaiaaaaaaegiccaaaadaaaaaaanaaaaaadcaaaaak
lcaabaaaaiaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaiaaaaaaegaibaaa
ajaaaaaadcaaaaakhcaabaaaaiaaaaaaegiccaaaadaaaaaaaoaaaaaakgakbaaa
aiaaaaaaegadbaaaaiaaaaaadiaaaaahpcaabaaaajaaaaaaegaobaaaafaaaaaa
fgafbaaaaiaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
afaaaaaadcaaaaajpcaabaaaafaaaaaaegaobaaaahaaaaaaegaobaaaahaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaahaaaaaaegaobaaaahaaaaaaagaabaaa
aiaaaaaaegaobaaaajaaaaaadcaaaaajpcaabaaaahaaaaaaegaobaaaagaaaaaa
kgakbaaaaiaaaaaaegaobaaaahaaaaaadcaaaaajpcaabaaaafaaaaaaegaobaaa
agaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaeeaaaaafpcaabaaaagaaaaaa
egaobaaaafaaaaaadcaaaaanpcaabaaaafaaaaaaegaobaaaafaaaaaaegiocaaa
acaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaoaaaaak
pcaabaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpegaobaaa
afaaaaaadiaaaaahpcaabaaaagaaaaaaegaobaaaagaaaaaaegaobaaaahaaaaaa
deaaaaakpcaabaaaagaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaaegaobaaa
agaaaaaadiaaaaaihcaabaaaagaaaaaafgafbaaaafaaaaaaegiccaaaacaaaaaa
ahaaaaaadcaaaaakhcaabaaaagaaaaaaegiccaaaacaaaaaaagaaaaaaagaabaaa
afaaaaaaegacbaaaagaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaacaaaaaa
aiaaaaaakgakbaaaafaaaaaaegacbaaaagaaaaaadcaaaaakhccabaaaahaaaaaa
egiccaaaacaaaaaaajaaaaaapgapbaaaafaaaaaaegacbaaaafaaaaaadiaaaaaj
hcaabaaaafaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaa
dcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaa
aeaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaa
bcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaa
afaaaaaaegacbaaaafaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaa
aaaaaaaaegacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahbccabaaaaiaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaa
baaaaaaheccabaaaaiaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaabaaaaaah
cccabaaaaiaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaaibcaabaaa
aaaaaaaabkaabaaaabaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaahicaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaaaaaaaaaa
agadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaadgaaaaaf
mccabaaaajaaaaaakgaobaaaabaaaaaaaaaaaaahdccabaaaajaaaaaakgakbaaa
aaaaaaaamgaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_7.xyz;
  tmpvar_29 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_27.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_27.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_27.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosZ0 - tmpvar_41.z);
  highp vec4 tmpvar_45;
  tmpvar_45 = (((tmpvar_42 * tmpvar_42) + (tmpvar_43 * tmpvar_43)) + (tmpvar_44 * tmpvar_44));
  highp vec4 tmpvar_46;
  tmpvar_46 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_42 * tmpvar_38.x) + (tmpvar_43 * tmpvar_38.y)) + (tmpvar_44 * tmpvar_38.z)) * inversesqrt(tmpvar_45))) * (1.0/((1.0 + (tmpvar_45 * unity_4LightAtten0)))));
  highp vec3 tmpvar_47;
  tmpvar_47 = ((((unity_LightColor[0].xyz * tmpvar_46.x) + (unity_LightColor[1].xyz * tmpvar_46.y)) + (unity_LightColor[2].xyz * tmpvar_46.z)) + (unity_LightColor[3].xyz * tmpvar_46.w));
  tmpvar_5 = tmpvar_47;
  gl_Position = (glstate_matrix_mvp * tmpvar_25);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_40).xyz * unity_Scale.w) - tmpvar_24));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_25));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float tmpvar_17;
  mediump float lightShadowDataX_18;
  highp float dist_19;
  lowp float tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = _LightShadowData.x;
  lightShadowDataX_18 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((dist_19 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_18);
  tmpvar_17 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_24;
  mediump vec3 lightDir_25;
  lightDir_25 = xlv_TEXCOORD4;
  mediump vec3 viewDir_26;
  viewDir_26 = tmpvar_23;
  mediump float atten_27;
  atten_27 = tmpvar_17;
  lowp vec4 c_28;
  lowp float backContrib_29;
  mediump float tmpvar_30;
  tmpvar_30 = dot (tmpvar_11, lightDir_25);
  mediump float tmpvar_31;
  tmpvar_31 = clamp (dot (viewDir_26, -(lightDir_25)), 0.0, 1.0);
  backContrib_29 = tmpvar_31;
  mediump float tmpvar_32;
  tmpvar_32 = clamp (-(tmpvar_30), 0.0, 1.0);
  lowp float tmpvar_33;
  tmpvar_33 = mix (tmpvar_32, backContrib_29, _TranslucencyViewDependency);
  backContrib_29 = tmpvar_33;
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_33 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_9 * ((tmpvar_34 * 2.0) + max (0.0, ((tmpvar_30 * 0.6) + 0.4))));
  c_28.xyz = tmpvar_35;
  mediump vec3 tmpvar_36;
  tmpvar_36 = ((c_28.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_25 + viewDir_26)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_28.xyz = tmpvar_36;
  mediump vec3 tmpvar_37;
  tmpvar_37 = (c_28.xyz * mix (2.0, (atten_27 * 2.0), _ShadowStrength));
  c_28.xyz = tmpvar_37;
  tmpvar_24 = c_28;
  c_1 = tmpvar_24;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec4 tmpvar_28;
  tmpvar_28 = (glstate_matrix_mvp * tmpvar_25);
  highp vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_29 = tmpvar_7.xyz;
  tmpvar_30 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_31;
  tmpvar_31[0].x = tmpvar_29.x;
  tmpvar_31[0].y = tmpvar_30.x;
  tmpvar_31[0].z = tmpvar_27.x;
  tmpvar_31[1].x = tmpvar_29.y;
  tmpvar_31[1].y = tmpvar_30.y;
  tmpvar_31[1].z = tmpvar_27.y;
  tmpvar_31[2].x = tmpvar_29.z;
  tmpvar_31[2].y = tmpvar_30.z;
  tmpvar_31[2].z = tmpvar_27.z;
  vec3 v_32;
  v_32.x = _Object2World[0].x;
  v_32.y = _Object2World[1].x;
  v_32.z = _Object2World[2].x;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_31 * v_32) * unity_Scale.w);
  tmpvar_1 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].y;
  v_34.y = _Object2World[1].y;
  v_34.z = _Object2World[2].y;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_31 * v_34) * unity_Scale.w);
  tmpvar_2 = tmpvar_35;
  vec3 v_36;
  v_36.x = _Object2World[0].z;
  v_36.y = _Object2World[1].z;
  v_36.z = _Object2World[2].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_31 * v_36) * unity_Scale.w);
  tmpvar_3 = tmpvar_37;
  mat3 tmpvar_38;
  tmpvar_38[0] = _Object2World[0].xyz;
  tmpvar_38[1] = _Object2World[1].xyz;
  tmpvar_38[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_38 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_31 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.w = 1.0;
  tmpvar_41.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_42;
  tmpvar_42 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosX0 - tmpvar_42.x);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosY0 - tmpvar_42.y);
  highp vec4 tmpvar_45;
  tmpvar_45 = (unity_4LightPosZ0 - tmpvar_42.z);
  highp vec4 tmpvar_46;
  tmpvar_46 = (((tmpvar_43 * tmpvar_43) + (tmpvar_44 * tmpvar_44)) + (tmpvar_45 * tmpvar_45));
  highp vec4 tmpvar_47;
  tmpvar_47 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_43 * tmpvar_39.x) + (tmpvar_44 * tmpvar_39.y)) + (tmpvar_45 * tmpvar_39.z)) * inversesqrt(tmpvar_46))) * (1.0/((1.0 + (tmpvar_46 * unity_4LightAtten0)))));
  highp vec3 tmpvar_48;
  tmpvar_48 = ((((unity_LightColor[0].xyz * tmpvar_47.x) + (unity_LightColor[1].xyz * tmpvar_47.y)) + (unity_LightColor[2].xyz * tmpvar_47.z)) + (unity_LightColor[3].xyz * tmpvar_47.w));
  tmpvar_5 = tmpvar_48;
  highp vec4 o_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_28 * 0.5);
  highp vec2 tmpvar_51;
  tmpvar_51.x = tmpvar_50.x;
  tmpvar_51.y = (tmpvar_50.y * _ProjectionParams.x);
  o_49.xy = (tmpvar_51 + tmpvar_50.w);
  o_49.zw = tmpvar_28.zw;
  gl_Position = tmpvar_28;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_31 * (((_World2Object * tmpvar_41).xyz * unity_Scale.w) - tmpvar_24));
  xlv_TEXCOORD7 = o_49;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, normal_11);
  tmpvar_12.y = dot (tmpvar_3, normal_11);
  tmpvar_12.z = dot (tmpvar_4, normal_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float tmpvar_17;
  tmpvar_17 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_19;
  mediump vec3 lightDir_20;
  lightDir_20 = xlv_TEXCOORD4;
  mediump vec3 viewDir_21;
  viewDir_21 = tmpvar_18;
  mediump float atten_22;
  atten_22 = tmpvar_17;
  lowp vec4 c_23;
  lowp float backContrib_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (normal_11, lightDir_20);
  mediump float tmpvar_26;
  tmpvar_26 = clamp (dot (viewDir_21, -(lightDir_20)), 0.0, 1.0);
  backContrib_24 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp (-(tmpvar_25), 0.0, 1.0);
  lowp float tmpvar_28;
  tmpvar_28 = mix (tmpvar_27, backContrib_24, _TranslucencyViewDependency);
  backContrib_24 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_9 * ((tmpvar_29 * 2.0) + max (0.0, ((tmpvar_25 * 0.6) + 0.4))));
  c_23.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((c_23.xyz + (pow (max (0.0, dot (normal_11, normalize((lightDir_20 + viewDir_21)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_23.xyz = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (c_23.xyz * mix (2.0, (atten_22 * 2.0), _ShadowStrength));
  c_23.xyz = tmpvar_32;
  tmpvar_19 = c_23;
  c_1 = tmpvar_19;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 669
uniform highp vec4 _MainTex_ST;
#line 694
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 670
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 673
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 677
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 681
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 685
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 689
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 669
uniform highp vec4 _MainTex_ST;
#line 694
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 695
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 698
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    surfIN.TtoW1 = IN.TtoW1.xyz;
    #line 702
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 706
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 710
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 714
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp float tmpvar_7;
  tmpvar_7 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = _glesNormal;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_10;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = _glesNormal.xy;
  highp vec4 tmpvar_11;
  tmpvar_11 = (_glesVertex + ((tmpvar_10 * glstate_matrix_invtrans_modelview0) * tmpvar_7));
  highp vec3 tmpvar_12;
  tmpvar_12 = mix (_glesNormal, normalize((tmpvar_8 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_7));
  highp vec4 tmpvar_13;
  tmpvar_13.w = -1.0;
  tmpvar_13.xyz = normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_14;
  tmpvar_14 = mix (_glesTANGENT, tmpvar_13, vec4(tmpvar_7));
  tmpvar_5.w = tmpvar_11.w;
  tmpvar_6.w = tmpvar_14.w;
  tmpvar_5.xyz = (tmpvar_11.xyz * _Scale.xyz);
  highp vec4 pos_15;
  pos_15.w = tmpvar_5.w;
  highp vec3 bend_16;
  vec4 v_17;
  v_17.x = _Object2World[0].w;
  v_17.y = _Object2World[1].w;
  v_17.z = _Object2World[2].w;
  v_17.w = _Object2World[3].w;
  highp float tmpvar_18;
  tmpvar_18 = (dot (v_17.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_5.xyz, vec3((_glesColor.y + tmpvar_18)));
  tmpvar_19.y = tmpvar_18;
  highp vec4 tmpvar_20;
  tmpvar_20 = abs(((fract((((fract(((_Time.yy + tmpvar_19).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * tmpvar_20) * (3.0 - (2.0 * tmpvar_20)));
  highp vec2 tmpvar_22;
  tmpvar_22 = (tmpvar_21.xz + tmpvar_21.yw);
  bend_16.xz = ((_glesColor.y * 0.1) * tmpvar_12).xz;
  bend_16.y = (_glesMultiTexCoord1.y * 0.3);
  pos_15.xyz = (tmpvar_5.xyz + (((tmpvar_22.xyx * bend_16) + ((_Wind.xyz * tmpvar_22.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_15.xyz = (pos_15.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_23;
  tmpvar_23 = mix ((pos_15.xyz - ((dot (_SquashPlaneNormal.xyz, pos_15.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_15.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_23;
  tmpvar_5 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_25.w = _glesColor.w;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_12);
  tmpvar_6.xyz = normalize(tmpvar_14.xyz);
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_6.xyz;
  tmpvar_28 = (((tmpvar_26.yzx * tmpvar_6.zxy) - (tmpvar_26.zxy * tmpvar_6.yzx)) * tmpvar_14.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_26.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_26.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_26.z;
  vec3 v_30;
  v_30.x = _Object2World[0].x;
  v_30.y = _Object2World[1].x;
  v_30.z = _Object2World[2].x;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_29 * v_30) * unity_Scale.w);
  tmpvar_1 = tmpvar_31;
  vec3 v_32;
  v_32.x = _Object2World[0].y;
  v_32.y = _Object2World[1].y;
  v_32.z = _Object2World[2].y;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((tmpvar_29 * v_32) * unity_Scale.w);
  tmpvar_2 = tmpvar_33;
  vec3 v_34;
  v_34.x = _Object2World[0].z;
  v_34.y = _Object2World[1].z;
  v_34.z = _Object2World[2].z;
  highp vec3 tmpvar_35;
  tmpvar_35 = ((tmpvar_29 * v_34) * unity_Scale.w);
  tmpvar_3 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_36;
  highp vec4 tmpvar_37;
  tmpvar_37.w = 1.0;
  tmpvar_37.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_24);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_25;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD6 = (tmpvar_29 * (((_World2Object * tmpvar_37).xyz * unity_Scale.w) - tmpvar_23));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_24));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  highp float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_21;
  mediump vec3 lightDir_22;
  lightDir_22 = xlv_TEXCOORD4;
  mediump vec3 viewDir_23;
  viewDir_23 = tmpvar_20;
  mediump float atten_24;
  atten_24 = shadow_17;
  lowp vec4 c_25;
  lowp float backContrib_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_11, lightDir_22);
  mediump float tmpvar_28;
  tmpvar_28 = clamp (dot (viewDir_23, -(lightDir_22)), 0.0, 1.0);
  backContrib_26 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (-(tmpvar_27), 0.0, 1.0);
  lowp float tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, backContrib_26, _TranslucencyViewDependency);
  backContrib_26 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_30 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_9 * ((tmpvar_31 * 2.0) + max (0.0, ((tmpvar_27 * 0.6) + 0.4))));
  c_25.xyz = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((c_25.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_22 + viewDir_23)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_25.xyz = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_25.xyz * mix (2.0, (atten_24 * 2.0), _ShadowStrength));
  c_25.xyz = tmpvar_34;
  tmpvar_21 = c_25;
  c_1 = tmpvar_21;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 669
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 670
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 673
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 677
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 681
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 685
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 690
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 669
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 693
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 695
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    #line 699
    surfIN.TtoW1 = IN.TtoW1.xyz;
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    #line 703
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    #line 707
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    #line 711
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    #line 715
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  highp float tmpvar_8;
  tmpvar_8 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_9;
  tmpvar_9.w = 0.0;
  tmpvar_9.xyz = _glesNormal;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_11;
  tmpvar_11.zw = vec2(0.0, 0.0);
  tmpvar_11.xy = _glesNormal.xy;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_glesVertex + ((tmpvar_11 * glstate_matrix_invtrans_modelview0) * tmpvar_8));
  highp vec3 tmpvar_13;
  tmpvar_13 = mix (_glesNormal, normalize((tmpvar_9 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_8));
  highp vec4 tmpvar_14;
  tmpvar_14.w = -1.0;
  tmpvar_14.xyz = normalize((tmpvar_10 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_15;
  tmpvar_15 = mix (_glesTANGENT, tmpvar_14, vec4(tmpvar_8));
  tmpvar_6.w = tmpvar_12.w;
  tmpvar_7.w = tmpvar_15.w;
  tmpvar_6.xyz = (tmpvar_12.xyz * _Scale.xyz);
  highp vec4 pos_16;
  pos_16.w = tmpvar_6.w;
  highp vec3 bend_17;
  vec4 v_18;
  v_18.x = _Object2World[0].w;
  v_18.y = _Object2World[1].w;
  v_18.z = _Object2World[2].w;
  v_18.w = _Object2World[3].w;
  highp float tmpvar_19;
  tmpvar_19 = (dot (v_18.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_20;
  tmpvar_20.x = dot (tmpvar_6.xyz, vec3((_glesColor.y + tmpvar_19)));
  tmpvar_20.y = tmpvar_19;
  highp vec4 tmpvar_21;
  tmpvar_21 = abs(((fract((((fract(((_Time.yy + tmpvar_20).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * tmpvar_21) * (3.0 - (2.0 * tmpvar_21)));
  highp vec2 tmpvar_23;
  tmpvar_23 = (tmpvar_22.xz + tmpvar_22.yw);
  bend_17.xz = ((_glesColor.y * 0.1) * tmpvar_13).xz;
  bend_17.y = (_glesMultiTexCoord1.y * 0.3);
  pos_16.xyz = (tmpvar_6.xyz + (((tmpvar_23.xyx * bend_17) + ((_Wind.xyz * tmpvar_23.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_16.xyz = (pos_16.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_24;
  tmpvar_24 = mix ((pos_16.xyz - ((dot (_SquashPlaneNormal.xyz, pos_16.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_16.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_24;
  tmpvar_6 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.xyz = vec3(1.0, 1.0, 1.0);
  tmpvar_26.w = _glesColor.w;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(tmpvar_13);
  tmpvar_7.xyz = normalize(tmpvar_15.xyz);
  highp vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_28 = tmpvar_7.xyz;
  tmpvar_29 = (((tmpvar_27.yzx * tmpvar_7.zxy) - (tmpvar_27.zxy * tmpvar_7.yzx)) * tmpvar_15.w);
  highp mat3 tmpvar_30;
  tmpvar_30[0].x = tmpvar_28.x;
  tmpvar_30[0].y = tmpvar_29.x;
  tmpvar_30[0].z = tmpvar_27.x;
  tmpvar_30[1].x = tmpvar_28.y;
  tmpvar_30[1].y = tmpvar_29.y;
  tmpvar_30[1].z = tmpvar_27.y;
  tmpvar_30[2].x = tmpvar_28.z;
  tmpvar_30[2].y = tmpvar_29.z;
  tmpvar_30[2].z = tmpvar_27.z;
  vec3 v_31;
  v_31.x = _Object2World[0].x;
  v_31.y = _Object2World[1].x;
  v_31.z = _Object2World[2].x;
  highp vec3 tmpvar_32;
  tmpvar_32 = ((tmpvar_30 * v_31) * unity_Scale.w);
  tmpvar_1 = tmpvar_32;
  vec3 v_33;
  v_33.x = _Object2World[0].y;
  v_33.y = _Object2World[1].y;
  v_33.z = _Object2World[2].y;
  highp vec3 tmpvar_34;
  tmpvar_34 = ((tmpvar_30 * v_33) * unity_Scale.w);
  tmpvar_2 = tmpvar_34;
  vec3 v_35;
  v_35.x = _Object2World[0].z;
  v_35.y = _Object2World[1].z;
  v_35.z = _Object2World[2].z;
  highp vec3 tmpvar_36;
  tmpvar_36 = ((tmpvar_30 * v_35) * unity_Scale.w);
  tmpvar_3 = tmpvar_36;
  mat3 tmpvar_37;
  tmpvar_37[0] = _Object2World[0].xyz;
  tmpvar_37[1] = _Object2World[1].xyz;
  tmpvar_37[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_37 * (tmpvar_27 * unity_Scale.w));
  highp vec3 tmpvar_39;
  tmpvar_39 = (tmpvar_30 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_4 = tmpvar_39;
  highp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_41;
  tmpvar_41 = (_Object2World * tmpvar_25).xyz;
  highp vec4 tmpvar_42;
  tmpvar_42 = (unity_4LightPosX0 - tmpvar_41.x);
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_4LightPosY0 - tmpvar_41.y);
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_4LightPosZ0 - tmpvar_41.z);
  highp vec4 tmpvar_45;
  tmpvar_45 = (((tmpvar_42 * tmpvar_42) + (tmpvar_43 * tmpvar_43)) + (tmpvar_44 * tmpvar_44));
  highp vec4 tmpvar_46;
  tmpvar_46 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_42 * tmpvar_38.x) + (tmpvar_43 * tmpvar_38.y)) + (tmpvar_44 * tmpvar_38.z)) * inversesqrt(tmpvar_45))) * (1.0/((1.0 + (tmpvar_45 * unity_4LightAtten0)))));
  highp vec3 tmpvar_47;
  tmpvar_47 = ((((unity_LightColor[0].xyz * tmpvar_46.x) + (unity_LightColor[1].xyz * tmpvar_46.y)) + (unity_LightColor[2].xyz * tmpvar_46.z)) + (unity_LightColor[3].xyz * tmpvar_46.w));
  tmpvar_5 = tmpvar_47;
  gl_Position = (glstate_matrix_mvp * tmpvar_25);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = tmpvar_4;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = (tmpvar_30 * (((_World2Object * tmpvar_40).xyz * unity_Scale.w) - tmpvar_24));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_25));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying lowp vec3 xlv_TEXCOORD5;
varying lowp vec3 xlv_TEXCOORD4;
varying lowp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 c_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  mediump vec3 tmpvar_4;
  tmpvar_2 = xlv_TEXCOORD1;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  mediump vec3 tmpvar_12;
  tmpvar_12.x = dot (tmpvar_2, tmpvar_11);
  tmpvar_12.y = dot (tmpvar_3, tmpvar_11);
  tmpvar_12.z = dot (tmpvar_4, tmpvar_11);
  worldNormal_7 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_13.w;
  diff_ibl_6.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_5 * xlv_COLOR0.w);
  tmpvar_5 = tmpvar_15;
  lowp float x_16;
  x_16 = (tmpvar_8.w - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp float shadow_17;
  lowp float tmpvar_18;
  tmpvar_18 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz);
  highp float tmpvar_19;
  tmpvar_19 = (_LightShadowData.x + (tmpvar_18 * (1.0 - _LightShadowData.x)));
  shadow_17 = tmpvar_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize(xlv_TEXCOORD6);
  mediump vec4 tmpvar_21;
  mediump vec3 lightDir_22;
  lightDir_22 = xlv_TEXCOORD4;
  mediump vec3 viewDir_23;
  viewDir_23 = tmpvar_20;
  mediump float atten_24;
  atten_24 = shadow_17;
  lowp vec4 c_25;
  lowp float backContrib_26;
  mediump float tmpvar_27;
  tmpvar_27 = dot (tmpvar_11, lightDir_22);
  mediump float tmpvar_28;
  tmpvar_28 = clamp (dot (viewDir_23, -(lightDir_22)), 0.0, 1.0);
  backContrib_26 = tmpvar_28;
  mediump float tmpvar_29;
  tmpvar_29 = clamp (-(tmpvar_27), 0.0, 1.0);
  lowp float tmpvar_30;
  tmpvar_30 = mix (tmpvar_29, backContrib_26, _TranslucencyViewDependency);
  backContrib_26 = tmpvar_30;
  lowp vec3 tmpvar_31;
  tmpvar_31 = ((tmpvar_30 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_32;
  tmpvar_32 = (tmpvar_9 * ((tmpvar_31 * 2.0) + max (0.0, ((tmpvar_27 * 0.6) + 0.4))));
  c_25.xyz = tmpvar_32;
  mediump vec3 tmpvar_33;
  tmpvar_33 = ((c_25.xyz + (pow (max (0.0, dot (tmpvar_11, normalize((lightDir_22 + viewDir_23)))), (_Shininess * 128.0)) * tmpvar_10.w)) * _LightColor0.xyz);
  c_25.xyz = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = (c_25.xyz * mix (2.0, (atten_24 * 2.0), _ShadowStrength));
  c_25.xyz = tmpvar_34;
  tmpvar_21 = c_25;
  c_1 = tmpvar_21;
  c_1.xyz = (c_1.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_1.xyz = (c_1.xyz + tmpvar_15);
  c_1.w = tmpvar_8.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 669
uniform highp vec4 _MainTex_ST;
#line 694
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 670
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 673
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 677
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.TtoW0 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 0).xyz) * unity_Scale.w);
    o.TtoW1 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 1).xyz) * unity_Scale.w);
    o.TtoW2 = ((rotation * xll_matrixindex_mf3x3_i (mat3( _Object2World), 2).xyz) * unity_Scale.w);
    #line 681
    o.color = v.color;
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 685
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 689
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec4 xlv_COLOR0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out lowp vec3 xlv_TEXCOORD3;
out lowp vec3 xlv_TEXCOORD4;
out lowp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_COLOR0 = vec4(xl_retval.color);
    xlv_TEXCOORD1 = vec3(xl_retval.TtoW0);
    xlv_TEXCOORD2 = vec3(xl_retval.TtoW1);
    xlv_TEXCOORD3 = vec3(xl_retval.TtoW2);
    xlv_TEXCOORD4 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD5 = vec3(xl_retval.vlight);
    xlv_TEXCOORD6 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 627
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
    mediump vec3 TtoW0;
    mediump vec3 TtoW1;
    mediump vec3 TtoW2;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec4 color;
    lowp vec3 TtoW0;
    lowp vec3 TtoW1;
    lowp vec3 TtoW2;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 669
uniform highp vec4 _MainTex_ST;
#line 694
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = vec3( dot( IN.TtoW0, o.Normal), dot( IN.TtoW1, o.Normal), dot( IN.TtoW2, o.Normal));
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 695
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 698
    surfIN.uv_MainTex = IN.pack0.xy;
    surfIN.worldNormal = vec3( 0.0);
    surfIN.TtoW0 = IN.TtoW0.xyz;
    surfIN.TtoW1 = IN.TtoW1.xyz;
    #line 702
    surfIN.TtoW2 = IN.TtoW2.xyz;
    surfIN.color = IN.color;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 706
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 710
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 714
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec4 xlv_COLOR0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in lowp vec3 xlv_TEXCOORD3;
in lowp vec3 xlv_TEXCOORD4;
in lowp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_COLOR0);
    xlt_IN.TtoW0 = vec3(xlv_TEXCOORD1);
    xlt_IN.TtoW1 = vec3(xlv_TEXCOORD2);
    xlt_IN.TtoW2 = vec3(xlv_TEXCOORD3);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD4);
    xlt_IN.vlight = vec3(xlv_TEXCOORD5);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 20 [unity_Scale]
Vector 21 [_Scale]
Vector 22 [_SquashPlaneNormal]
Float 23 [_SquashAmount]
Vector 24 [_Wind]
Vector 25 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 86 ALU
PARAM c[28] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..25],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R3.w, R3, R3;
ABS R0.w, vertex.attrib[14];
ADD R0.w, -R0, c[0].y;
MAD R0.xyz, R0, R0.w, vertex.position;
MOV R1.x, c[0].y;
DP3 R1.x, R1.x, c[12];
ADD R1.x, vertex.color, R1;
ADD R1.z, vertex.color.y, R1.x;
MUL R0.xyz, R0, c[21];
MOV R1.y, R1.x;
DP3 R1.x, R0, R1.z;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[26];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
RSQ R3.w, R3.w;
ADD R2, R2, c[27].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
MAD R2.xyz, R3.w, R3, -vertex.normal;
MAD R3.xyz, R0.w, R2, vertex.normal;
ADD R5.xy, R1.xzzw, R1.ywzw;
MUL R1.xyz, R5.y, c[24];
MUL R2.xy, vertex.color.y, R3.xzzw;
MUL R4.xyz, vertex.texcoord[1].y, R1;
MUL R2.xz, R2.xyyw, c[27].z;
MUL R1, vertex.attrib[14].y, c[6];
MUL R2.y, vertex.texcoord[1], c[27];
MAD R2.xyz, R5.xyxw, R2, R4;
MAD R0.xyz, R2, c[24].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[24], R0;
DP3 R0.x, R2, c[22];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R0.y, R1, R1;
RSQ R0.y, R0.y;
MOV R3.w, c[0].y;
MUL R1.xyz, R0.y, R1;
ADD R0.x, R0, c[22].w;
MUL R0.xyz, R0.x, c[22];
ADD R4.xyz, -R0, R2;
MOV R1.w, c[27];
ADD R1, -vertex.attrib[14], R1;
MAD R1, R0.w, R1, vertex.attrib[14];
DP3 R2.x, R1, R1;
DP3 R0.w, R3, R3;
RSQ R2.x, R2.x;
MAD R0.xyz, R0, c[23].x, R4;
MUL R2.xyz, R2.x, R1;
RSQ R0.w, R0.w;
MUL R1.xyz, R0.w, R3;
MOV R0.w, c[0].y;
MUL R3.xyz, R1.zxyw, R2.yzxw;
MAD R5.xyz, R1.yzxw, R2.zxyw, -R3;
MOV R3.xyz, c[18];
DP4 R4.z, R3, c[15];
DP4 R4.y, R3, c[14];
DP4 R4.x, R3, c[13];
MAD R4.xyz, R4, c[20].w, -R0;
MUL R3.xyz, R5, R1.w;
DP3 result.texcoord[3].y, R3, R4;
DP3 result.texcoord[3].z, R1, R4;
DP3 result.texcoord[3].x, R2, R4;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MOV R0, c[19];
DP4 R4.z, R0, c[15];
DP4 R4.x, R0, c[13];
DP4 R4.y, R0, c[14];
DP3 result.texcoord[1].y, R4, R3;
DP3 result.texcoord[1].z, R1, R4;
DP3 result.texcoord[1].x, R4, R2;
MOV result.texcoord[2].xyz, c[0].x;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[25], c[25].zwzw;
END
# 86 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 19 [unity_Scale]
Vector 20 [_Scale]
Vector 21 [_SquashPlaneNormal]
Float 22 [_SquashAmount]
Vector 23 [_Wind]
Vector 24 [_MainTex_ST]
"vs_3_0
; 91 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c25, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c26, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c27, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c28, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
mov r1.xyz, c11
dp3 r1.x, c25.y, r1
add r1.x, v5, r1
add r0.xyz, r2, c25.x
mad r2, v2.z, c6, r2
add r3, r2, c25.x
dp4 r3.w, r3, r3
abs r0.w, v1
add r0.w, -r0, c25.y
mad r0.xyz, r0, r0.w, v0
add r1.z, v5.y, r1.x
mul r0.xyz, r0, c20
mov r1.y, r1.x
dp3 r1.x, r0, r1.z
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c26
frc r1, r1
mad r1, r1, c25.z, c25.w
frc r1, r1
mad r1, r1, c27.x, c27.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c27.x, c27.z
mul r1, r2, r1
rsq r3.w, r3.w
add r5.xy, r1.xzzw, r1.ywzw
mad r2.xyz, r3.w, r3, -v2
mad r1.xyz, r0.w, r2, v2
mul r2.xyz, r5.y, c23
mul r3.xy, v5.y, r1.xzzw
mul r4.xyz, v4.y, r2
mul r3.xz, r3.xyyw, c28.x
mul r2, v1.y, c5
mul r3.y, v4, c27.w
mad r3.xyz, r5.xyxw, r3, r4
mad r0.xyz, r3, c23.w, r0
mad r3.xyz, v4.x, c23, r0
dp3 r0.x, r3, c21
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c25.x
dp4 r0.y, r2, r2
rsq r0.y, r0.y
mul r2.xyz, r0.y, r2
add r0.x, r0, c21.w
mul r0.xyz, r0.x, c21
add r4.xyz, -r0, r3
mov r2.w, c27.y
add r2, -v1, r2
mad r2, r0.w, r2, v1
dp3 r1.w, r2, r2
dp3 r0.w, r1, r1
rsq r1.w, r1.w
mul r3.xyz, r1.w, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r1
mad r0.xyz, r0, c22.x, r4
mov r0.w, c25.y
mul r1.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r1
mov r1.w, c25.y
mov r1.xyz, c17
dp4 r5.z, r1, c14
dp4 r5.y, r1, c13
dp4 r5.x, r1, c12
mad r1.xyz, r5, c19.w, -r0
mul r4.xyz, r4, r2.w
dp3 o4.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c18, r0
mov r0, c13
dp4 r5.y, c18, r0
dp3 o4.z, r2, r1
dp3 o4.x, r3, r1
mov r1, c12
dp4 r5.x, c18, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mov o3.xyz, c25.x
mad o1.xy, v3, c24, c24.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 86 instructions, 5 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefieceddnahlkkfaeaobpoaiilkofkafijjpahjabaaaaaagmanaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcnaalaaaaeaaaabaa
peacaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
acaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadgaaaaaihccabaaaadaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaa
aeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaa
adaaaaaabdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaa
adaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaeaaaaaa
egacbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaaeaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaadaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_23 = tmpvar_3.xyz;
  tmpvar_24 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_25;
  tmpvar_25[0].x = tmpvar_23.x;
  tmpvar_25[0].y = tmpvar_24.x;
  tmpvar_25[0].z = tmpvar_22.x;
  tmpvar_25[1].x = tmpvar_23.y;
  tmpvar_25[1].y = tmpvar_24.y;
  tmpvar_25[1].z = tmpvar_22.y;
  tmpvar_25[2].x = tmpvar_23.z;
  tmpvar_25[2].y = tmpvar_24.z;
  tmpvar_25[2].z = tmpvar_22.z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_21);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_25 * (((_World2Object * tmpvar_27).xyz * unity_Scale.w) - tmpvar_20));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_28;
  mediump vec3 lightDir_29;
  lightDir_29 = xlv_TEXCOORD1;
  mediump vec3 viewDir_30;
  viewDir_30 = tmpvar_27;
  lowp vec4 c_31;
  lowp float backContrib_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_8, lightDir_29);
  mediump float tmpvar_34;
  tmpvar_34 = clamp (dot (viewDir_30, -(lightDir_29)), 0.0, 1.0);
  backContrib_32 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = clamp (-(tmpvar_33), 0.0, 1.0);
  lowp float tmpvar_36;
  tmpvar_36 = mix (tmpvar_35, backContrib_32, _TranslucencyViewDependency);
  backContrib_32 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_36 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_6 * ((tmpvar_37 * 2.0) + max (0.0, ((tmpvar_33 * 0.6) + 0.4))));
  c_31.xyz = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((c_31.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_29 + viewDir_30)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_31.xyz = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_31.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_31.xyz = tmpvar_40;
  tmpvar_28 = c_31;
  c_1 = tmpvar_28;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_23 = tmpvar_3.xyz;
  tmpvar_24 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_25;
  tmpvar_25[0].x = tmpvar_23.x;
  tmpvar_25[0].y = tmpvar_24.x;
  tmpvar_25[0].z = tmpvar_22.x;
  tmpvar_25[1].x = tmpvar_23.y;
  tmpvar_25[1].y = tmpvar_24.y;
  tmpvar_25[1].z = tmpvar_22.y;
  tmpvar_25[2].x = tmpvar_23.z;
  tmpvar_25[2].y = tmpvar_24.z;
  tmpvar_25[2].z = tmpvar_22.z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_21);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_25 * (((_World2Object * tmpvar_27).xyz * unity_Scale.w) - tmpvar_20));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_4 = normal_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_28;
  mediump vec3 lightDir_29;
  lightDir_29 = xlv_TEXCOORD1;
  mediump vec3 viewDir_30;
  viewDir_30 = tmpvar_27;
  lowp vec4 c_31;
  lowp float backContrib_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (normal_8, lightDir_29);
  mediump float tmpvar_34;
  tmpvar_34 = clamp (dot (viewDir_30, -(lightDir_29)), 0.0, 1.0);
  backContrib_32 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = clamp (-(tmpvar_33), 0.0, 1.0);
  lowp float tmpvar_36;
  tmpvar_36 = mix (tmpvar_35, backContrib_32, _TranslucencyViewDependency);
  backContrib_32 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_36 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_6 * ((tmpvar_37 * 2.0) + max (0.0, ((tmpvar_33 * 0.6) + 0.4))));
  c_31.xyz = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((c_31.xyz + (pow (max (0.0, dot (normal_8, normalize((lightDir_29 + viewDir_30)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_31.xyz = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_31.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_31.xyz = tmpvar_40;
  tmpvar_28 = c_31;
  c_1 = tmpvar_28;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 650
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 651
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 654
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 658
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 662
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    #line 666
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 650
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 639
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 671
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 675
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 679
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 683
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_ProjectionParams]
Vector 20 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Scale]
Vector 23 [_SquashPlaneNormal]
Float 24 [_SquashAmount]
Vector 25 [_Wind]
Vector 26 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 91 ALU
PARAM c[30] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..26],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 },
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R3.w, -R1.x, c[0].y;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R0.xyz, R0, R3.w, vertex.position;
ADD R4, R2, c[0].x;
MUL R0.xyz, R0, c[22];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R4, R4;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[27];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[28].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R4, -vertex.normal;
ADD R4.xy, R1.xzzw, R1.ywzw;
MAD R3.xyz, R3.w, R2, vertex.normal;
MUL R1.xyz, R4.y, c[25];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R4.zw, vertex.color.y, R3.xyxz;
MOV R0.w, c[0].y;
MUL R1.xz, R4.zyww, c[28].z;
MUL R1.y, vertex.texcoord[1], c[28];
MAD R1.xyz, R4.xyxw, R1, R2;
MAD R0.xyz, R1, c[25].w, R0;
MAD R1.xyz, vertex.texcoord[1].x, c[25], R0;
DP3 R0.x, R1, c[23];
ADD R0.x, R0, c[23].w;
MUL R0.xyz, R0.x, c[23];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[24].x, R1;
MUL R1, vertex.attrib[14].y, c[6];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R1.w, R1, R1;
RSQ R2.z, R1.w;
MUL R1.xyz, R2.z, R1;
MOV R1.w, c[28];
ADD R1, -vertex.attrib[14], R1;
DP4 R2.w, R0, c[4];
DP4 R2.z, R0, c[3];
DP4 R2.y, R0, c[2];
DP4 R2.x, R0, c[1];
MUL R4.xyz, R2.xyww, c[29].x;
MUL R4.y, R4, c[19].x;
DP3 R0.w, R3, R3;
RSQ R0.w, R0.w;
MAD R1, R3.w, R1, vertex.attrib[14];
MOV result.position, R2;
DP3 R2.x, R1, R1;
RSQ R2.x, R2.x;
MOV result.texcoord[4].zw, R2;
MUL R1.xyz, R2.x, R1;
MUL R3.xyz, R0.w, R3;
ADD result.texcoord[4].xy, R4, R4.z;
MUL R4.xyz, R3.zxyw, R1.yzxw;
MAD R4.xyz, R3.yzxw, R1.zxyw, -R4;
MOV R2.w, c[0].y;
MOV R2.xyz, c[18];
DP4 R5.z, R2, c[15];
DP4 R5.x, R2, c[13];
DP4 R5.y, R2, c[14];
MAD R0.xyz, R5, c[21].w, -R0;
MUL R4.xyz, R4, R1.w;
DP3 result.texcoord[3].y, R4, R0;
DP3 result.texcoord[3].z, R3, R0;
MOV R2, c[20];
DP3 result.texcoord[3].x, R1, R0;
DP4 R0.z, R2, c[15];
DP4 R0.x, R2, c[13];
DP4 R0.y, R2, c[14];
DP3 result.texcoord[1].y, R0, R4;
DP3 result.texcoord[1].z, R3, R0;
DP3 result.texcoord[1].x, R0, R1;
MOV result.texcoord[2].xyz, c[0].x;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[26], c[26].zwzw;
END
# 91 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_ProjectionParams]
Vector 19 [_ScreenParams]
Vector 20 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 21 [unity_Scale]
Vector 22 [_Scale]
Vector 23 [_SquashPlaneNormal]
Float 24 [_SquashAmount]
Vector 25 [_Wind]
Vector 26 [_MainTex_ST]
"vs_3_0
; 96 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
def c27, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c28, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c29, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c30, 0.10000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c27.x
abs r0.w, v1
add r4.w, -r0, c27.y
mov r1.xyz, c11
dp3 r0.w, c27.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r4.w, v0
add r3, r2, c27.x
mul r0.xyz, r0, c22
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp3 r1.x, r0, r1.x
dp4 r0.w, r3, r3
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c28
frc r1, r1
mad r1, r1, c27.z, c27.w
frc r1, r1
mad r1, r1, c29.x, c29.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c29.x, c29.z
mul r1, r2, r1
add r4.xy, r1.xzzw, r1.ywzw
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
mad r3.xyz, r4.w, r2, v2
mul r1.xyz, r4.y, c25
mul r2.xyz, v4.y, r1
mul r5.xy, v5.y, r3.xzzw
mov r0.w, c27.y
mul r1.xz, r5.xyyw, c30.x
mul r1.y, v4, c29.w
mad r1.xyz, r4.xyxw, r1, r2
mad r0.xyz, r1, c25.w, r0
mad r1.xyz, v4.x, c25, r0
dp3 r0.x, r1, c23
add r0.x, r0, c23.w
mul r0.xyz, r0.x, c23
add r1.xyz, -r0, r1
mad r0.xyz, r0, c24.x, r1
mul r1, v1.y, c5
mad r1, v1.x, c4, r1
mad r1, v1.z, c6, r1
add r1, r1, c27.x
dp4 r1.w, r1, r1
rsq r2.z, r1.w
mul r1.xyz, r2.z, r1
mov r1.w, c29.y
add r1, -v1, r1
dp4 r2.w, r0, c3
dp4 r2.z, r0, c2
dp4 r2.y, r0, c1
dp4 r2.x, r0, c0
mul r4.xyz, r2.xyww, c30.y
mul r4.y, r4, c18.x
dp3 r0.w, r3, r3
rsq r0.w, r0.w
mul r3.xyz, r0.w, r3
mad r1, r4.w, r1, v1
mov o0, r2
dp3 r2.x, r1, r1
rsq r2.x, r2.x
mov o5.zw, r2
mul r1.xyz, r2.x, r1
mad o5.xy, r4.z, c19.zwzw, r4
mul r4.xyz, r3.zxyw, r1.yzxw
mad r4.xyz, r3.yzxw, r1.zxyw, -r4
mov r2.w, c27.y
mov r2.xyz, c17
dp4 r5.z, r2, c14
dp4 r5.x, r2, c12
dp4 r5.y, r2, c13
mad r0.xyz, r5, c21.w, -r0
mul r4.xyz, r4, r1.w
mov r2, c14
dp4 r5.z, c20, r2
mov r2, c12
dp4 r5.x, c20, r2
dp3 o4.y, r4, r0
dp3 o4.z, r3, r0
dp3 o4.x, r1, r0
mov r0, c13
dp4 r5.y, c20, r0
dp3 o2.y, r5, r4
dp3 o2.z, r3, r5
dp3 o2.x, r5, r1
mov o3.xyz, c27.x
mad o1.xy, v3, c26, c26.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 92 instructions, 6 temp regs, 0 temp arrays:
// ALU 83 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlhiinahncmljdndegcliipmmefnpbjplabaaaaaadiaoaaaaadaaaaaa
cmaaaaaapeaaaaaakmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcieamaaaaeaaaabaacbadaaaafjaaaaae
egiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafjaaaaae
egiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaa
giaaaaacagaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaa
dgaaaaagccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaa
aaaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaia
mbaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaabaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaa
acaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalp
aaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaap
pcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaa
adaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaaba
pcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaah
pcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaa
aaaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaa
aaaaaaaabkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaa
egaobaaaaeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
hcaabaaaaeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaa
egbcbaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaa
dgaaaaafecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaa
igaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaaaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaa
egiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaa
agiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaa
egiocaaaadaaaaaaadaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaa
ogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaaeaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaaagaabaaaacaaaaaaegacbaaaaeaaaaaabaaaaaaiicaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaa
adaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaa
acaaaaaaegaobaaaadaaaaaaegaobaaaadaaaaaaeeaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaa
adaaaaaadgaaaaaficaabaaaadaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaa
adaaaaaaegaobaaaadaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaa
adaaaaaapgapbaaaaaaaaaaaegaobaaaadaaaaaaegbobaaaabaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaadaaaaaadiaaaaahhcaabaaaaeaaaaaacgajbaaaacaaaaaajgaebaaa
adaaaaaadcaaaaakhcaabaaaaeaaaaaajgaebaaaacaaaaaacgajbaaaadaaaaaa
egacbaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaapgapbaaaadaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaacaaaaaaaaaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaa
acaaaaaaaaaaaaaaegacbaaaafaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaafaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaadgaaaaaihccabaaaadaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaa
adaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaa
agiacaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaa
egiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaa
aaaaaaaihcaabaaaafaaaaaaegacbaaaafaaaaaaegiccaaaadaaaaaabdaaaaaa
dcaaaaalhcaabaaaaaaaaaaaegacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaa
egacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaeaaaaaaegacbaaaadaaaaaa
egacbaaaaaaaaaaabaaaaaaheccabaaaaeaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaa
diaaaaaibcaabaaaaaaaaaaabkaabaaaabaaaaaaakiacaaaabaaaaaaafaaaaaa
diaaaaahicaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaadpdiaaaaak
fcaabaaaaaaaaaaaagadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadp
aaaaaaaadgaaaaafmccabaaaafaaaaaakgaobaaaabaaaaaaaaaaaaahdccabaaa
afaaaaaakgakbaaaaaaaaaaamgaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_23 = tmpvar_3.xyz;
  tmpvar_24 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_25;
  tmpvar_25[0].x = tmpvar_23.x;
  tmpvar_25[0].y = tmpvar_24.x;
  tmpvar_25[0].z = tmpvar_22.x;
  tmpvar_25[1].x = tmpvar_23.y;
  tmpvar_25[1].y = tmpvar_24.y;
  tmpvar_25[1].z = tmpvar_22.y;
  tmpvar_25[2].x = tmpvar_23.z;
  tmpvar_25[2].y = tmpvar_24.z;
  tmpvar_25[2].z = tmpvar_22.z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_21);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_25 * (((_World2Object * tmpvar_27).xyz * unity_Scale.w) - tmpvar_20));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_21));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float tmpvar_27;
  mediump float lightShadowDataX_28;
  highp float dist_29;
  lowp float tmpvar_30;
  tmpvar_30 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = max (float((dist_29 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_28);
  tmpvar_27 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_34;
  mediump vec3 lightDir_35;
  lightDir_35 = xlv_TEXCOORD1;
  mediump vec3 viewDir_36;
  viewDir_36 = tmpvar_33;
  mediump float atten_37;
  atten_37 = tmpvar_27;
  lowp vec4 c_38;
  lowp float backContrib_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (tmpvar_8, lightDir_35);
  mediump float tmpvar_41;
  tmpvar_41 = clamp (dot (viewDir_36, -(lightDir_35)), 0.0, 1.0);
  backContrib_39 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = clamp (-(tmpvar_40), 0.0, 1.0);
  lowp float tmpvar_43;
  tmpvar_43 = mix (tmpvar_42, backContrib_39, _TranslucencyViewDependency);
  backContrib_39 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((tmpvar_43 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_45;
  tmpvar_45 = (tmpvar_6 * ((tmpvar_44 * 2.0) + max (0.0, ((tmpvar_40 * 0.6) + 0.4))));
  c_38.xyz = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((c_38.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_35 + viewDir_36)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_38.xyz = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = (c_38.xyz * mix (2.0, (atten_37 * 2.0), _ShadowStrength));
  c_38.xyz = tmpvar_47;
  tmpvar_34 = c_38;
  c_1 = tmpvar_34;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec4 tmpvar_23;
  tmpvar_23 = (glstate_matrix_mvp * tmpvar_21);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_3.xyz;
  tmpvar_25 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_22.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_22.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_22.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_23 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_23.zw;
  gl_Position = tmpvar_23;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_20));
  xlv_TEXCOORD4 = o_29;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_4 = normal_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_29;
  mediump vec3 lightDir_30;
  lightDir_30 = xlv_TEXCOORD1;
  mediump vec3 viewDir_31;
  viewDir_31 = tmpvar_28;
  mediump float atten_32;
  atten_32 = tmpvar_27;
  lowp vec4 c_33;
  lowp float backContrib_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (normal_8, lightDir_30);
  mediump float tmpvar_36;
  tmpvar_36 = clamp (dot (viewDir_31, -(lightDir_30)), 0.0, 1.0);
  backContrib_34 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = clamp (-(tmpvar_35), 0.0, 1.0);
  lowp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_37, backContrib_34, _TranslucencyViewDependency);
  backContrib_34 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_38 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_6 * ((tmpvar_39 * 2.0) + max (0.0, ((tmpvar_35 * 0.6) + 0.4))));
  c_33.xyz = tmpvar_40;
  mediump vec3 tmpvar_41;
  tmpvar_41 = ((c_33.xyz + (pow (max (0.0, dot (normal_8, normalize((lightDir_30 + viewDir_31)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_33.xyz = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42 = (c_33.xyz * mix (2.0, (atten_32 * 2.0), _ShadowStrength));
  c_33.xyz = tmpvar_42;
  tmpvar_29 = c_33;
  c_1 = tmpvar_29;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 660
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 663
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 667
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 671
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 676
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 635
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 639
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 643
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 647
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 679
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 681
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 685
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 689
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 693
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Vector 20 [unity_4LightPosX0]
Vector 21 [unity_4LightPosY0]
Vector 22 [unity_4LightPosZ0]
Vector 23 [unity_4LightAtten0]
Vector 24 [unity_LightColor0]
Vector 25 [unity_LightColor1]
Vector 26 [unity_LightColor2]
Vector 27 [unity_LightColor3]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 28 [unity_Scale]
Vector 29 [_Scale]
Vector 30 [_SquashPlaneNormal]
Float 31 [_SquashAmount]
Vector 32 [_Wind]
Vector 33 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 118 ALU
PARAM c[36] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..33],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R0.w, vertex.attrib[14];
ADD R5.w, -R0, c[0].y;
MOV R1.x, c[0].y;
DP3 R0.w, R1.x, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R2, vertex.normal.z, c[7], R2;
MAD R0.xyz, R0, R5.w, vertex.position;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[29];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[34];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[35].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R3.xy, R1.xzzw, R1.ywzw;
MAD R5.xyz, R5.w, R2, vertex.normal;
MUL R1.xyz, R3.y, c[32];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R3.zw, vertex.color.y, R5.xyxz;
DP3 R4.x, R5, R5;
RSQ R6.x, R4.x;
MUL R5.xyz, R6.x, R5;
MUL R6.xyz, R5, c[28].w;
MOV R1.w, c[0].y;
MUL R1.xz, R3.zyww, c[35].z;
MUL R1.y, vertex.texcoord[1], c[35];
MAD R1.xyz, R3.xyxw, R1, R2;
MAD R0.xyz, R1, c[32].w, R0;
MAD R1.xyz, vertex.texcoord[1].x, c[32], R0;
DP3 R0.x, R1, c[30];
ADD R0.x, R0, c[30].w;
MUL R0.xyz, R0.x, c[30];
ADD R1.xyz, -R0, R1;
MAD R1.xyz, R0, c[31].x, R1;
DP4 R0.x, R1, c[9];
DP4 R0.y, R1, c[10];
ADD R2, -R0.x, c[20];
ADD R3, -R0.y, c[21];
MUL R0, R3, R3;
MAD R4, R2, R2, R0;
DP4 R0.x, R1, c[11];
ADD R0, -R0.x, c[22];
DP3 R6.w, R6, c[10];
MUL R3, R3, R6.w;
DP3 R6.w, R6, c[9];
MAD R2, R2, R6.w, R3;
DP3 R3.x, R6, c[11];
MAD R4, R0, R0, R4;
MAD R2, R0, R3.x, R2;
MUL R3, R4, c[23];
ADD R3, R3, c[0].y;
RSQ R0.x, R4.x;
RSQ R0.y, R4.y;
RSQ R0.z, R4.z;
RSQ R0.w, R4.w;
MUL R0, R2, R0;
MAX R2, R0, c[0].x;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R0, vertex.attrib[14].z, c[7], R0;
ADD R0, R0, c[0].x;
DP4 R0.w, R0, R0;
RSQ R4.x, R0.w;
RCP R3.x, R3.x;
RCP R3.y, R3.y;
RCP R3.z, R3.z;
RCP R3.w, R3.w;
MUL R2, R2, R3;
MUL R3.xyz, R2.y, c[25];
MAD R3.xyz, R2.x, c[24], R3;
MAD R3.xyz, R2.z, c[26], R3;
MAD result.texcoord[2].xyz, R2.w, c[27], R3;
MOV R2.w, c[0].y;
MUL R0.xyz, R4.x, R0;
MOV R0.w, c[35];
ADD R0, -vertex.attrib[14], R0;
MAD R0, R5.w, R0, vertex.attrib[14];
DP3 R3.w, R0, R0;
RSQ R2.y, R3.w;
MUL R0.xyz, R2.y, R0;
MUL R2.xyz, R5.zxyw, R0.yzxw;
MAD R3.xyz, R5.yzxw, R0.zxyw, -R2;
MOV R2.xyz, c[18];
MUL R3.xyz, R3, R0.w;
DP4 R4.z, R2, c[15];
DP4 R4.x, R2, c[13];
DP4 R4.y, R2, c[14];
MAD R2.xyz, R4, c[28].w, -R1;
DP3 result.texcoord[3].y, R3, R2;
DP3 result.texcoord[3].z, R5, R2;
DP3 result.texcoord[3].x, R0, R2;
DP4 result.position.w, R1, c[4];
DP4 result.position.z, R1, c[3];
DP4 result.position.y, R1, c[2];
DP4 result.position.x, R1, c[1];
MOV R1, c[19];
DP4 R2.z, R1, c[15];
DP4 R2.x, R1, c[13];
DP4 R2.y, R1, c[14];
DP3 result.texcoord[1].y, R2, R3;
DP3 result.texcoord[1].z, R5, R2;
DP3 result.texcoord[1].x, R2, R0;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[33], c[33].zwzw;
END
# 118 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Vector 19 [unity_4LightPosX0]
Vector 20 [unity_4LightPosY0]
Vector 21 [unity_4LightPosZ0]
Vector 22 [unity_4LightAtten0]
Vector 23 [unity_LightColor0]
Vector 24 [unity_LightColor1]
Vector 25 [unity_LightColor2]
Vector 26 [unity_LightColor3]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 27 [unity_Scale]
Vector 28 [_Scale]
Vector 29 [_SquashPlaneNormal]
Float 30 [_SquashAmount]
Vector 31 [_Wind]
Vector 32 [_MainTex_ST]
"vs_3_0
; 123 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c33, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c34, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c35, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c36, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c33.x
abs r0.w, v1
add r5.w, -r0, c33.y
mov r1.xyz, c11
dp3 r0.w, c33.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r5.w, v0
add r3, r2, c33.x
mul r0.xyz, r0, c28
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp4 r0.w, r3, r3
dp3 r1.x, r0, r1.x
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c34
frc r1, r1
mad r1, r1, c33.z, c33.w
frc r1, r1
mad r1, r1, c35.x, c35.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c35.x, c35.z
mul r1, r2, r1
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
add r3.xy, r1.xzzw, r1.ywzw
mad r5.xyz, r5.w, r2, v2
mul r1.xyz, r3.y, c31
mul r2.xyz, v4.y, r1
mul r3.zw, v5.y, r5.xyxz
dp3 r4.x, r5, r5
rsq r6.x, r4.x
mul r5.xyz, r6.x, r5
mul r6.xyz, r5, c27.w
mov r1.w, c33.y
mul r1.xz, r3.zyww, c36.x
mul r1.y, v4, c35.w
mad r1.xyz, r3.xyxw, r1, r2
mad r0.xyz, r1, c31.w, r0
mad r1.xyz, v4.x, c31, r0
dp3 r0.x, r1, c29
add r0.x, r0, c29.w
mul r0.xyz, r0.x, c29
add r1.xyz, -r0, r1
mad r1.xyz, r0, c30.x, r1
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
add r2, -r0.x, c19
add r3, -r0.y, c20
mul r0, r3, r3
mad r4, r2, r2, r0
dp4 r0.x, r1, c10
add r0, -r0.x, c21
dp3 r6.w, r6, c9
mul r3, r3, r6.w
dp3 r6.w, r6, c8
mad r2, r2, r6.w, r3
dp3 r3.x, r6, c10
mad r4, r0, r0, r4
mad r2, r0, r3.x, r2
mul r3, r4, c22
add r3, r3, c33.y
rsq r0.x, r4.x
rsq r0.y, r4.y
rsq r0.z, r4.z
rsq r0.w, r4.w
mul r0, r2, r0
max r2, r0, c33.x
mul r0, v1.y, c5
mad r0, v1.x, c4, r0
mad r0, v1.z, c6, r0
add r0, r0, c33.x
dp4 r0.w, r0, r0
rsq r4.x, r0.w
rcp r3.x, r3.x
rcp r3.y, r3.y
rcp r3.z, r3.z
rcp r3.w, r3.w
mul r2, r2, r3
mul r3.xyz, r2.y, c24
mad r3.xyz, r2.x, c23, r3
mad r3.xyz, r2.z, c25, r3
mad o3.xyz, r2.w, c26, r3
mov r2.w, c33.y
mul r0.xyz, r4.x, r0
mov r0.w, c35.y
add r0, -v1, r0
mad r0, r5.w, r0, v1
dp3 r3.w, r0, r0
rsq r2.y, r3.w
mul r0.xyz, r2.y, r0
mul r2.xyz, r5.zxyw, r0.yzxw
mad r3.xyz, r5.yzxw, r0.zxyw, -r2
mov r2.xyz, c17
dp4 r4.z, r2, c14
dp4 r4.x, r2, c12
dp4 r4.y, r2, c13
mad r4.xyz, r4, c27.w, -r1
mul r2.xyz, r3, r0.w
dp3 o4.y, r2, r4
dp3 o4.z, r5, r4
dp3 o4.x, r0, r4
mov r3, c12
dp4 r4.x, c18, r3
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
mov r1, c14
dp4 r4.z, c18, r1
mov r1, c13
dp4 r4.y, c18, r1
dp3 o2.y, r4, r2
dp3 o2.z, r5, r4
dp3 o2.x, r4, r0
mad o1.xy, v3, c32, c32.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 224 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 160 [unity_LightColor4] 4
Vector 176 [unity_LightColor5] 4
Vector 192 [unity_LightColor6] 4
Vector 208 [unity_LightColor7] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 112 instructions, 9 temp regs, 0 temp arrays:
// ALU 106 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedeligjebdkmjdpadbnmfbmkohjfhdlpphabaaaaaaaibbaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcgmapaaaaeaaaabaa
nladaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaakaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
ajaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaabaaaaaaiicaabaaaabaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaabaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaabaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaabaaaaaa
egbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaaabaaaaaa
egaobaaaabaaaaaaegaobaaaabaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaaabaaaaaa
egaobaaaabaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaaabaaaaaa
pgapbaaaaaaaaaaaegaobaaaabaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaeeaaaaaficaabaaaaaaaaaaa
dkaabaaaaaaaaaaadiaaaaahhcaabaaaabaaaaaapgapbaaaaaaaaaaaegacbaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaaeaaaaaadiaaaaahhcaabaaaadaaaaaajgaebaaa
abaaaaaacgajbaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaacaaaaaa
cgajbaaaabaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaabaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
acaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaacaaaaaa
egacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaa
acaaaaaaegacbaaaaeaaaaaadiaaaaaihcaabaaaaeaaaaaafgafbaaaaaaaaaaa
egiccaaaadaaaaaaanaaaaaadcaaaaakhcaabaaaaeaaaaaaegiccaaaadaaaaaa
amaaaaaaagaabaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaakhcaabaaaaeaaaaaa
egiccaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegacbaaaaeaaaaaaaaaaaaai
hcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaaj
pcaabaaaafaaaaaakgakbaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaaaeaaaaaa
aaaaaaajpcaabaaaagaaaaaaagaabaiaebaaaaaaaeaaaaaaegiocaaaacaaaaaa
acaaaaaaaaaaaaajpcaabaaaaeaaaaaafgafbaiaebaaaaaaaeaaaaaaegiocaaa
acaaaaaaadaaaaaadiaaaaaihcaabaaaahaaaaaaegacbaaaacaaaaaapgipcaaa
adaaaaaabeaaaaaadiaaaaaihcaabaaaaiaaaaaafgafbaaaahaaaaaaegiccaaa
adaaaaaaanaaaaaadcaaaaaklcaabaaaahaaaaaaegiicaaaadaaaaaaamaaaaaa
agaabaaaahaaaaaaegaibaaaaiaaaaaadcaaaaakhcaabaaaahaaaaaaegiccaaa
adaaaaaaaoaaaaaakgakbaaaahaaaaaaegadbaaaahaaaaaadiaaaaahpcaabaaa
aiaaaaaaegaobaaaaeaaaaaafgafbaaaahaaaaaadiaaaaahpcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaaeaaaaaaegaobaaa
agaaaaaaegaobaaaagaaaaaaegaobaaaaeaaaaaadcaaaaajpcaabaaaagaaaaaa
egaobaaaagaaaaaaagaabaaaahaaaaaaegaobaaaaiaaaaaadcaaaaajpcaabaaa
agaaaaaaegaobaaaafaaaaaakgakbaaaahaaaaaaegaobaaaagaaaaaadcaaaaaj
pcaabaaaaeaaaaaaegaobaaaafaaaaaaegaobaaaafaaaaaaegaobaaaaeaaaaaa
eeaaaaafpcaabaaaafaaaaaaegaobaaaaeaaaaaadcaaaaanpcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegiocaaaacaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpaoaaaaakpcaabaaaaeaaaaaaaceaaaaaaaaaiadpaaaaiadp
aaaaiadpaaaaiadpegaobaaaaeaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaa
afaaaaaaegaobaaaagaaaaaadeaaaaakpcaabaaaafaaaaaaegaobaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaahpcaabaaaaeaaaaaa
egaobaaaaeaaaaaaegaobaaaafaaaaaadiaaaaaihcaabaaaafaaaaaafgafbaaa
aeaaaaaaegiccaaaacaaaaaaahaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaa
acaaaaaaagaaaaaaagaabaaaaeaaaaaaegacbaaaafaaaaaadcaaaaakhcaabaaa
aeaaaaaaegiccaaaacaaaaaaaiaaaaaakgakbaaaaeaaaaaaegacbaaaafaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaaajaaaaaapgapbaaaaeaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaa
beaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaaeaaaaaaegacbaaa
abaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaaeaaaaaaegacbaaaacaaaaaa
egacbaaaaaaaaaaabaaaaaahcccabaaaaeaaaaaaegacbaaaadaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_26 = tmpvar_4.xyz;
  tmpvar_27 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_28;
  tmpvar_28[0].x = tmpvar_26.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = tmpvar_23.x;
  tmpvar_28[1].x = tmpvar_26.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = tmpvar_23.y;
  tmpvar_28[2].x = tmpvar_26.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = tmpvar_23.z;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_25.x) + (tmpvar_33 * tmpvar_25.y)) + (tmpvar_34 * tmpvar_25.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w));
  tmpvar_2 = tmpvar_37;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_28 * (((_World2Object * tmpvar_30).xyz * unity_Scale.w) - tmpvar_21));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_28;
  mediump vec3 lightDir_29;
  lightDir_29 = xlv_TEXCOORD1;
  mediump vec3 viewDir_30;
  viewDir_30 = tmpvar_27;
  lowp vec4 c_31;
  lowp float backContrib_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (tmpvar_8, lightDir_29);
  mediump float tmpvar_34;
  tmpvar_34 = clamp (dot (viewDir_30, -(lightDir_29)), 0.0, 1.0);
  backContrib_32 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = clamp (-(tmpvar_33), 0.0, 1.0);
  lowp float tmpvar_36;
  tmpvar_36 = mix (tmpvar_35, backContrib_32, _TranslucencyViewDependency);
  backContrib_32 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_36 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_6 * ((tmpvar_37 * 2.0) + max (0.0, ((tmpvar_33 * 0.6) + 0.4))));
  c_31.xyz = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((c_31.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_29 + viewDir_30)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_31.xyz = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_31.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_31.xyz = tmpvar_40;
  tmpvar_28 = c_31;
  c_1 = tmpvar_28;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_26 = tmpvar_4.xyz;
  tmpvar_27 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_28;
  tmpvar_28[0].x = tmpvar_26.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = tmpvar_23.x;
  tmpvar_28[1].x = tmpvar_26.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = tmpvar_23.y;
  tmpvar_28[2].x = tmpvar_26.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = tmpvar_23.z;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_25.x) + (tmpvar_33 * tmpvar_25.y)) + (tmpvar_34 * tmpvar_25.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w));
  tmpvar_2 = tmpvar_37;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_28 * (((_World2Object * tmpvar_30).xyz * unity_Scale.w) - tmpvar_21));
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_4 = normal_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_28;
  mediump vec3 lightDir_29;
  lightDir_29 = xlv_TEXCOORD1;
  mediump vec3 viewDir_30;
  viewDir_30 = tmpvar_27;
  lowp vec4 c_31;
  lowp float backContrib_32;
  mediump float tmpvar_33;
  tmpvar_33 = dot (normal_8, lightDir_29);
  mediump float tmpvar_34;
  tmpvar_34 = clamp (dot (viewDir_30, -(lightDir_29)), 0.0, 1.0);
  backContrib_32 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = clamp (-(tmpvar_33), 0.0, 1.0);
  lowp float tmpvar_36;
  tmpvar_36 = mix (tmpvar_35, backContrib_32, _TranslucencyViewDependency);
  backContrib_32 = tmpvar_36;
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((tmpvar_36 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_6 * ((tmpvar_37 * 2.0) + max (0.0, ((tmpvar_33 * 0.6) + 0.4))));
  c_31.xyz = tmpvar_38;
  mediump vec3 tmpvar_39;
  tmpvar_39 = ((c_31.xyz + (pow (max (0.0, dot (normal_8, normalize((lightDir_29 + viewDir_30)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_31.xyz = tmpvar_39;
  mediump vec3 tmpvar_40;
  tmpvar_40 = (c_31.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_31.xyz = tmpvar_40;
  tmpvar_28 = c_31;
  c_1 = tmpvar_28;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 650
uniform highp vec4 _MainTex_ST;
#line 670
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 651
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 654
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 658
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 662
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 666
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 650
uniform highp vec4 _MainTex_ST;
#line 670
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 639
    o.Emission *= IN.color.w;
}
#line 671
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 674
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 678
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 682
    lowp float atten = 1.0;
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 686
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_ProjectionParams]
Vector 20 [_WorldSpaceLightPos0]
Vector 21 [unity_4LightPosX0]
Vector 22 [unity_4LightPosY0]
Vector 23 [unity_4LightPosZ0]
Vector 24 [unity_4LightAtten0]
Vector 25 [unity_LightColor0]
Vector 26 [unity_LightColor1]
Vector 27 [unity_LightColor2]
Vector 28 [unity_LightColor3]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Scale]
Vector 31 [_SquashPlaneNormal]
Float 32 [_SquashAmount]
Vector 33 [_Wind]
Vector 34 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 123 ALU
PARAM c[38] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..34],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 },
		{ 0.5 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
TEMP R7;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R0.w, vertex.attrib[14];
ADD R6.w, -R0, c[0].y;
MOV R1.x, c[0].y;
DP3 R0.w, R1.x, c[12];
MAD R0.xyz, R0, R6.w, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R1.w, R3, R3;
MUL R1.xyz, R0, c[30];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R1, R0.x;
ADD R0.xy, R0, c[17].y;
MUL R0, R0.xxyy, c[35];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R2, -R0, c[0].z;
ADD R2, R2, c[36].x;
MUL R0, R0, R0;
MUL R0, R0, R2;
RSQ R1.w, R1.w;
MAD R2.xyz, R1.w, R3, -vertex.normal;
ADD R4.xy, R0.xzzw, R0.ywzw;
MAD R0.xyz, R6.w, R2, vertex.normal;
MUL R2.xyz, R4.y, c[33];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R4.zw, vertex.color.y, R0.xyxz;
MOV R1.w, c[0].y;
MUL R2.xz, R4.zyww, c[36].z;
MUL R2.y, vertex.texcoord[1], c[36];
MAD R2.xyz, R4.xyxw, R2, R3;
MAD R1.xyz, R2, c[33].w, R1;
MAD R2.xyz, vertex.texcoord[1].x, c[33], R1;
DP3 R0.w, R2, c[31];
ADD R0.w, R0, c[31];
MUL R1.xyz, R0.w, c[31];
ADD R2.xyz, -R1, R2;
MAD R1.xyz, R1, c[32].x, R2;
DP4 R2.x, R1, c[10];
ADD R3, -R2.x, c[22];
DP4 R0.w, R1, c[9];
ADD R2, -R0.w, c[21];
MUL R4, R3, R3;
DP3 R0.w, R0, R0;
RSQ R0.w, R0.w;
MUL R6.xyz, R0.w, R0;
DP4 R5.x, R1, c[11];
MUL R7.xyz, R6, c[29].w;
DP3 R7.w, R7, c[10];
MUL R3, R3, R7.w;
ADD R0, -R5.x, c[23];
MAD R4, R2, R2, R4;
MAD R4, R0, R0, R4;
DP3 R7.w, R7, c[9];
MAD R2, R2, R7.w, R3;
DP3 R3.x, R7, c[11];
MAD R0, R0, R3.x, R2;
MUL R5, R4, c[24];
RSQ R2.x, R4.x;
RSQ R2.y, R4.y;
RSQ R2.z, R4.z;
RSQ R2.w, R4.w;
MUL R0, R0, R2;
ADD R2, R5, c[0].y;
MAX R0, R0, c[0].x;
RCP R2.x, R2.x;
RCP R2.y, R2.y;
RCP R2.w, R2.w;
RCP R2.z, R2.z;
MUL R2, R0, R2;
MUL R0.xyz, R2.y, c[26];
MAD R0.xyz, R2.x, c[25], R0;
MAD R2.xyz, R2.z, c[27], R0;
MAD result.texcoord[2].xyz, R2.w, c[28], R2;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R0, vertex.attrib[14].z, c[7], R0;
ADD R0, R0, c[0].x;
DP4 R0.w, R0, R0;
RSQ R2.z, R0.w;
DP4 R2.w, R1, c[4];
DP4 R2.y, R1, c[2];
DP4 R2.x, R1, c[1];
MUL R3.xyz, R2.xyww, c[37].x;
MUL R3.y, R3, c[19].x;
MUL R0.xyz, R2.z, R0;
MOV R0.w, c[36];
ADD R0, -vertex.attrib[14], R0;
MAD R0, R6.w, R0, vertex.attrib[14];
DP3 R2.z, R0, R0;
ADD result.texcoord[4].xy, R3, R3.z;
RSQ R3.x, R2.z;
DP4 R2.z, R1, c[3];
MUL R0.xyz, R3.x, R0;
MUL R3.xyz, R6.zxyw, R0.yzxw;
MAD R3.xyz, R6.yzxw, R0.zxyw, -R3;
MOV result.position, R2;
MOV result.texcoord[4].zw, R2;
MOV R2.w, c[0].y;
MOV R2.xyz, c[18];
DP4 R4.z, R2, c[15];
DP4 R4.x, R2, c[13];
DP4 R4.y, R2, c[14];
MAD R1.xyz, R4, c[29].w, -R1;
MUL R3.xyz, R3, R0.w;
DP3 result.texcoord[3].y, R3, R1;
DP3 result.texcoord[3].z, R6, R1;
MOV R2, c[20];
DP3 result.texcoord[3].x, R0, R1;
DP4 R1.z, R2, c[15];
DP4 R1.x, R2, c[13];
DP4 R1.y, R2, c[14];
DP3 result.texcoord[1].y, R1, R3;
DP3 result.texcoord[1].z, R6, R1;
DP3 result.texcoord[1].x, R1, R0;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[34], c[34].zwzw;
END
# 123 instructions, 8 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_ProjectionParams]
Vector 19 [_ScreenParams]
Vector 20 [_WorldSpaceLightPos0]
Vector 21 [unity_4LightPosX0]
Vector 22 [unity_4LightPosY0]
Vector 23 [unity_4LightPosZ0]
Vector 24 [unity_4LightAtten0]
Vector 25 [unity_LightColor0]
Vector 26 [unity_LightColor1]
Vector 27 [unity_LightColor2]
Vector 28 [unity_LightColor3]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 29 [unity_Scale]
Vector 30 [_Scale]
Vector 31 [_SquashPlaneNormal]
Float 32 [_SquashAmount]
Vector 33 [_Wind]
Vector 34 [_MainTex_ST]
"vs_3_0
; 128 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
def c35, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c36, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c37, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c38, 0.10000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c35.x
abs r0.w, v1
add r6.w, -r0, c35.y
mov r1.xyz, c11
dp3 r0.w, c35.y, r1
mad r0.xyz, r0, r6.w, v0
mad r2, v2.z, c6, r2
add r3, r2, c35.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c30
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c16.y
mul r0, r0.xxyy, c36
frc r0, r0
mad r0, r0, c35.z, c35.w
frc r0, r0
mad r0, r0, c37.x, c37.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c37.x, c37.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.xy, r0.xzzw, r0.ywzw
mad r0.xyz, r6.w, r2, v2
mul r2.xyz, r4.y, c33
mul r3.xyz, v4.y, r2
mul r4.zw, v5.y, r0.xyxz
mov r1.w, c35.y
mul r2.xz, r4.zyww, c38.x
mul r2.y, v4, c37.w
mad r2.xyz, r4.xyxw, r2, r3
mad r1.xyz, r2, c33.w, r1
mad r2.xyz, v4.x, c33, r1
dp3 r0.w, r2, c31
add r0.w, r0, c31
mul r1.xyz, r0.w, c31
add r2.xyz, -r1, r2
mad r1.xyz, r1, c32.x, r2
dp4 r2.x, r1, c9
add r3, -r2.x, c22
dp4 r0.w, r1, c8
add r2, -r0.w, c21
mul r4, r3, r3
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r6.xyz, r0.w, r0
dp4 r5.x, r1, c10
mul r7.xyz, r6, c29.w
dp3 r7.w, r7, c9
mul r3, r3, r7.w
add r0, -r5.x, c23
mad r4, r2, r2, r4
mad r4, r0, r0, r4
dp3 r7.w, r7, c8
mad r2, r2, r7.w, r3
dp3 r3.x, r7, c10
mad r0, r0, r3.x, r2
mul r5, r4, c24
rsq r2.x, r4.x
rsq r2.y, r4.y
rsq r2.z, r4.z
rsq r2.w, r4.w
mul r0, r0, r2
add r2, r5, c35.y
max r0, r0, c35.x
rcp r2.x, r2.x
rcp r2.y, r2.y
rcp r2.w, r2.w
rcp r2.z, r2.z
mul r2, r0, r2
mul r0.xyz, r2.y, c26
mad r0.xyz, r2.x, c25, r0
mad r2.xyz, r2.z, c27, r0
mad o3.xyz, r2.w, c28, r2
mul r0, v1.y, c5
mad r0, v1.x, c4, r0
mad r0, v1.z, c6, r0
add r0, r0, c35.x
dp4 r0.w, r0, r0
rsq r2.z, r0.w
dp4 r2.w, r1, c3
dp4 r2.y, r1, c1
dp4 r2.x, r1, c0
mul r3.xyz, r2.xyww, c38.y
mul r3.y, r3, c18.x
mad o5.xy, r3.z, c19.zwzw, r3
mul r0.xyz, r2.z, r0
mov r0.w, c37.y
add r0, -v1, r0
mad r0, r6.w, r0, v1
dp3 r2.z, r0, r0
rsq r3.x, r2.z
dp4 r2.z, r1, c2
mul r0.xyz, r3.x, r0
mul r3.xyz, r6.zxyw, r0.yzxw
mad r3.xyz, r6.yzxw, r0.zxyw, -r3
mov o0, r2
mov o5.zw, r2
mov r2.w, c35.y
mov r2.xyz, c17
dp4 r4.z, r2, c14
dp4 r4.x, r2, c12
dp4 r4.y, r2, c13
mad r1.xyz, r4, c29.w, -r1
mul r3.xyz, r3, r0.w
mov r2, c14
dp4 r4.z, c20, r2
mov r2, c12
dp4 r4.x, c20, r2
dp3 o4.y, r3, r1
dp3 o4.z, r6, r1
dp3 o4.x, r0, r1
mov r1, c13
dp4 r4.y, c20, r1
dp3 o2.y, r4, r3
dp3 o2.z, r6, r4
dp3 o2.x, r4, r0
mad o1.xy, v3, c34, c34.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityLighting" 720 // 224 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
Vector 32 [unity_4LightPosX0] 4
Vector 48 [unity_4LightPosY0] 4
Vector 64 [unity_4LightPosZ0] 4
Vector 80 [unity_4LightAtten0] 4
Vector 96 [unity_LightColor0] 4
Vector 112 [unity_LightColor1] 4
Vector 128 [unity_LightColor2] 4
Vector 144 [unity_LightColor3] 4
Vector 160 [unity_LightColor4] 4
Vector 176 [unity_LightColor5] 4
Vector 192 [unity_LightColor6] 4
Vector 208 [unity_LightColor7] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 118 instructions, 10 temp regs, 0 temp arrays:
// ALU 110 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedojbbggfbjajfgfhhmaibgcmafkgebdmbabaaaaaanebbaaaaadaaaaaa
cmaaaaaapeaaaaaakmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheolaaaaaaaagaaaaaa
aiaaaaaajiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaakeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaakeaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaakeaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefccabaaaaaeaaaabaaaiaeaaaafjaaaaae
egiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaafjaaaaae
egiocaaaacaaaaaaakaaaaaafjaaaaaeegiocaaaadaaaaaabfaaaaaafjaaaaae
egiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadpcbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaad
hccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaa
giaaaaacakaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaa
dgaaaaagccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaa
aaaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaa
aaaaaaaaakaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaa
bkaabaaaaaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaia
mbaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaa
abaaaaaapgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaa
egacbaaaabaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaa
egacbaaaabaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaa
aaaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaa
acaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalp
aaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaap
pcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaa
adaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaaba
pcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaah
pcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaa
aaaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaaaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaa
egacbaaaacaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaa
aaaaaaaabkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaa
egaobaaaaeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
hcaabaaaaeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaa
acaaaaaadcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaa
egbcbaaaacaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaa
dgaaaaafecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaa
igaabaaaaaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
aaaaaaaaegacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaa
dcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaa
egacbaaaaaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaa
aeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaa
egiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaa
agiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaai
pcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaa
abaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaa
aaaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaa
egiocaaaadaaaaaaadaaaaaadgaaaaafpccabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaamaaaaaa
ogikcaaaaaaaaaaaamaaaaaabaaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahicaabaaaacaaaaaaegaobaaaacaaaaaa
egaobaaaacaaaaaaeeaaaaaficaabaaaacaaaaaadkaabaaaacaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaa
acaaaaaaabeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaa
egbobaiaebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaa
egaobaaaacaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaa
acaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaa
diaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaabaaaaaah
icaabaaaaaaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaaficaabaaa
aaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaaaaaaaaaa
egacbaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaajgaebaaaacaaaaaacgajbaaa
adaaaaaadcaaaaakhcaabaaaaeaaaaaajgaebaaaadaaaaaacgajbaaaacaaaaaa
egacbaiaebaaaaaaaeaaaaaadiaaaaahhcaabaaaaeaaaaaapgapbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaafaaaaaafgifcaaaacaaaaaaaaaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaa
afaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaaegacbaaa
afaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabdaaaaaapgipcaaa
acaaaaaaaaaaaaaaegacbaaaafaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaa
aeaaaaaaegacbaaaafaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaafaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaa
afaaaaaadiaaaaaihcaabaaaafaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaa
anaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaadaaaaaaamaaaaaaagaabaaa
aaaaaaaaegacbaaaafaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaaadaaaaaa
aoaaaaaakgakbaaaaaaaaaaaegacbaaaafaaaaaaaaaaaaaihcaabaaaafaaaaaa
egacbaaaafaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajpcaabaaaagaaaaaa
kgakbaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaaeaaaaaaaaaaaaajpcaabaaa
ahaaaaaaagaabaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaacaaaaaaaaaaaaaj
pcaabaaaafaaaaaafgafbaiaebaaaaaaafaaaaaaegiocaaaacaaaaaaadaaaaaa
diaaaaaihcaabaaaaiaaaaaaegacbaaaadaaaaaapgipcaaaadaaaaaabeaaaaaa
diaaaaaihcaabaaaajaaaaaafgafbaaaaiaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaaiaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaiaaaaaa
egaibaaaajaaaaaadcaaaaakhcaabaaaaiaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaiaaaaaaegadbaaaaiaaaaaadiaaaaahpcaabaaaajaaaaaaegaobaaa
afaaaaaafgafbaaaaiaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaafaaaaaadcaaaaajpcaabaaaafaaaaaaegaobaaaahaaaaaaegaobaaa
ahaaaaaaegaobaaaafaaaaaadcaaaaajpcaabaaaahaaaaaaegaobaaaahaaaaaa
agaabaaaaiaaaaaaegaobaaaajaaaaaadcaaaaajpcaabaaaahaaaaaaegaobaaa
agaaaaaakgakbaaaaiaaaaaaegaobaaaahaaaaaadcaaaaajpcaabaaaafaaaaaa
egaobaaaagaaaaaaegaobaaaagaaaaaaegaobaaaafaaaaaaeeaaaaafpcaabaaa
agaaaaaaegaobaaaafaaaaaadcaaaaanpcaabaaaafaaaaaaegaobaaaafaaaaaa
egiocaaaacaaaaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
aoaaaaakpcaabaaaafaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadp
egaobaaaafaaaaaadiaaaaahpcaabaaaagaaaaaaegaobaaaagaaaaaaegaobaaa
ahaaaaaadeaaaaakpcaabaaaagaaaaaaegaobaaaagaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadiaaaaahpcaabaaaafaaaaaaegaobaaaafaaaaaa
egaobaaaagaaaaaadiaaaaaihcaabaaaagaaaaaafgafbaaaafaaaaaaegiccaaa
acaaaaaaahaaaaaadcaaaaakhcaabaaaagaaaaaaegiccaaaacaaaaaaagaaaaaa
agaabaaaafaaaaaaegacbaaaagaaaaaadcaaaaakhcaabaaaafaaaaaaegiccaaa
acaaaaaaaiaaaaaakgakbaaaafaaaaaaegacbaaaagaaaaaadcaaaaakhccabaaa
adaaaaaaegiccaaaacaaaaaaajaaaaaapgapbaaaafaaaaaaegacbaaaafaaaaaa
diaaaaajhcaabaaaafaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaa
bbaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaa
abaaaaaaaeaaaaaaegacbaaaafaaaaaadcaaaaalhcaabaaaafaaaaaaegiccaaa
adaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaaafaaaaaaaaaaaaai
hcaabaaaafaaaaaaegacbaaaafaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaal
hcaabaaaaaaaaaaaegacbaaaafaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaia
ebaaaaaaaaaaaaaabaaaaaahbccabaaaaeaaaaaaegacbaaaacaaaaaaegacbaaa
aaaaaaaabaaaaaaheccabaaaaeaaaaaaegacbaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaahcccabaaaaeaaaaaaegacbaaaaeaaaaaaegacbaaaaaaaaaaadiaaaaai
bcaabaaaaaaaaaaabkaabaaaabaaaaaaakiacaaaabaaaaaaafaaaaaadiaaaaah
icaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaadpdiaaaaakfcaabaaa
aaaaaaaaagadbaaaabaaaaaaaceaaaaaaaaaaadpaaaaaaaaaaaaaadpaaaaaaaa
dgaaaaafmccabaaaafaaaaaakgaobaaaabaaaaaaaaaaaaahdccabaaaafaaaaaa
kgakbaaaaaaaaaaamgaabaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_26 = tmpvar_4.xyz;
  tmpvar_27 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_28;
  tmpvar_28[0].x = tmpvar_26.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = tmpvar_23.x;
  tmpvar_28[1].x = tmpvar_26.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = tmpvar_23.y;
  tmpvar_28[2].x = tmpvar_26.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = tmpvar_23.z;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_25.x) + (tmpvar_33 * tmpvar_25.y)) + (tmpvar_34 * tmpvar_25.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w));
  tmpvar_2 = tmpvar_37;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_28 * (((_World2Object * tmpvar_30).xyz * unity_Scale.w) - tmpvar_21));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float tmpvar_27;
  mediump float lightShadowDataX_28;
  highp float dist_29;
  lowp float tmpvar_30;
  tmpvar_30 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = _LightShadowData.x;
  lightShadowDataX_28 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = max (float((dist_29 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_28);
  tmpvar_27 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_34;
  mediump vec3 lightDir_35;
  lightDir_35 = xlv_TEXCOORD1;
  mediump vec3 viewDir_36;
  viewDir_36 = tmpvar_33;
  mediump float atten_37;
  atten_37 = tmpvar_27;
  lowp vec4 c_38;
  lowp float backContrib_39;
  mediump float tmpvar_40;
  tmpvar_40 = dot (tmpvar_8, lightDir_35);
  mediump float tmpvar_41;
  tmpvar_41 = clamp (dot (viewDir_36, -(lightDir_35)), 0.0, 1.0);
  backContrib_39 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = clamp (-(tmpvar_40), 0.0, 1.0);
  lowp float tmpvar_43;
  tmpvar_43 = mix (tmpvar_42, backContrib_39, _TranslucencyViewDependency);
  backContrib_39 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((tmpvar_43 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_45;
  tmpvar_45 = (tmpvar_6 * ((tmpvar_44 * 2.0) + max (0.0, ((tmpvar_40 * 0.6) + 0.4))));
  c_38.xyz = tmpvar_45;
  mediump vec3 tmpvar_46;
  tmpvar_46 = ((c_38.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_35 + viewDir_36)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_38.xyz = tmpvar_46;
  mediump vec3 tmpvar_47;
  tmpvar_47 = (c_38.xyz * mix (2.0, (atten_37 * 2.0), _ShadowStrength));
  c_38.xyz = tmpvar_47;
  tmpvar_34 = c_38;
  c_1 = tmpvar_34;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec4 tmpvar_24;
  tmpvar_24 = (glstate_matrix_mvp * tmpvar_22);
  mat3 tmpvar_25;
  tmpvar_25[0] = _Object2World[0].xyz;
  tmpvar_25[1] = _Object2World[1].xyz;
  tmpvar_25[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_27 = tmpvar_4.xyz;
  tmpvar_28 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_29;
  tmpvar_29[0].x = tmpvar_27.x;
  tmpvar_29[0].y = tmpvar_28.x;
  tmpvar_29[0].z = tmpvar_23.x;
  tmpvar_29[1].x = tmpvar_27.y;
  tmpvar_29[1].y = tmpvar_28.y;
  tmpvar_29[1].z = tmpvar_23.y;
  tmpvar_29[2].x = tmpvar_27.z;
  tmpvar_29[2].y = tmpvar_28.z;
  tmpvar_29[2].z = tmpvar_23.z;
  highp vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_29 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_30;
  highp vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_32;
  tmpvar_32 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosX0 - tmpvar_32.x);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosY0 - tmpvar_32.y);
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_4LightPosZ0 - tmpvar_32.z);
  highp vec4 tmpvar_36;
  tmpvar_36 = (((tmpvar_33 * tmpvar_33) + (tmpvar_34 * tmpvar_34)) + (tmpvar_35 * tmpvar_35));
  highp vec4 tmpvar_37;
  tmpvar_37 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_33 * tmpvar_26.x) + (tmpvar_34 * tmpvar_26.y)) + (tmpvar_35 * tmpvar_26.z)) * inversesqrt(tmpvar_36))) * (1.0/((1.0 + (tmpvar_36 * unity_4LightAtten0)))));
  highp vec3 tmpvar_38;
  tmpvar_38 = ((((unity_LightColor[0].xyz * tmpvar_37.x) + (unity_LightColor[1].xyz * tmpvar_37.y)) + (unity_LightColor[2].xyz * tmpvar_37.z)) + (unity_LightColor[3].xyz * tmpvar_37.w));
  tmpvar_2 = tmpvar_38;
  highp vec4 o_39;
  highp vec4 tmpvar_40;
  tmpvar_40 = (tmpvar_24 * 0.5);
  highp vec2 tmpvar_41;
  tmpvar_41.x = tmpvar_40.x;
  tmpvar_41.y = (tmpvar_40.y * _ProjectionParams.x);
  o_39.xy = (tmpvar_41 + tmpvar_40.w);
  o_39.zw = tmpvar_24.zw;
  gl_Position = tmpvar_24;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_29 * (((_World2Object * tmpvar_31).xyz * unity_Scale.w) - tmpvar_21));
  xlv_TEXCOORD4 = o_39;
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_4 = normal_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  highp vec3 tmpvar_28;
  tmpvar_28 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_29;
  mediump vec3 lightDir_30;
  lightDir_30 = xlv_TEXCOORD1;
  mediump vec3 viewDir_31;
  viewDir_31 = tmpvar_28;
  mediump float atten_32;
  atten_32 = tmpvar_27;
  lowp vec4 c_33;
  lowp float backContrib_34;
  mediump float tmpvar_35;
  tmpvar_35 = dot (normal_8, lightDir_30);
  mediump float tmpvar_36;
  tmpvar_36 = clamp (dot (viewDir_31, -(lightDir_30)), 0.0, 1.0);
  backContrib_34 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = clamp (-(tmpvar_35), 0.0, 1.0);
  lowp float tmpvar_38;
  tmpvar_38 = mix (tmpvar_37, backContrib_34, _TranslucencyViewDependency);
  backContrib_34 = tmpvar_38;
  lowp vec3 tmpvar_39;
  tmpvar_39 = ((tmpvar_38 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (tmpvar_6 * ((tmpvar_39 * 2.0) + max (0.0, ((tmpvar_35 * 0.6) + 0.4))));
  c_33.xyz = tmpvar_40;
  mediump vec3 tmpvar_41;
  tmpvar_41 = ((c_33.xyz + (pow (max (0.0, dot (normal_8, normalize((lightDir_30 + viewDir_31)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_33.xyz = tmpvar_41;
  mediump vec3 tmpvar_42;
  tmpvar_42 = (c_33.xyz * mix (2.0, (atten_32 * 2.0), _ShadowStrength));
  c_33.xyz = tmpvar_42;
  tmpvar_29 = c_33;
  c_1 = tmpvar_29;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
#line 680
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 660
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 663
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 667
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 671
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 675
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
#line 680
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 635
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 639
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 643
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 647
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    #line 397
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 681
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 684
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 688
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 692
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 696
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  highp float tmpvar_4;
  tmpvar_4 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = _glesNormal;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_7;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = _glesNormal.xy;
  highp vec4 tmpvar_8;
  tmpvar_8 = (_glesVertex + ((tmpvar_7 * glstate_matrix_invtrans_modelview0) * tmpvar_4));
  highp vec3 tmpvar_9;
  tmpvar_9 = mix (_glesNormal, normalize((tmpvar_5 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_4));
  highp vec4 tmpvar_10;
  tmpvar_10.w = -1.0;
  tmpvar_10.xyz = normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_11;
  tmpvar_11 = mix (_glesTANGENT, tmpvar_10, vec4(tmpvar_4));
  tmpvar_2.w = tmpvar_8.w;
  tmpvar_3.w = tmpvar_11.w;
  tmpvar_2.xyz = (tmpvar_8.xyz * _Scale.xyz);
  highp vec4 pos_12;
  pos_12.w = tmpvar_2.w;
  highp vec3 bend_13;
  vec4 v_14;
  v_14.x = _Object2World[0].w;
  v_14.y = _Object2World[1].w;
  v_14.z = _Object2World[2].w;
  v_14.w = _Object2World[3].w;
  highp float tmpvar_15;
  tmpvar_15 = (dot (v_14.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_16;
  tmpvar_16.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_15)));
  tmpvar_16.y = tmpvar_15;
  highp vec4 tmpvar_17;
  tmpvar_17 = abs(((fract((((fract(((_Time.yy + tmpvar_16).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_17 * tmpvar_17) * (3.0 - (2.0 * tmpvar_17)));
  highp vec2 tmpvar_19;
  tmpvar_19 = (tmpvar_18.xz + tmpvar_18.yw);
  bend_13.xz = ((_glesColor.y * 0.1) * tmpvar_9).xz;
  bend_13.y = (_glesMultiTexCoord1.y * 0.3);
  pos_12.xyz = (tmpvar_2.xyz + (((tmpvar_19.xyx * bend_13) + ((_Wind.xyz * tmpvar_19.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_12.xyz = (pos_12.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_20;
  tmpvar_20 = mix ((pos_12.xyz - ((dot (_SquashPlaneNormal.xyz, pos_12.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_12.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_20;
  tmpvar_2 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(tmpvar_9);
  tmpvar_3.xyz = normalize(tmpvar_11.xyz);
  highp vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_23 = tmpvar_3.xyz;
  tmpvar_24 = (((tmpvar_22.yzx * tmpvar_3.zxy) - (tmpvar_22.zxy * tmpvar_3.yzx)) * tmpvar_11.w);
  highp mat3 tmpvar_25;
  tmpvar_25[0].x = tmpvar_23.x;
  tmpvar_25[0].y = tmpvar_24.x;
  tmpvar_25[0].z = tmpvar_22.x;
  tmpvar_25[1].x = tmpvar_23.y;
  tmpvar_25[1].y = tmpvar_24.y;
  tmpvar_25[1].z = tmpvar_22.y;
  tmpvar_25[2].x = tmpvar_23.z;
  tmpvar_25[2].y = tmpvar_24.z;
  tmpvar_25[2].z = tmpvar_22.z;
  highp vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_25 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_26;
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = _WorldSpaceCameraPos;
  gl_Position = (glstate_matrix_mvp * tmpvar_21);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = vec3(0.0, 0.0, 0.0);
  xlv_TEXCOORD3 = (tmpvar_25 * (((_World2Object * tmpvar_27).xyz * unity_Scale.w) - tmpvar_20));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_21));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float shadow_27;
  lowp float tmpvar_28;
  tmpvar_28 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_29;
  tmpvar_29 = (_LightShadowData.x + (tmpvar_28 * (1.0 - _LightShadowData.x)));
  shadow_27 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_31;
  mediump vec3 lightDir_32;
  lightDir_32 = xlv_TEXCOORD1;
  mediump vec3 viewDir_33;
  viewDir_33 = tmpvar_30;
  mediump float atten_34;
  atten_34 = shadow_27;
  lowp vec4 c_35;
  lowp float backContrib_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (tmpvar_8, lightDir_32);
  mediump float tmpvar_38;
  tmpvar_38 = clamp (dot (viewDir_33, -(lightDir_32)), 0.0, 1.0);
  backContrib_36 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (-(tmpvar_37), 0.0, 1.0);
  lowp float tmpvar_40;
  tmpvar_40 = mix (tmpvar_39, backContrib_36, _TranslucencyViewDependency);
  backContrib_36 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((tmpvar_40 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_6 * ((tmpvar_41 * 2.0) + max (0.0, ((tmpvar_37 * 0.6) + 0.4))));
  c_35.xyz = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((c_35.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_32 + viewDir_33)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_35.xyz = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = (c_35.xyz * mix (2.0, (atten_34 * 2.0), _ShadowStrength));
  c_35.xyz = tmpvar_44;
  tmpvar_31 = c_35;
  c_1 = tmpvar_31;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 660
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 663
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 667
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 671
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    #line 676
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 635
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 639
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 643
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 647
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 679
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 681
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 685
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 689
    xll_clip_f((o.Alpha - _Cutoff));
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    #line 693
    c.xyz += (o.Albedo * IN.vlight);
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_4LightPosZ0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosX0;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_24 * (tmpvar_23 * unity_Scale.w));
  highp vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_26 = tmpvar_4.xyz;
  tmpvar_27 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_28;
  tmpvar_28[0].x = tmpvar_26.x;
  tmpvar_28[0].y = tmpvar_27.x;
  tmpvar_28[0].z = tmpvar_23.x;
  tmpvar_28[1].x = tmpvar_26.y;
  tmpvar_28[1].y = tmpvar_27.y;
  tmpvar_28[1].z = tmpvar_23.y;
  tmpvar_28[2].x = tmpvar_26.z;
  tmpvar_28[2].y = tmpvar_27.z;
  tmpvar_28[2].z = tmpvar_23.z;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_28 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.w = 1.0;
  tmpvar_30.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_31;
  tmpvar_31 = (_Object2World * tmpvar_22).xyz;
  highp vec4 tmpvar_32;
  tmpvar_32 = (unity_4LightPosX0 - tmpvar_31.x);
  highp vec4 tmpvar_33;
  tmpvar_33 = (unity_4LightPosY0 - tmpvar_31.y);
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_4LightPosZ0 - tmpvar_31.z);
  highp vec4 tmpvar_35;
  tmpvar_35 = (((tmpvar_32 * tmpvar_32) + (tmpvar_33 * tmpvar_33)) + (tmpvar_34 * tmpvar_34));
  highp vec4 tmpvar_36;
  tmpvar_36 = (max (vec4(0.0, 0.0, 0.0, 0.0), ((((tmpvar_32 * tmpvar_25.x) + (tmpvar_33 * tmpvar_25.y)) + (tmpvar_34 * tmpvar_25.z)) * inversesqrt(tmpvar_35))) * (1.0/((1.0 + (tmpvar_35 * unity_4LightAtten0)))));
  highp vec3 tmpvar_37;
  tmpvar_37 = ((((unity_LightColor[0].xyz * tmpvar_36.x) + (unity_LightColor[1].xyz * tmpvar_36.y)) + (unity_LightColor[2].xyz * tmpvar_36.z)) + (unity_LightColor[3].xyz * tmpvar_36.w));
  tmpvar_2 = tmpvar_37;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (tmpvar_28 * (((_World2Object * tmpvar_30).xyz * unity_Scale.w) - tmpvar_21));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying lowp vec3 xlv_TEXCOORD2;
varying lowp vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp vec4 _LightColor0;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_SHC;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHAb;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAr;
void main ()
{
  lowp vec4 c_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = worldNormal_4;
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  highp float vC_11;
  mediump vec3 x3_12;
  mediump vec3 x2_13;
  mediump vec3 x1_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (unity_SHAr, normal_10);
  x1_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (unity_SHAg, normal_10);
  x1_14.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (unity_SHAb, normal_10);
  x1_14.z = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18 = (normal_10.xyzz * normal_10.yzzx);
  highp float tmpvar_19;
  tmpvar_19 = dot (unity_SHBr, tmpvar_18);
  x2_13.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (unity_SHBg, tmpvar_18);
  x2_13.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (unity_SHBb, tmpvar_18);
  x2_13.z = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y));
  vC_11 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = (unity_SHC.xyz * vC_11);
  x3_12 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (((x1_14 + x2_13) + x3_12) * tmpvar_6);
  tmpvar_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = (tmpvar_3 * tmpvar_2.w);
  tmpvar_3 = tmpvar_25;
  lowp float x_26;
  x_26 = (tmpvar_5.w - _Cutoff);
  if ((x_26 < 0.0)) {
    discard;
  };
  lowp float shadow_27;
  lowp float tmpvar_28;
  tmpvar_28 = shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD4.xyz);
  highp float tmpvar_29;
  tmpvar_29 = (_LightShadowData.x + (tmpvar_28 * (1.0 - _LightShadowData.x)));
  shadow_27 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = normalize(xlv_TEXCOORD3);
  mediump vec4 tmpvar_31;
  mediump vec3 lightDir_32;
  lightDir_32 = xlv_TEXCOORD1;
  mediump vec3 viewDir_33;
  viewDir_33 = tmpvar_30;
  mediump float atten_34;
  atten_34 = shadow_27;
  lowp vec4 c_35;
  lowp float backContrib_36;
  mediump float tmpvar_37;
  tmpvar_37 = dot (tmpvar_8, lightDir_32);
  mediump float tmpvar_38;
  tmpvar_38 = clamp (dot (viewDir_33, -(lightDir_32)), 0.0, 1.0);
  backContrib_36 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (-(tmpvar_37), 0.0, 1.0);
  lowp float tmpvar_40;
  tmpvar_40 = mix (tmpvar_39, backContrib_36, _TranslucencyViewDependency);
  backContrib_36 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((tmpvar_40 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_6 * ((tmpvar_41 * 2.0) + max (0.0, ((tmpvar_37 * 0.6) + 0.4))));
  c_35.xyz = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43 = ((c_35.xyz + (pow (max (0.0, dot (tmpvar_8, normalize((lightDir_32 + viewDir_33)))), (_Shininess * 128.0)) * tmpvar_7.w)) * _LightColor0.xyz);
  c_35.xyz = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = (c_35.xyz * mix (2.0, (atten_34 * 2.0), _ShadowStrength));
  c_35.xyz = tmpvar_44;
  tmpvar_31 = c_35;
  c_1 = tmpvar_31;
  c_1.xyz = (c_1.xyz + (tmpvar_6 * xlv_TEXCOORD2));
  c_1.xyz = (c_1.xyz + tmpvar_25);
  c_1.w = tmpvar_5.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "VERTEXLIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
#line 680
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 96
highp vec3 Shade4PointLights( in highp vec4 lightPosX, in highp vec4 lightPosY, in highp vec4 lightPosZ, in highp vec3 lightColor0, in highp vec3 lightColor1, in highp vec3 lightColor2, in highp vec3 lightColor3, in highp vec4 lightAttenSq, in highp vec3 pos, in highp vec3 normal ) {
    highp vec4 toLightX = (lightPosX - pos.x);
    highp vec4 toLightY = (lightPosY - pos.y);
    #line 100
    highp vec4 toLightZ = (lightPosZ - pos.z);
    highp vec4 lengthSq = vec4( 0.0);
    lengthSq += (toLightX * toLightX);
    lengthSq += (toLightY * toLightY);
    #line 104
    lengthSq += (toLightZ * toLightZ);
    highp vec4 ndotl = vec4( 0.0);
    ndotl += (toLightX * normal.x);
    ndotl += (toLightY * normal.y);
    #line 108
    ndotl += (toLightZ * normal.z);
    highp vec4 corr = inversesqrt(lengthSq);
    ndotl = max( vec4( 0.0, 0.0, 0.0, 0.0), (ndotl * corr));
    highp vec4 atten = (1.0 / (1.0 + (lengthSq * lightAttenSq)));
    #line 112
    highp vec4 diff = (ndotl * atten);
    highp vec3 col = vec3( 0.0);
    col += (lightColor0 * diff.x);
    col += (lightColor1 * diff.y);
    #line 116
    col += (lightColor2 * diff.z);
    col += (lightColor3 * diff.w);
    return col;
}
#line 531
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 533
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 535
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 537
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 539
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 541
    return SmoothCurve( TriangleWave( x));
}
#line 543
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 545
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 549
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 553
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 557
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 522
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 525
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 529
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 495
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 499
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 569
void TreeVertLeaf( inout appdata_full v ) {
    #line 571
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 575
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 660
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 663
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 worldN = (mat3( _Object2World) * (v.normal * unity_Scale.w));
    #line 667
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    #line 671
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    o.viewDir = viewDirForLight;
    o.vlight = vec3( 0.0);
    highp vec3 worldPos = (_Object2World * v.vertex).xyz;
    #line 675
    o.vlight += Shade4PointLights( unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0, unity_LightColor[0].xyz, unity_LightColor[1].xyz, unity_LightColor[2].xyz, unity_LightColor[3].xyz, unity_4LightAtten0, worldPos, worldN);
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out lowp vec3 xlv_TEXCOORD1;
out lowp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.vlight);
    xlv_TEXCOORD3 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 593
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 626
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 649
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    lowp vec3 lightDir;
    lowp vec3 vlight;
    highp vec3 viewDir;
    highp vec4 _ShadowCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 401
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 405
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 409
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 429
#line 477
#line 495
#line 509
#line 521
uniform highp vec4 _Wind;
#line 589
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 604
#line 620
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 624
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 635
#line 659
uniform highp vec4 _MainTex_ST;
#line 680
uniform lowp float _Cutoff;
#line 604
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 608
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 612
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 616
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 137
mediump vec3 ShadeSH9( in mediump vec4 normal ) {
    mediump vec3 x1;
    mediump vec3 x2;
    mediump vec3 x3;
    x1.x = dot( unity_SHAr, normal);
    #line 141
    x1.y = dot( unity_SHAg, normal);
    x1.z = dot( unity_SHAb, normal);
    mediump vec4 vB = (normal.xyzz * normal.yzzx);
    x2.x = dot( unity_SHBr, vB);
    #line 145
    x2.y = dot( unity_SHBg, vB);
    x2.z = dot( unity_SHBb, vB);
    highp float vC = ((normal.x * normal.x) - (normal.y * normal.y));
    x3 = (unity_SHC.xyz * vC);
    #line 149
    return ((x1 + x2) + x3);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 635
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 639
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 643
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission = (ShadeSH9( vec4( worldNormal.xyz, 1.0)) * o.Albedo);
    #line 647
    o.Emission *= IN.color.w;
}
#line 393
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    lowp float shadow = xll_shadow2D( _ShadowMapTexture, shadowCoord.xyz.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 397
    return shadow;
}
#line 681
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 684
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 688
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 692
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    lowp vec4 c = vec4( 0.0);
    c = LightingTreeLeaf( o, IN.lightDir, normalize(IN.viewDir), atten);
    c.xyz += (o.Albedo * IN.vlight);
    #line 696
    c.xyz += o.Emission;
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in lowp vec3 xlv_TEXCOORD1;
in lowp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.vlight = vec3(xlv_TEXCOORD2);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 8
//   opengl - ALU: 49 to 63, TEX: 4 to 6
//   d3d9 - ALU: 47 to 61, TEX: 5 to 7
//   d3d11 - ALU: 35 to 48, TEX: 4 to 6, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Vector 5 [ExposureIBL]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_DiffCubeIBL] CUBE
"3.0-!!ARBfp1.0
# 52 ALU, 5 TEX
PARAM c[10] = { program.local[0..6],
		{ 2, 1, 0.30541992, 0.68212891 },
		{ 0.012519836, 0.60009766, 0.39990234, 0 },
		{ 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[7].x, -c[7].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
DP3 R0.w, fragment.texcoord[6], fragment.texcoord[6];
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, fragment.texcoord[6];
ADD R3.xyz, R2, fragment.texcoord[4];
DP3 R2.w, R3, R3;
RSQ R2.w, R2.w;
ADD R0.z, -R0, c[7].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
MUL R3.xyz, R2.w, R3;
DP3 R2.w, R0, R3;
DP3 R1.x, fragment.texcoord[1], R0;
DP3 R1.z, R0, fragment.texcoord[3];
DP3 R1.y, R0, fragment.texcoord[2];
DP3 R0.y, R0, fragment.texcoord[4];
TEX R1, R1, texture[4], CUBE;
MOV_SAT R0.x, -R0.y;
MAD R0.w, R1, c[7].z, c[7];
MAD R3.w, R1, R0, c[8].x;
MOV R0.w, c[9].x;
MUL R3.x, R0.w, c[4];
MAX R0.w, R2, c[8];
POW R2.w, R0.w, R3.x;
DP3_SAT R0.z, R2, -fragment.texcoord[4];
ADD R0.z, R0, -R0.x;
MAD R0.z, R0, c[3].x, R0.x;
MAD R0.y, R0, c[8], c[8].z;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2, R0;
TEX R2, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R3.x, R0.y, c[8].w;
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[7].x, R3.x;
MUL R2.xyz, R2, c[1];
MAD R0.xyz, R2, R0, R0.w;
MUL R0.w, R1, R3;
MUL R1.xyz, R1, R0.w;
MUL R1.xyz, R1, c[5].x;
MUL R0.xyz, R0, c[0];
MUL R3.xyz, R2, fragment.texcoord[5];
MAD R0.xyz, R0, c[7].x, R3;
MUL R1.xyz, R1, R2;
MAD result.color.xyz, R1, fragment.color.primary.w, R0;
SLT R0.x, R2.w, c[6];
MOV result.color.w, R2;
KIL -R0.x;
END
# 52 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Vector 5 [ExposureIBL]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_DiffCubeIBL] CUBE
"ps_3_0
; 50 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c7, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c8, 0.30541992, 0.68212891, 0.01251984, 128.00000000
def c9, 0.60009766, 0.39990234, 0, 0
dcl_texcoord0 v0.xy
dcl_color0 v1.xyzw
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
dcl_texcoord4 v5.xyz
dcl_texcoord5 v6.xyz
dcl_texcoord6 v7.xyz
texld r0.yw, v0, s3
mad_pp r2.xy, r0.wyzw, c7.z, c7.w
mul_pp r2.zw, r2.xyxy, r2.xyxy
add_pp_sat r0.w, r2.z, r2
dp3_pp r0.x, v7, v7
rsq_pp r0.x, r0.x
mul_pp r0.xyz, r0.x, v7
add_pp r1.xyz, r0, v5
dp3_pp r1.w, r1, r1
rsq_pp r1.w, r1.w
mul_pp r1.xyz, r1.w, r1
mov_pp r1.w, c4.x
add_pp r0.w, -r0, c7.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
dp3_pp r3.x, r2, v5
dp3_pp_sat r0.x, r0, -v5
mov_pp_sat r3.y, -r3.x
add_pp r0.x, r0, -r3.y
mad_pp r0.y, r0.x, c3.x, r3
dp3_pp r0.w, r2, r1
mad_pp r0.z, r3.x, c9.x, c9.y
texld r0.x, v0, s1
mul_pp r2.w, c8, r1
max_pp r0.w, r0, c7.x
pow_pp r1, r0.w, r2.w
texld r0.w, v0, s2
mul_pp r0.w, r1.x, r0
dp3_pp r1.x, v2, r2
dp3_pp r1.z, r2, v4
dp3_pp r1.y, r2, v3
texld r2, r1, s4
texld r1, v0, s0
max_pp r3.x, r0.z, c7
mul_pp r0.x, r0.y, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c7.z, r3.x
mul_pp r1.xyz, r1, c1
mad_pp r0.xyz, r1, r0, r0.w
mad_pp r0.w, r2, c8.x, c8.y
mad_pp r0.w, r2, r0, c8.z
mul_pp r0.w, r2, r0
mul_pp r2.xyz, r2, r0.w
add_pp r0.w, r1, -c6.x
mul_pp r3.xyz, r1, v6
mul r2.xyz, r2, c5.x
mul_pp r0.xyz, r0, c0
mul r1.xyz, r2, r1
mad_pp r0.xyz, r0, c7.z, r3
cmp r0.w, r0, c7.x, c7.y
mov_pp r2, -r0.w
mad_pp oC0.xyz, r1, v1.w, r0
texkill r2.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Vector 16 [_LightColor0] 4
Vector 64 [_Color] 4
Vector 80 [_TranslucencyColor] 3
Float 92 [_TranslucencyViewDependency]
Float 100 [_Shininess]
Vector 112 [ExposureIBL] 4
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_TranslucencyMap] 2D 3
SetTexture 2 [_GlossMap] 2D 2
SetTexture 3 [_BumpMap] 2D 1
SetTexture 4 [_DiffCubeIBL] CUBE 4
// 54 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedidddlndiebfoamoekiocjdpijcipmecnabaaaaaaniaiaaaaadaaaaaa
cmaaaaaadaabaaaageabaaaaejfdeheopmaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaapfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcgmahaaaaeaaaaaaanlabaaaafjaaaaaeegiocaaaaaaaaaaa
akaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaad
icbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadhcbabaaa
ahaaaaaagcbaaaadhcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaaibcaabaaa
abaaaaaabkiacaaaaaaaaaaaagaaaaaaabeaaaaaaaaaaaedbaaaaaahccaabaaa
abaaaaaaegbcbaaaaiaaaaaaegbcbaaaaiaaaaaaeeaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajhcaabaaaacaaaaaaegbcbaaaaiaaaaaafgafbaaa
abaaaaaaegbcbaaaagaaaaaadiaaaaahhcaabaaaadaaaaaafgafbaaaabaaaaaa
egbcbaaaaiaaaaaabacaaaaiccaabaaaabaaaaaaegacbaaaadaaaaaaegbcbaia
ebaaaaaaagaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaefaaaaajpcaabaaaadaaaaaa
egbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaa
adaaaaaahgapbaaaadaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahecaabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaadaaaaaaddaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaadaaaaaackaabaaaabaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaabaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaadaaaaaaegbcbaaaagaaaaaadgcaaaagicaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaaaaaaaaaaaaaiccaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaadkiacaaaaaaaaaaa
afaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaadiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaadcaaaaamocaabaaaabaaaaaa
agajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaaaaaaeakgakbaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaaagaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaahaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaacaaaaaaegbcbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahccaabaaa
acaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaabaaaaaahecaabaaaacaaaaaa
egbcbaaaafaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaa
acaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadcaaaaajicaabaaaaaaaaaaa
dkaabaaaacaaaaaaabeaaaaabcfbjmdoabeaaaaamekccodpdcaaaaajicaabaaa
aaaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaaabeaaaaamccmendmdiaaaaah
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
egacbaaaacaaaaaaagiacaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaa
aaaaaaaapgbpbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Vector 6 [ExposureIBL]
Float 7 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_DiffCubeIBL] CUBE
SetTexture 5 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 56 ALU, 6 TEX
PARAM c[11] = { program.local[0..7],
		{ 2, 1, 0.30541992, 0.68212891 },
		{ 0.012519836, 0.60009766, 0.39990234, 0 },
		{ 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[8].x, -c[8].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R0.z, -R0, c[8].y;
DP3 R0.w, fragment.texcoord[6], fragment.texcoord[6];
RSQ R0.w, R0.w;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R2.x, fragment.texcoord[1], R0;
DP3 R2.z, R0, fragment.texcoord[3];
DP3 R2.y, R0, fragment.texcoord[2];
TEX R3, R2, texture[4], CUBE;
MUL R1.xyz, R0.w, fragment.texcoord[6];
ADD R2.xyz, R1, fragment.texcoord[4];
DP3 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R0, R2;
DP3 R0.y, R0, fragment.texcoord[4];
MOV_SAT R0.z, -R0.y;
DP3_SAT R0.x, R1, -fragment.texcoord[4];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.w, R3, c[8].z, c[8];
MAD R0.w, R3, R0, c[9].x;
MUL R2.w, R3, R0;
MOV R0.w, c[10].x;
MUL R2.x, R0.w, c[5];
MAX R0.w, R1, c[9];
POW R1.w, R0.w, R2.x;
MAD R0.y, R0, c[9], c[9].z;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[9].w;
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[8].x, R2.x;
MUL R2.xyz, R1, c[1];
MAD R1.xyz, R2, R0, R0.w;
MUL R0.xyz, R3, R2.w;
MUL R3.xyz, R1, c[0];
MUL R1.xyz, R0, c[6].x;
TXP R0.x, fragment.texcoord[7], texture[5], 2D;
MUL R0.yzw, R2.xxyz, fragment.texcoord[5].xxyz;
MOV R2.w, c[8].x;
MAD R0.x, R0, c[8], -c[8];
MAD R0.x, R0, c[4], R2.w;
MAD R0.xyz, R3, R0.x, R0.yzww;
MUL R1.xyz, R1, R2;
MAD result.color.xyz, R1, fragment.color.primary.w, R0;
SLT R0.x, R1.w, c[7];
MOV result.color.w, R1;
KIL -R0.x;
END
# 56 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Vector 6 [ExposureIBL]
Float 7 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_DiffCubeIBL] CUBE
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 53 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c8, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c9, 0.30541992, 0.68212891, 0.01251984, 128.00000000
def c10, 0.60009766, 0.39990234, 0, 0
dcl_texcoord0 v0.xy
dcl_color0 v1.xyzw
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
dcl_texcoord4 v5.xyz
dcl_texcoord5 v6.xyz
dcl_texcoord6 v7.xyz
dcl_texcoord7 v8
dp3_pp r0.x, v7, v7
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v7
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c8.z, c8.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r1.xyz, r2, v5
dp3_pp r0.w, r1, r1
rsq_pp r0.w, r0.w
mov_pp r1.w, c5.x
add_pp r0.z, -r0, c8.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
mul_pp r1.xyz, r0.w, r1
dp3_pp r0.w, r0, r1
mul_pp r2.w, c9, r1
max_pp r0.w, r0, c8.x
pow_pp r1, r0.w, r2.w
texld r0.w, v0, s2
mul_pp r3.x, r1, r0.w
dp3_pp r1.x, v2, r0
dp3_pp r1.z, r0, v4
dp3_pp r1.y, r0, v3
dp3_pp r0.y, r0, v5
texld r1, r1, s4
mov_pp_sat r0.x, -r0.y
dp3_pp_sat r0.z, r2, -v5
texld r2, v0, s0
add_pp r0.z, r0, -r0.x
mad_pp r0.z, r0, c3.x, r0.x
mad_pp r0.w, r1, c9.x, c9.y
mad_pp r0.w, r1, r0, c9.z
mul_pp r1.w, r1, r0
mul_pp r1.xyz, r1, r1.w
mad_pp r0.y, r0, c10.x, c10
texld r0.x, v0, s1
max_pp r3.y, r0, c8.x
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c8.z, r3.y
mul_pp r2.xyz, r2, c1
mad_pp r0.xyz, r2, r0, r3.x
mul_pp r3.xyz, r0, c0
texldp r0.x, v8, s5
mul_pp r0.yzw, r2.xxyz, v6.xxyz
mul r1.xyz, r1, c6.x
mul r2.xyz, r1, r2
mov_pp r3.w, c8.z
mad_pp r0.x, r0, c8.z, -c8.z
mad_pp r0.x, r0, c4, r3.w
mad_pp r0.xyz, r3, r0.x, r0.yzww
add_pp r0.w, r2, -c7.x
cmp r0.w, r0, c8.x, c8.y
mov_pp r1, -r0.w
mad_pp oC0.xyz, r2, v1.w, r0
texkill r1.xyzw
mov_pp oC0.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 160 [_ShadowStrength]
Float 164 [_Shininess]
Vector 176 [ExposureIBL] 4
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_DiffCubeIBL] CUBE 5
SetTexture 5 [_ShadowMapTexture] 2D 0
// 58 instructions, 4 temp regs, 0 temp arrays:
// ALU 48 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedolefididnkkhajbdaibgchmnfmahlkgoabaaaaaakeajaaaaadaaaaaa
cmaaaaaaeiabaaaahmabaaaaejfdeheobeabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaanabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaaahahaaaaaeabaaaa
agaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahahaaaaaeabaaaaahaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
caaiaaaaeaaaaaaaaiacaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadicbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadhcbabaaaahaaaaaagcbaaaadhcbabaaa
aiaaaaaagcbaaaadlcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaa
egbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaeaabeaaaaaaaaaaamadcaaaaakbcaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaea
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaa
aaaaaaedbaaaaaahecaabaaaabaaaaaaegbcbaaaaiaaaaaaegbcbaaaaiaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajhcaabaaaacaaaaaa
egbcbaaaaiaaaaaakgakbaaaabaaaaaaegbcbaaaagaaaaaadiaaaaahhcaabaaa
adaaaaaakgakbaaaabaaaaaaegbcbaaaaiaaaaaabacaaaaiecaabaaaabaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaagaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
efaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
acaaaaaadcaaaaapdcaabaaaadaaaaaahgapbaaaadaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaadaaaaaaddaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
adaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaadaaaaaa
egacbaaaacaaaaaadeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaadkaabaaaacaaaaaabkaabaaa
abaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaadaaaaaaegbcbaaaagaaaaaa
dgcaaaagbcaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaadcaaaaakecaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaackaabaaaabaaaaaaakaabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaakgakbaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
dcaaaaamhcaabaaaacaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaapgapbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajocaabaaaabaaaaaaagajbaaaaaaaaaaaagajbaaaacaaaaaa
fgafbaaaabaaaaaadiaaaaaiocaabaaaabaaaaaafgaobaaaabaaaaaaagijcaaa
aaaaaaaaabaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaaaaaaaaaegbcbaaa
ahaaaaaadcaaaaajhcaabaaaabaaaaaajgahbaaaabaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaadaaaaaaegacbaaa
adaaaaaabaaaaaahccaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaa
baaaaaahecaabaaaacaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
dcaaaaajicaabaaaaaaaaaaadkaabaaaacaaaaaaabeaaaaabcfbjmdoabeaaaaa
mekccodpdcaaaaajicaabaaaaaaaaaaadkaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaamccmendmdiaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaadkaabaaa
acaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaegacbaaaacaaaaaaagiacaaaaaaaaaaaalaaaaaa
diaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaaj
hccabaaaaaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaaegacbaaaabaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [unity_SHAr]
Vector 1 [unity_SHAg]
Vector 2 [unity_SHAb]
Vector 3 [unity_SHBr]
Vector 4 [unity_SHBg]
Vector 5 [unity_SHBb]
Vector 6 [unity_SHC]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Vector 9 [_TranslucencyColor]
Float 10 [_TranslucencyViewDependency]
Float 11 [_Shininess]
Float 12 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"3.0-!!ARBfp1.0
# 59 ALU, 4 TEX
PARAM c[15] = { program.local[0..12],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R4.xy, R0.wyzw, c[13].x, -c[13].y;
MUL R0.xy, R4, R4;
ADD_SAT R0.x, R0, R0.y;
ADD R0.x, -R0, c[13].y;
RSQ R0.z, R0.x;
RCP R3.w, R0.z;
MOV R0.xy, R4;
MOV R0.z, R3.w;
MOV R0.w, c[13].y;
MUL R2, R0.xyzz, R0.yzzx;
DP4 R1.z, R0, c[2];
DP4 R1.y, R0, c[1];
DP4 R1.x, R0, c[0];
DP3 R0.w, fragment.texcoord[3], fragment.texcoord[3];
DP4 R0.z, R2, c[5];
DP4 R0.y, R2, c[4];
DP4 R0.x, R2, c[3];
ADD R2.xyz, R1, R0;
RSQ R0.w, R0.w;
MUL R0.xyz, R0.w, fragment.texcoord[3];
ADD R3.xyz, R0, fragment.texcoord[1];
MUL R0.w, R4.y, R4.y;
MAD R0.w, R4.x, R4.x, -R0;
MUL R1.xyz, R0.w, c[6];
DP3 R2.w, R3, R3;
DP3_SAT R0.x, R0, -fragment.texcoord[1];
RSQ R0.w, R2.w;
ADD R1.xyz, R2, R1;
MUL R2.xyz, R0.w, R3;
MOV R4.z, R3.w;
DP3 R3.x, fragment.texcoord[1], R4;
MOV_SAT R3.y, -R3.x;
ADD R0.x, R0, -R3.y;
MAD R0.y, R0.x, c[10].x, R3;
MAD R0.z, R3.x, c[13], c[13].w;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
DP3 R2.x, R4, R2;
MOV R0.w, c[14].y;
MUL R2.y, R0.w, c[11].x;
MAX R0.w, R2.x, c[14].x;
POW R2.x, R0.w, R2.y;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
TEX R2, fragment.texcoord[0], texture[0], 2D;
MUL R2.xyz, R2, c[8];
MAX R3.x, R0.z, c[14];
MUL R0.x, R0.y, R0;
MUL R0.xyz, R0.x, c[9];
MAD R0.xyz, R0, c[13].x, R3.x;
MAD R0.xyz, R2, R0, R0.w;
MUL R3.xyz, R2, fragment.texcoord[2];
MUL R0.xyz, R0, c[7];
MAD R0.xyz, R0, c[13].x, R3;
MUL R1.xyz, R1, R2;
MAD result.color.xyz, R1, R1.w, R0;
SLT R0.x, R2.w, c[12];
MOV result.color.w, R2;
KIL -R0.x;
END
# 59 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [unity_SHAr]
Vector 1 [unity_SHAg]
Vector 2 [unity_SHAb]
Vector 3 [unity_SHBr]
Vector 4 [unity_SHBg]
Vector 5 [unity_SHBb]
Vector 6 [unity_SHC]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Vector 9 [_TranslucencyColor]
Float 10 [_TranslucencyViewDependency]
Float 11 [_Shininess]
Float 12 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 58 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c13, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c14, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
texld r0.yw, v0, s3
dp3_pp r0.x, v3, v3
rsq_pp r0.z, r0.x
mad_pp r2.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.w, r0.x, r0.y
mul_pp r3.xyz, r0.z, v3
add_pp r0.xyz, r3, v1
dp3_pp r1.x, r0, r0
rsq_pp r1.y, r1.x
add_pp r0.w, -r0, c13.y
rsq_pp r0.w, r0.w
rcp_pp r1.x, r0.w
mul_pp r0.xyz, r1.y, r0
mov_pp r2.z, r1.x
dp3_pp r3.w, r2, r0
mov r0.xy, r2
mov r0.z, r1.x
mov r0.w, c13.y
mul_pp r1, r0.xyzz, r0.yzzx
dp4 r4.z, r0, c2
dp4 r4.y, r0, c1
dp4 r4.x, r0, c0
dp4 r0.z, r1, c5
dp4 r0.x, r1, c3
dp4 r0.y, r1, c4
add_pp r1.xyz, r4, r0
mul_pp r0.x, r2.y, r2.y
mov_pp r0.y, c11.x
mad_pp r1.w, r2.x, r2.x, -r0.x
mul_pp r4.x, c14.z, r0.y
max_pp r3.w, r3, c13.x
pow_pp r0, r3.w, r4.x
dp3_pp r0.y, v1, r2
mov_pp_sat r0.z, -r0.y
mul r4.xyz, r1.w, c6
mad_pp r0.y, r0, c14.x, c14
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r3, -v1
texld r3, v0, s0
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c10.x, r0
texld r0.x, v0, s1
mul_pp r2.xyz, r3, c8
add_pp r1.xyz, r1, r4
max_pp r1.w, r0.y, c13.x
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c9
mad_pp r0.xyz, r0, c13.z, r1.w
mad_pp r0.xyz, r2, r0, r0.w
mul_pp r1.xyz, r1, r2
add_pp r0.w, r3, -c12.x
mul_pp r0.xyz, r0, c7
mul_pp r2.xyz, r2, v2
mad_pp r2.xyz, r0, c13.z, r2
cmp r0.w, r0, c13.x, c13.y
mov_pp r0, -r0.w
mad_pp oC0.xyz, r1, r2.w, r2
texkill r0.xyzw
mov_pp oC0.w, r3
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Vector 16 [_LightColor0] 4
Vector 64 [_Color] 4
Vector 80 [_TranslucencyColor] 3
Float 92 [_TranslucencyViewDependency]
Float 100 [_Shininess]
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_TranslucencyMap] 2D 3
SetTexture 2 [_GlossMap] 2D 2
SetTexture 3 [_BumpMap] 2D 1
// 43 instructions, 3 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedidgelaaahigbbaeaafldgmccammkmcheabaaaaaanaagaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcmiafaaaaeaaaaaaahcabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaa
abaaaaaadkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaa
abaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaa
agbjbaaaaeaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaabacaaaaibcaabaaaabaaaaaa
egacbaaaacaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaa
jgahbaaaabaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaadkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaa
jgahbaaaabaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaa
acaaaaaadeaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaa
bkiacaaaaaaaaaaaagaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaa
acaaaaaadgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdo
deaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaak
bcaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaaakaabaaaabaaaaaadkaabaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaaaaaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaadgaaaaaficcabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaigadbaaa
abaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
adaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [unity_SHAr]
Vector 1 [unity_SHAg]
Vector 2 [unity_SHAb]
Vector 3 [unity_SHBr]
Vector 4 [unity_SHBg]
Vector 5 [unity_SHBb]
Vector 6 [unity_SHC]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Vector 9 [_TranslucencyColor]
Float 10 [_TranslucencyViewDependency]
Float 11 [_ShadowStrength]
Float 12 [_Shininess]
Float 13 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 63 ALU, 5 TEX
PARAM c[16] = { program.local[0..13],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R5.xy, R0.wyzw, c[14].x, -c[14].y;
MUL R0.xy, R5, R5;
ADD_SAT R0.x, R0, R0.y;
ADD R0.x, -R0, c[14].y;
RSQ R0.z, R0.x;
RCP R2.w, R0.z;
DP3 R2.x, fragment.texcoord[3], fragment.texcoord[3];
RSQ R2.x, R2.x;
MUL R2.xyz, R2.x, fragment.texcoord[3];
ADD R3.xyz, R2, fragment.texcoord[1];
DP3 R3.w, R3, R3;
MOV R0.z, R2.w;
MOV R0.xy, R5;
MOV R0.w, c[14].y;
MOV R5.z, R2.w;
DP4 R1.z, R0, c[2];
DP4 R1.y, R0, c[1];
DP4 R1.x, R0, c[0];
MUL R0, R0.xyzz, R0.yzzx;
DP4 R4.z, R0, c[5];
DP4 R4.y, R0, c[4];
DP4 R4.x, R0, c[3];
RSQ R0.x, R3.w;
MUL R0.xyz, R0.x, R3;
DP3 R0.x, R5, R0;
MOV R0.w, c[15].y;
MUL R0.y, R0.w, c[12].x;
MAX R0.x, R0, c[15];
POW R2.w, R0.x, R0.y;
DP3 R0.y, fragment.texcoord[1], R5;
MOV_SAT R0.z, -R0.y;
DP3_SAT R0.x, R2, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[10].x, R0;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R3.x, R5.y, R5.y;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
ADD R1.xyz, R1, R4;
MUL R2.w, R2, R0;
MAD R0.y, R0, c[14].z, c[14].w;
MAX R0.w, R0.y, c[15].x;
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[9];
MAD R2.xyz, R0, c[14].x, R0.w;
TEX R0, fragment.texcoord[0], texture[0], 2D;
MAD R3.w, R5.x, R5.x, -R3.x;
MUL R3.xyz, R0, c[8];
MUL R0.xyz, R3.w, c[6];
ADD R1.xyz, R1, R0;
MAD R2.xyz, R3, R2, R2.w;
TXP R0.x, fragment.texcoord[4], texture[4], 2D;
MOV R0.y, c[14].x;
MAD R0.x, R0, c[14], -c[14];
MUL R2.xyz, R2, c[7];
MUL R4.xyz, R3, fragment.texcoord[2];
MAD R0.x, R0, c[11], R0.y;
MAD R0.xyz, R2, R0.x, R4;
MUL R1.xyz, R1, R3;
MAD result.color.xyz, R1, R1.w, R0;
SLT R0.x, R0.w, c[13];
MOV result.color.w, R0;
KIL -R0.x;
END
# 63 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [unity_SHAr]
Vector 1 [unity_SHAg]
Vector 2 [unity_SHAb]
Vector 3 [unity_SHBr]
Vector 4 [unity_SHBg]
Vector 5 [unity_SHBb]
Vector 6 [unity_SHC]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Vector 9 [_TranslucencyColor]
Float 10 [_TranslucencyViewDependency]
Float 11 [_ShadowStrength]
Float 12 [_Shininess]
Float 13 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"ps_3_0
; 61 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c14, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c15, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
texld r0.yw, v0, s3
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c14.y
rsq_pp r0.z, r0.x
rcp_pp r2.z, r0.z
mov r0.xy, r2
mov r0.z, r2
mov r0.w, c14.y
mul_pp r1, r0.xyzz, r0.yzzx
dp4 r3.z, r0, c2
dp4 r3.y, r0, c1
dp4 r3.x, r0, c0
dp3_pp r0.w, v3, v3
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, v3
mul_pp r0.w, r2.y, r2.y
dp4 r0.z, r1, c5
dp4 r0.y, r1, c4
dp4 r0.x, r1, c3
add_pp r1.xyz, r3, r0
mad_pp r0.w, r2.x, r2.x, -r0
add_pp r0.xyz, r4, v1
mul r3.xyz, r0.w, c6
dp3_pp r1.w, r0, r0
rsq_pp r0.w, r1.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r0.x, r2, r0
add_pp r3.xyz, r1, r3
texld r1, v0, s0
mul_pp r1.xyz, r1, c8
mov_pp r0.y, c12.x
max_pp r3.w, r0.x, c14.x
mul_pp r4.w, c15.z, r0.y
pow_pp r0, r3.w, r4.w
dp3_pp r0.y, v1, r2
mov_pp_sat r0.z, -r0.y
mov_pp r3.w, r0.x
mad_pp r0.y, r0, c15.x, c15
dp3_pp_sat r0.x, r4, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c10.x, r0
texld r0.w, v0, s2
texld r0.x, v0, s1
max_pp r2.x, r0.y, c14
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c9
mad_pp r0.xyz, r0, c14.z, r2.x
mul_pp r0.w, r3, r0
mad_pp r0.xyz, r1, r0, r0.w
mul_pp r2.xyz, r0, c7
mul_pp r3.xyz, r3, r1
add_pp r0.w, r1, -c13.x
texldp r0.x, v4, s4
mov_pp r0.z, c14
mad_pp r0.x, r0, c14.z, -c14.z
mad_pp r0.x, r0, c11, r0.z
mul_pp r1.xyz, r1, v2
mad_pp r1.xyz, r2, r0.x, r1
cmp r0.y, r0.w, c14.x, c14
mov_pp r0, -r0.y
mad_pp oC0.xyz, r3, r2.w, r1
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 160 [_ShadowStrength]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_ShadowMapTexture] 2D 0
// 47 instructions, 3 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeflbhcbjkfbighcofdgggoogbhjokecoabaaaaaajmahaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmagaaaa
eaaaaaaajpabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadlcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaa
abaaaaaadkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaa
abaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaa
agbjbaaaaeaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaabacaaaaibcaabaaaabaaaaaa
egacbaaaacaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaa
jgahbaaaabaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
acaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaadkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaa
jgahbaaaabaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaa
acaaaaaadeaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaa
bkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaa
acaaaaaadgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdo
deaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaak
bcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaadkaabaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaa
ajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaaaaaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaigadbaaa
abaaaaaafgafbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaadaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaabaaaaaaaoaaaaahdcaabaaaacaaaaaaegbabaaaafaaaaaapgbpbaaa
afaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaaeaaaaaa
aagabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaaeaabeaaaaaaaaaaamadcaaaaakicaabaaaaaaaaaaaakiacaaaaaaaaaaa
akaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaeadcaaaaajhccabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Vector 5 [ExposureIBL]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_DiffCubeIBL] CUBE
"3.0-!!ARBfp1.0
# 49 ALU, 5 TEX
PARAM c[9] = { program.local[0..6],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R3.xy, R0.wyzw, c[7].x, -c[7].y;
MUL R2.xy, R3, R3;
ADD_SAT R0.w, R2.x, R2.y;
DP3 R0.x, fragment.texcoord[6], fragment.texcoord[6];
RSQ R0.x, R0.x;
MUL R0.xyz, R0.x, fragment.texcoord[6];
ADD R1.xyz, R0, fragment.texcoord[4];
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
ADD R0.w, -R0, c[7].y;
RSQ R0.w, R0.w;
RCP R3.z, R0.w;
MUL R1.xyz, R1.w, R1;
DP3 R2.x, R3, fragment.texcoord[4];
DP3_SAT R0.x, R0, -fragment.texcoord[4];
MOV_SAT R2.y, -R2.x;
ADD R0.x, R0, -R2.y;
MAD R0.y, R0.x, c[3].x, R2;
MAD R0.z, R2.x, c[7], c[7].w;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
DP3 R1.x, R3, R1;
MOV R0.w, c[8].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[8].x;
POW R1.x, R0.w, R1.y;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1.x, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
MAX R2.x, R0.z, c[8];
MUL R0.x, R0.y, R0;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[7].x, R2.x;
MUL R1.xyz, R1, c[1];
MAD R2.xyz, R1, R0, R0.w;
DP3 R0.x, fragment.texcoord[1], R3;
DP3 R0.z, R3, fragment.texcoord[3];
DP3 R0.y, R3, fragment.texcoord[2];
TEX R0, R0, texture[4], CUBE;
MUL R0.xyz, R0, R0.w;
MUL R0.xyz, R0, c[5].x;
MUL R0.xyz, R0, R1;
MUL R2.xyz, R2, c[0];
MUL R3.xyz, R1, fragment.texcoord[5];
MAD R2.xyz, R2, c[7].x, R3;
MAD result.color.xyz, R0, fragment.color.primary.w, R2;
SLT R0.x, R1.w, c[6];
MOV result.color.w, R1;
KIL -R0.x;
END
# 49 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Vector 5 [ExposureIBL]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_DiffCubeIBL] CUBE
"ps_3_0
; 47 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c7, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c8, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_color0 v1.xyzw
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
dcl_texcoord4 v5.xyz
dcl_texcoord5 v6.xyz
dcl_texcoord6 v7.xyz
texld r0.yw, v0, s3
mad_pp r4.xy, r0.wyzw, c7.z, c7.w
mul_pp r2.xy, r4, r4
add_pp_sat r0.w, r2.x, r2.y
dp3_pp r0.x, v7, v7
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v7
add_pp r0.xyz, r1, v5
dp3_pp r1.w, r0, r0
rsq_pp r1.w, r1.w
add_pp r0.w, -r0, c7.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul_pp r0.xyz, r1.w, r0
mov_pp r0.w, c4.x
dp3_pp r0.x, r4, r0
mul_pp r2.x, c8.z, r0.w
max_pp r1.w, r0.x, c7.x
pow_pp r0, r1.w, r2.x
dp3_pp r0.y, r4, v5
mov_pp_sat r0.z, -r0.y
mad_pp r0.y, r0, c8.x, c8
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r1, -v5
texld r1, v0, s0
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mul_pp r1.xyz, r1, c1
texld r0.x, v0, s1
max_pp r2.x, r0.y, c7
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c7.z, r2.x
mad_pp r0.xyz, r1, r0, r0.w
mul_pp r2.xyz, r0, c0
mul_pp r3.xyz, r1, v6
dp3_pp r0.x, v2, r4
dp3_pp r0.z, r4, v4
dp3_pp r0.y, r4, v3
texld r0, r0, s4
mul_pp r0.xyz, r0, r0.w
mul r0.xyz, r0, c5.x
add_pp r0.w, r1, -c6.x
mul r1.xyz, r0, r1
mad_pp r2.xyz, r2, c7.z, r3
cmp r0.w, r0, c7.x, c7.y
mov_pp r0, -r0.w
mad_pp oC0.xyz, r1, v1.w, r2
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Vector 16 [_LightColor0] 4
Vector 64 [_Color] 4
Vector 80 [_TranslucencyColor] 3
Float 92 [_TranslucencyViewDependency]
Float 100 [_Shininess]
Vector 112 [ExposureIBL] 4
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_TranslucencyMap] 2D 3
SetTexture 2 [_GlossMap] 2D 2
SetTexture 3 [_BumpMap] 2D 1
SetTexture 4 [_DiffCubeIBL] CUBE 4
// 51 instructions, 4 temp regs, 0 temp arrays:
// ALU 42 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlcocabkbpamfihadflefakpcnalkbechabaaaaaaheaiaaaaadaaaaaa
cmaaaaaadaabaaaageabaaaaejfdeheopmaaaaaaajaaaaaaaiaaaaaaoaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaomaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaapfaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaiaaaaomaaaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaomaaaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaomaaaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaomaaaaaaaeaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaomaaaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaaahahaaaaomaaaaaa
agaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaa
caaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgf
heaaklklfdeieefcaiahaaaaeaaaaaaamcabaaaafjaaaaaeegiocaaaaaaaaaaa
akaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaad
aagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaa
fibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaa
fibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaa
fidaaaaeaahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaad
icbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gcbaaaadhcbabaaaafaaaaaagcbaaaadhcbabaaaagaaaaaagcbaaaadhcbabaaa
ahaaaaaagcbaaaadhcbabaaaaiaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaaaaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaaefaaaaajpcaabaaaabaaaaaa
egbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaaacaaaaaadiaaaaaibcaabaaa
abaaaaaabkiacaaaaaaaaaaaagaaaaaaabeaaaaaaaaaaaedbaaaaaahccaabaaa
abaaaaaaegbcbaaaaiaaaaaaegbcbaaaaiaaaaaaeeaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadcaaaaajhcaabaaaacaaaaaaegbcbaaaaiaaaaaafgafbaaa
abaaaaaaegbcbaaaagaaaaaadiaaaaahhcaabaaaadaaaaaafgafbaaaabaaaaaa
egbcbaaaaiaaaaaabacaaaaiccaabaaaabaaaaaaegacbaaaadaaaaaaegbcbaia
ebaaaaaaagaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaa
acaaaaaaeeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaefaaaaajpcaabaaaadaaaaaa
egbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaadcaaaaapdcaabaaa
adaaaaaahgapbaaaadaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaa
aceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaahecaabaaaabaaaaaa
egaabaaaadaaaaaaegaabaaaadaaaaaaddaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaaiadpaaaaaaaiecaabaaaabaaaaaackaabaiaebaaaaaa
abaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaadaaaaaackaabaaaabaaaaaa
baaaaaahecaabaaaabaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaafecaabaaa
abaaaaaackaabaaaabaaaaaadiaaaaahbcaabaaaabaaaaaackaabaaaabaaaaaa
akaabaaaabaaaaaabjaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaah
bcaabaaaabaaaaaadkaabaaaabaaaaaaakaabaaaabaaaaaabaaaaaahecaabaaa
abaaaaaaegacbaaaadaaaaaaegbcbaaaagaaaaaadgcaaaagicaabaaaabaaaaaa
ckaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaaabaaaaaackaabaaaabaaaaaa
abeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaahecaabaaaabaaaaaackaabaaa
abaaaaaaabeaaaaaaaaaaaaaaaaaaaaiccaabaaaabaaaaaadkaabaiaebaaaaaa
abaaaaaabkaabaaaabaaaaaadcaaaaakccaabaaaabaaaaaadkiacaaaaaaaaaaa
afaaaaaabkaabaaaabaaaaaadkaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaa
egbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaaadaaaaaadiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaa
fgafbaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaadcaaaaamocaabaaaabaaaaaa
agajbaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaeaaaaaaaeaaaaaaaeakgakbaaa
abaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaajgahbaaaabaaaaaaagaabaaaabaaaaaadiaaaaai
hcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaaaaaaaaaaabaaaaaaaaaaaaah
hcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaadcaaaaajhcaabaaa
abaaaaaaegacbaaaaaaaaaaaegbcbaaaahaaaaaaegacbaaaabaaaaaabaaaaaah
bcaabaaaacaaaaaaegbcbaaaadaaaaaaegacbaaaadaaaaaabaaaaaahccaabaaa
acaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaabaaaaaahecaabaaaacaaaaaa
egbcbaaaafaaaaaaegacbaaaadaaaaaaefaaaaajpcaabaaaacaaaaaaegacbaaa
acaaaaaaeghobaaaaeaaaaaaaagabaaaaeaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaacaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaegacbaaa
acaaaaaaagiacaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaacaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaaaaaaaaa
pgbpbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Vector 6 [ExposureIBL]
Float 7 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_DiffCubeIBL] CUBE
SetTexture 5 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 53 ALU, 6 TEX
PARAM c[10] = { program.local[0..7],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R1.xy, R0.wyzw, c[8].x, -c[8].y;
MUL R1.zw, R1.xyxy, R1.xyxy;
ADD_SAT R0.w, R1.z, R1;
DP3 R0.x, fragment.texcoord[6], fragment.texcoord[6];
RSQ R0.x, R0.x;
MUL R0.xyz, R0.x, fragment.texcoord[6];
ADD R2.xyz, R0, fragment.texcoord[4];
DP3 R1.z, R2, R2;
RSQ R1.z, R1.z;
ADD R0.w, -R0, c[8].y;
MUL R2.xyz, R1.z, R2;
RSQ R0.w, R0.w;
RCP R1.z, R0.w;
DP3 R1.w, R1, R2;
DP3 R3.x, R1, fragment.texcoord[4];
DP3_SAT R0.x, R0, -fragment.texcoord[4];
MOV_SAT R3.y, -R3.x;
ADD R0.x, R0, -R3.y;
MAD R0.y, R0.x, c[3].x, R3;
MAD R0.z, R3.x, c[8], c[8].w;
MOV R0.w, c[9].y;
MUL R2.x, R0.w, c[5];
MAX R1.w, R1, c[9].x;
POW R1.w, R1.w, R2.x;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.w, R1, R0;
MAX R3.x, R0.z, c[9];
MUL R0.x, R0.y, R0;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[8].x, R3.x;
DP3 R2.x, fragment.texcoord[1], R1;
DP3 R2.z, R1, fragment.texcoord[3];
DP3 R2.y, R1, fragment.texcoord[2];
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R2, R2, texture[4], CUBE;
MUL R2.xyz, R2, R2.w;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R3.xyz, R0, c[0];
TXP R0.x, fragment.texcoord[7], texture[5], 2D;
MUL R0.yzw, R1.xxyz, fragment.texcoord[5].xxyz;
MUL R2.xyz, R2, c[6].x;
MOV R2.w, c[8].x;
MAD R0.x, R0, c[8], -c[8];
MAD R0.x, R0, c[4], R2.w;
MAD R0.xyz, R3, R0.x, R0.yzww;
MUL R1.xyz, R2, R1;
MAD result.color.xyz, R1, fragment.color.primary.w, R0;
SLT R0.x, R1.w, c[7];
MOV result.color.w, R1;
KIL -R0.x;
END
# 53 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Vector 6 [ExposureIBL]
Float 7 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_DiffCubeIBL] CUBE
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 50 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
dcl_2d s5
def c8, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c9, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_color0 v1.xyzw
dcl_texcoord1 v2.xyz
dcl_texcoord2 v3.xyz
dcl_texcoord3 v4.xyz
dcl_texcoord4 v5.xyz
dcl_texcoord5 v6.xyz
dcl_texcoord6 v7.xyz
dcl_texcoord7 v8
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c8.z, c8.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v7, v7
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v7
add_pp r0.xyz, r2, v5
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c8.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c5.x
mul_pp r2.w, c9.z, r0
max_pp r1.w, r0.x, c8.x
pow_pp r0, r1.w, r2.w
dp3_pp r0.y, r1, v5
mov_pp_sat r0.z, -r0.y
mad_pp r0.y, r0, c9.x, c9
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v5
texld r2, v0, s0
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
texld r0.x, v0, s1
max_pp r1.w, r0.y, c8.x
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c8.z, r1.w
mul_pp r2.xyz, r2, c1
mad_pp r0.xyz, r2, r0, r0.w
mul_pp r3.xyz, r0, c0
dp3_pp r0.x, v2, r1
dp3_pp r0.z, r1, v4
dp3_pp r0.y, r1, v3
texld r1, r0, s4
mul_pp r1.xyz, r1, r1.w
texldp r0.x, v8, s5
mul_pp r0.yzw, r2.xxyz, v6.xxyz
mul r1.xyz, r1, c6.x
mul r2.xyz, r1, r2
mov_pp r3.w, c8.z
mad_pp r0.x, r0, c8.z, -c8.z
mad_pp r0.x, r0, c4, r3.w
mad_pp r0.xyz, r3, r0.x, r0.yzww
add_pp r0.w, r2, -c7.x
cmp r0.w, r0, c8.x, c8.y
mov_pp r1, -r0.w
mad_pp oC0.xyz, r2, v1.w, r0
texkill r1.xyzw
mov_pp oC0.w, r2
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 160 [_ShadowStrength]
Float 164 [_Shininess]
Vector 176 [ExposureIBL] 4
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_DiffCubeIBL] CUBE 5
SetTexture 5 [_ShadowMapTexture] 2D 0
// 55 instructions, 4 temp regs, 0 temp arrays:
// ALU 45 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedleeikapogcapdedbnbcgoicjcfnhplepabaaaaaaeaajaaaaadaaaaaa
cmaaaaaaeiabaaaahmabaaaaejfdeheobeabaaaaakaaaaaaaiaaaaaapiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaaeabaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaanabaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaiaaaaaeabaaaaabaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaaeabaaaa
acaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaaaeabaaaaadaaaaaaaaaaaaaa
adaaaaaaafaaaaaaahahaaaaaeabaaaaaeaaaaaaaaaaaaaaadaaaaaaagaaaaaa
ahahaaaaaeabaaaaafaaaaaaaaaaaaaaadaaaaaaahaaaaaaahahaaaaaeabaaaa
agaaaaaaaaaaaaaaadaaaaaaaiaaaaaaahahaaaaaeabaaaaahaaaaaaaaaaaaaa
adaaaaaaajaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaedepemepfcaaklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaa
aaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefc
lmahaaaaeaaaaaaaopabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafkaaaaad
aagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaa
fkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaadaagabaaa
afaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaa
ffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaa
ffffaaaafidaaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaaafaaaaaa
ffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadicbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadhcbabaaaafaaaaaa
gcbaaaadhcbabaaaagaaaaaagcbaaaadhcbabaaaahaaaaaagcbaaaadhcbabaaa
aiaaaaaagcbaaaadlcbabaaaajaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
aeaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaa
egbabaaaajaaaaaapgbpbaaaajaaaaaaefaaaaajpcaabaaaabaaaaaaegaabaaa
abaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaadcaaaaajbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaeaabeaaaaaaaaaaamadcaaaaakbcaabaaa
abaaaaaaakiacaaaaaaaaaaaakaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaea
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaadiaaaaaiccaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaa
aaaaaaedbaaaaaahecaabaaaabaaaaaaegbcbaaaaiaaaaaaegbcbaaaaiaaaaaa
eeaaaaafecaabaaaabaaaaaackaabaaaabaaaaaadcaaaaajhcaabaaaacaaaaaa
egbcbaaaaiaaaaaakgakbaaaabaaaaaaegbcbaaaagaaaaaadiaaaaahhcaabaaa
adaaaaaakgakbaaaabaaaaaaegbcbaaaaiaaaaaabacaaaaiecaabaaaabaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaagaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
efaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
acaaaaaadcaaaaapdcaabaaaadaaaaaahgapbaaaadaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaabaaaaaaegaabaaaadaaaaaaegaabaaaadaaaaaaddaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
adaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaadaaaaaa
egacbaaaacaaaaaadeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahccaabaaa
abaaaaaadkaabaaaabaaaaaabkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaadiaaaaahccaabaaaabaaaaaadkaabaaaacaaaaaabkaabaaa
abaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaadaaaaaaegbcbaaaagaaaaaa
dgcaaaagbcaabaaaacaaaaaadkaabaiaebaaaaaaabaaaaaadcaaaaajicaabaaa
abaaaaaadkaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiecaabaaa
abaaaaaackaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaadcaaaaakecaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaackaabaaaabaaaaaaakaabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaadiaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaakgakbaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
dcaaaaamhcaabaaaacaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaapgapbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajocaabaaaabaaaaaaagajbaaaaaaaaaaaagajbaaaacaaaaaa
fgafbaaaabaaaaaadiaaaaaiocaabaaaabaaaaaafgaobaaaabaaaaaaagijcaaa
aaaaaaaaabaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaaaaaaaaaegbcbaaa
ahaaaaaadcaaaaajhcaabaaaabaaaaaajgahbaaaabaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegbcbaaaadaaaaaaegacbaaa
adaaaaaabaaaaaahccaabaaaacaaaaaaegbcbaaaaeaaaaaaegacbaaaadaaaaaa
baaaaaahecaabaaaacaaaaaaegbcbaaaafaaaaaaegacbaaaadaaaaaaefaaaaaj
pcaabaaaacaaaaaaegacbaaaacaaaaaaeghobaaaaeaaaaaaaagabaaaafaaaaaa
diaaaaahhcaabaaaacaaaaaapgapbaaaacaaaaaaegacbaaaacaaaaaadiaaaaai
hcaabaaaacaaaaaaegacbaaaacaaaaaaagiacaaaaaaaaaaaalaaaaaadiaaaaah
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaacaaaaaadcaaaaajhccabaaa
aaaaaaaaegacbaaaaaaaaaaapgbpbaaaacaaaaaaegacbaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [unity_SHAr]
Vector 1 [unity_SHAg]
Vector 2 [unity_SHAb]
Vector 3 [unity_SHBr]
Vector 4 [unity_SHBg]
Vector 5 [unity_SHBb]
Vector 6 [unity_SHC]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Vector 9 [_TranslucencyColor]
Float 10 [_TranslucencyViewDependency]
Float 11 [_Shininess]
Float 12 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"3.0-!!ARBfp1.0
# 59 ALU, 4 TEX
PARAM c[15] = { program.local[0..12],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R4.xy, R0.wyzw, c[13].x, -c[13].y;
MUL R0.xy, R4, R4;
ADD_SAT R0.x, R0, R0.y;
ADD R0.x, -R0, c[13].y;
RSQ R0.z, R0.x;
RCP R3.w, R0.z;
MOV R0.xy, R4;
MOV R0.z, R3.w;
MOV R0.w, c[13].y;
MUL R2, R0.xyzz, R0.yzzx;
DP4 R1.z, R0, c[2];
DP4 R1.y, R0, c[1];
DP4 R1.x, R0, c[0];
DP3 R0.w, fragment.texcoord[3], fragment.texcoord[3];
DP4 R0.z, R2, c[5];
DP4 R0.y, R2, c[4];
DP4 R0.x, R2, c[3];
ADD R2.xyz, R1, R0;
RSQ R0.w, R0.w;
MUL R0.xyz, R0.w, fragment.texcoord[3];
ADD R3.xyz, R0, fragment.texcoord[1];
MUL R0.w, R4.y, R4.y;
MAD R0.w, R4.x, R4.x, -R0;
MUL R1.xyz, R0.w, c[6];
DP3 R2.w, R3, R3;
DP3_SAT R0.x, R0, -fragment.texcoord[1];
RSQ R0.w, R2.w;
ADD R1.xyz, R2, R1;
MUL R2.xyz, R0.w, R3;
MOV R4.z, R3.w;
DP3 R3.x, fragment.texcoord[1], R4;
MOV_SAT R3.y, -R3.x;
ADD R0.x, R0, -R3.y;
MAD R0.y, R0.x, c[10].x, R3;
MAD R0.z, R3.x, c[13], c[13].w;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
DP3 R2.x, R4, R2;
MOV R0.w, c[14].y;
MUL R2.y, R0.w, c[11].x;
MAX R0.w, R2.x, c[14].x;
POW R2.x, R0.w, R2.y;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
TEX R2, fragment.texcoord[0], texture[0], 2D;
MUL R2.xyz, R2, c[8];
MAX R3.x, R0.z, c[14];
MUL R0.x, R0.y, R0;
MUL R0.xyz, R0.x, c[9];
MAD R0.xyz, R0, c[13].x, R3.x;
MAD R0.xyz, R2, R0, R0.w;
MUL R3.xyz, R2, fragment.texcoord[2];
MUL R0.xyz, R0, c[7];
MAD R0.xyz, R0, c[13].x, R3;
MUL R1.xyz, R1, R2;
MAD result.color.xyz, R1, R1.w, R0;
SLT R0.x, R2.w, c[12];
MOV result.color.w, R2;
KIL -R0.x;
END
# 59 instructions, 5 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
Vector 0 [unity_SHAr]
Vector 1 [unity_SHAg]
Vector 2 [unity_SHAb]
Vector 3 [unity_SHBr]
Vector 4 [unity_SHBg]
Vector 5 [unity_SHBb]
Vector 6 [unity_SHC]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Vector 9 [_TranslucencyColor]
Float 10 [_TranslucencyViewDependency]
Float 11 [_Shininess]
Float 12 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 58 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c13, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c14, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
texld r0.yw, v0, s3
dp3_pp r0.x, v3, v3
rsq_pp r0.z, r0.x
mad_pp r2.xy, r0.wyzw, c13.z, c13.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.w, r0.x, r0.y
mul_pp r3.xyz, r0.z, v3
add_pp r0.xyz, r3, v1
dp3_pp r1.x, r0, r0
rsq_pp r1.y, r1.x
add_pp r0.w, -r0, c13.y
rsq_pp r0.w, r0.w
rcp_pp r1.x, r0.w
mul_pp r0.xyz, r1.y, r0
mov_pp r2.z, r1.x
dp3_pp r3.w, r2, r0
mov r0.xy, r2
mov r0.z, r1.x
mov r0.w, c13.y
mul_pp r1, r0.xyzz, r0.yzzx
dp4 r4.z, r0, c2
dp4 r4.y, r0, c1
dp4 r4.x, r0, c0
dp4 r0.z, r1, c5
dp4 r0.x, r1, c3
dp4 r0.y, r1, c4
add_pp r1.xyz, r4, r0
mul_pp r0.x, r2.y, r2.y
mov_pp r0.y, c11.x
mad_pp r1.w, r2.x, r2.x, -r0.x
mul_pp r4.x, c14.z, r0.y
max_pp r3.w, r3, c13.x
pow_pp r0, r3.w, r4.x
dp3_pp r0.y, v1, r2
mov_pp_sat r0.z, -r0.y
mul r4.xyz, r1.w, c6
mad_pp r0.y, r0, c14.x, c14
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r3, -v1
texld r3, v0, s0
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c10.x, r0
texld r0.x, v0, s1
mul_pp r2.xyz, r3, c8
add_pp r1.xyz, r1, r4
max_pp r1.w, r0.y, c13.x
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c9
mad_pp r0.xyz, r0, c13.z, r1.w
mad_pp r0.xyz, r2, r0, r0.w
mul_pp r1.xyz, r1, r2
add_pp r0.w, r3, -c12.x
mul_pp r0.xyz, r0, c7
mul_pp r2.xyz, r2, v2
mad_pp r2.xyz, r0, c13.z, r2
cmp r0.w, r0, c13.x, c13.y
mov_pp r0, -r0.w
mad_pp oC0.xyz, r1, r2.w, r2
texkill r0.xyzw
mov_pp oC0.w, r3
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Vector 16 [_LightColor0] 4
Vector 64 [_Color] 4
Vector 80 [_TranslucencyColor] 3
Float 92 [_TranslucencyViewDependency]
Float 100 [_Shininess]
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_TranslucencyMap] 2D 3
SetTexture 2 [_GlossMap] 2D 2
SetTexture 3 [_BumpMap] 2D 1
// 43 instructions, 3 temp regs, 0 temp arrays:
// ALU 35 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedidgelaaahigbbaeaafldgmccammkmcheabaaaaaanaagaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcmiafaaaaeaaaaaaahcabaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaa
fibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaa
abaaaaaadkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaa
abaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaa
agbjbaaaaeaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaabacaaaaibcaabaaaabaaaaaa
egacbaaaacaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaa
jgahbaaaabaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
abaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaadkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaa
jgahbaaaabaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaa
acaaaaaadeaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaa
bkiacaaaaaaaaaaaagaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaacaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaa
acaaaaaadgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdo
deaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaak
bcaabaaaabaaaaaadkiacaaaaaaaaaaaafaaaaaaakaabaaaabaaaaaadkaabaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaadaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaa
afaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaaaaaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaaeaaaaaadgaaaaaficcabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaigadbaaa
abaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egiccaaaaaaaaaaaabaaaaaaaaaaaaahhcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaaaabaaaaaadcaaaaajhccabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaaa
adaaaaaaegacbaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [unity_SHAr]
Vector 1 [unity_SHAg]
Vector 2 [unity_SHAb]
Vector 3 [unity_SHBr]
Vector 4 [unity_SHBg]
Vector 5 [unity_SHBb]
Vector 6 [unity_SHC]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Vector 9 [_TranslucencyColor]
Float 10 [_TranslucencyViewDependency]
Float 11 [_ShadowStrength]
Float 12 [_Shininess]
Float 13 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 63 ALU, 5 TEX
PARAM c[16] = { program.local[0..13],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R5.xy, R0.wyzw, c[14].x, -c[14].y;
MUL R0.xy, R5, R5;
ADD_SAT R0.x, R0, R0.y;
ADD R0.x, -R0, c[14].y;
RSQ R0.z, R0.x;
RCP R2.w, R0.z;
DP3 R2.x, fragment.texcoord[3], fragment.texcoord[3];
RSQ R2.x, R2.x;
MUL R2.xyz, R2.x, fragment.texcoord[3];
ADD R3.xyz, R2, fragment.texcoord[1];
DP3 R3.w, R3, R3;
MOV R0.z, R2.w;
MOV R0.xy, R5;
MOV R0.w, c[14].y;
MOV R5.z, R2.w;
DP4 R1.z, R0, c[2];
DP4 R1.y, R0, c[1];
DP4 R1.x, R0, c[0];
MUL R0, R0.xyzz, R0.yzzx;
DP4 R4.z, R0, c[5];
DP4 R4.y, R0, c[4];
DP4 R4.x, R0, c[3];
RSQ R0.x, R3.w;
MUL R0.xyz, R0.x, R3;
DP3 R0.x, R5, R0;
MOV R0.w, c[15].y;
MUL R0.y, R0.w, c[12].x;
MAX R0.x, R0, c[15];
POW R2.w, R0.x, R0.y;
DP3 R0.y, fragment.texcoord[1], R5;
MOV_SAT R0.z, -R0.y;
DP3_SAT R0.x, R2, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[10].x, R0;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R3.x, R5.y, R5.y;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
ADD R1.xyz, R1, R4;
MUL R2.w, R2, R0;
MAD R0.y, R0, c[14].z, c[14].w;
MAX R0.w, R0.y, c[15].x;
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[9];
MAD R2.xyz, R0, c[14].x, R0.w;
TEX R0, fragment.texcoord[0], texture[0], 2D;
MAD R3.w, R5.x, R5.x, -R3.x;
MUL R3.xyz, R0, c[8];
MUL R0.xyz, R3.w, c[6];
ADD R1.xyz, R1, R0;
MAD R2.xyz, R3, R2, R2.w;
TXP R0.x, fragment.texcoord[4], texture[4], 2D;
MOV R0.y, c[14].x;
MAD R0.x, R0, c[14], -c[14];
MUL R2.xyz, R2, c[7];
MUL R4.xyz, R3, fragment.texcoord[2];
MAD R0.x, R0, c[11], R0.y;
MAD R0.xyz, R2, R0.x, R4;
MUL R1.xyz, R1, R3;
MAD result.color.xyz, R1, R1.w, R0;
SLT R0.x, R0.w, c[13];
MOV result.color.w, R0;
KIL -R0.x;
END
# 63 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
Vector 0 [unity_SHAr]
Vector 1 [unity_SHAg]
Vector 2 [unity_SHAb]
Vector 3 [unity_SHBr]
Vector 4 [unity_SHBg]
Vector 5 [unity_SHBb]
Vector 6 [unity_SHC]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Vector 9 [_TranslucencyColor]
Float 10 [_TranslucencyViewDependency]
Float 11 [_ShadowStrength]
Float 12 [_Shininess]
Float 13 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_ShadowMapTexture] 2D
"ps_3_0
; 61 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c14, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c15, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
texld r0.yw, v0, s3
mad_pp r2.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.xy, r2, r2
add_pp_sat r0.x, r0, r0.y
add_pp r0.x, -r0, c14.y
rsq_pp r0.z, r0.x
rcp_pp r2.z, r0.z
mov r0.xy, r2
mov r0.z, r2
mov r0.w, c14.y
mul_pp r1, r0.xyzz, r0.yzzx
dp4 r3.z, r0, c2
dp4 r3.y, r0, c1
dp4 r3.x, r0, c0
dp3_pp r0.w, v3, v3
rsq_pp r0.w, r0.w
mul_pp r4.xyz, r0.w, v3
mul_pp r0.w, r2.y, r2.y
dp4 r0.z, r1, c5
dp4 r0.y, r1, c4
dp4 r0.x, r1, c3
add_pp r1.xyz, r3, r0
mad_pp r0.w, r2.x, r2.x, -r0
add_pp r0.xyz, r4, v1
mul r3.xyz, r0.w, c6
dp3_pp r1.w, r0, r0
rsq_pp r0.w, r1.w
mul_pp r0.xyz, r0.w, r0
dp3_pp r0.x, r2, r0
add_pp r3.xyz, r1, r3
texld r1, v0, s0
mul_pp r1.xyz, r1, c8
mov_pp r0.y, c12.x
max_pp r3.w, r0.x, c14.x
mul_pp r4.w, c15.z, r0.y
pow_pp r0, r3.w, r4.w
dp3_pp r0.y, v1, r2
mov_pp_sat r0.z, -r0.y
mov_pp r3.w, r0.x
mad_pp r0.y, r0, c15.x, c15
dp3_pp_sat r0.x, r4, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c10.x, r0
texld r0.w, v0, s2
texld r0.x, v0, s1
max_pp r2.x, r0.y, c14
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c9
mad_pp r0.xyz, r0, c14.z, r2.x
mul_pp r0.w, r3, r0
mad_pp r0.xyz, r1, r0, r0.w
mul_pp r2.xyz, r0, c7
mul_pp r3.xyz, r3, r1
add_pp r0.w, r1, -c13.x
texldp r0.x, v4, s4
mov_pp r0.z, c14
mad_pp r0.x, r0, c14.z, -c14.z
mad_pp r0.x, r0, c11, r0.z
mul_pp r1.xyz, r1, v2
mad_pp r1.xyz, r2, r0.x, r1
cmp r0.y, r0.w, c14.x, c14
mov_pp r0, -r0.y
mad_pp oC0.xyz, r3, r2.w, r1
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 160 [_ShadowStrength]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_ShadowMapTexture] 2D 0
// 47 instructions, 3 temp regs, 0 temp arrays:
// ALU 38 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeflbhcbjkfbighcofdgggoogbhjokecoabaaaaaajmahaaaaadaaaaaa
cmaaaaaaoeaaaaaabiabaaaaejfdeheolaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaakeaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaakeaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaakeaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaakeaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaakeaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapalaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefchmagaaaa
eaaaaaaajpabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaaacaaaaaafkaaaaad
aagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaaeaahabaaaaaaaaaaa
ffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaa
ffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaa
ffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaad
hcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadlcbabaaaafaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaa
abaaaaaadkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaah
bcaabaaaabaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaa
abaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaaegbcbaaaaeaaaaaa
eeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaa
agbjbaaaaeaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaa
acaaaaaaagaabaaaabaaaaaaegbcbaaaaeaaaaaabacaaaaibcaabaaaabaaaaaa
egacbaaaacaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaa
jgahbaaaabaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaa
acaaaaaadiaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaa
acaaaaaadcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaa
apaaaaahicaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaah
icaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaa
acaaaaaadkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaa
acaaaaaadkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaa
jgahbaaaabaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaa
acaaaaaadeaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaa
cpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaa
bkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaa
bkaabaaaabaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaa
aagabaaaadaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaa
acaaaaaadgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaaj
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdo
deaaaaahecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaak
bcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaadkaabaaa
abaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaa
aagabaaaaeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaa
acaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaa
ajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaaaaaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaaaaaaaaaa
dkaabaaaaaaaaaaadcaaaaajhcaabaaaabaaaaaaegacbaaaaaaaaaaaigadbaaa
abaaaaaafgafbaaaabaaaaaadiaaaaahhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaaaadaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaaegiccaaa
aaaaaaaaabaaaaaaaoaaaaahdcaabaaaacaaaaaaegbabaaaafaaaaaapgbpbaaa
afaaaaaaefaaaaajpcaabaaaacaaaaaaegaabaaaacaaaaaaeghobaaaaeaaaaaa
aagabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaaakaabaaaacaaaaaaabeaaaaa
aaaaaaeaabeaaaaaaaaaaamadcaaaaakicaabaaaaaaaaaaaakiacaaaaaaaaaaa
akaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaeadcaaaaajhccabaaaaaaaaaaa
egacbaaaabaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "SHADOWS_SCREEN" }
"!!GLES3"
}

}
	}
	Pass {
		Name "FORWARD"
		Tags { "LightMode" = "ForwardAdd" }
		ZWrite Off Blend One One Fog { Color (0,0,0,0) }
		ColorMask RGB
Program "vp" {
// Vertex combos: 20
//   opengl - ALU: 85 to 94
//   d3d9 - ALU: 90 to 99
//   d3d11 - ALU: 79 to 88, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 93 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R2.xyz, R0.w, R3, -vertex.normal;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R2.xyz, R0.w, c[26];
ADD R0.xyz, -R2, R0;
MAD R0.xyz, R2, c[27].x, R0;
MOV R0.w, c[0].y;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 93 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 98 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhofconmjhdhgmpopbaabhejoheahimokabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16));
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = lightDir_2;
  mediump float atten_20;
  atten_20 = tmpvar_17.w;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_10, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (tmpvar_15, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_8 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_19 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * (2.0 * atten_20));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1.xyz = tmpvar_18.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16));
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = lightDir_2;
  mediump float atten_20;
  atten_20 = tmpvar_17.w;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (normal_10, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (tmpvar_15, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_8 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_19 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * (2.0 * atten_20));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1.xyz = tmpvar_18.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 630
#line 656
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 525
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 527
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 529
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 531
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 533
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 535
    return SmoothCurve( TriangleWave( x));
}
#line 537
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 539
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 543
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 547
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 551
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 516
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 519
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 523
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 489
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 493
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 563
void TreeVertLeaf( inout appdata_full v ) {
    #line 565
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 569
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 657
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 660
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 664
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 668
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 630
#line 656
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 598
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 602
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 606
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 610
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 630
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 634
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 638
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 642
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 674
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 677
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 681
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 685
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 20 [unity_Scale]
Vector 21 [_Scale]
Vector 22 [_SquashPlaneNormal]
Float 23 [_SquashAmount]
Vector 24 [_Wind]
Vector 25 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 85 ALU
PARAM c[28] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..25],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R3.w, R3, R3;
ABS R0.w, vertex.attrib[14];
ADD R0.w, -R0, c[0].y;
MAD R0.xyz, R0, R0.w, vertex.position;
MOV R1.x, c[0].y;
DP3 R1.x, R1.x, c[12];
ADD R1.x, vertex.color, R1;
ADD R1.z, vertex.color.y, R1.x;
MUL R0.xyz, R0, c[21];
MOV R1.y, R1.x;
DP3 R1.x, R0, R1.z;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[26];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
RSQ R3.w, R3.w;
ADD R2, R2, c[27].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
MAD R2.xyz, R3.w, R3, -vertex.normal;
MAD R3.xyz, R0.w, R2, vertex.normal;
ADD R5.xy, R1.xzzw, R1.ywzw;
MUL R1.xyz, R5.y, c[24];
MUL R2.xy, vertex.color.y, R3.xzzw;
MUL R4.xyz, vertex.texcoord[1].y, R1;
MUL R2.xz, R2.xyyw, c[27].z;
MUL R1, vertex.attrib[14].y, c[6];
MUL R2.y, vertex.texcoord[1], c[27];
MAD R2.xyz, R5.xyxw, R2, R4;
MAD R0.xyz, R2, c[24].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[24], R0;
DP3 R0.x, R2, c[22];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R0.y, R1, R1;
RSQ R0.y, R0.y;
MOV R3.w, c[0].y;
MUL R1.xyz, R0.y, R1;
ADD R0.x, R0, c[22].w;
MUL R0.xyz, R0.x, c[22];
ADD R4.xyz, -R0, R2;
MOV R1.w, c[27];
ADD R1, -vertex.attrib[14], R1;
MAD R1, R0.w, R1, vertex.attrib[14];
DP3 R2.x, R1, R1;
DP3 R0.w, R3, R3;
RSQ R2.x, R2.x;
MAD R0.xyz, R0, c[23].x, R4;
MUL R2.xyz, R2.x, R1;
RSQ R0.w, R0.w;
MUL R1.xyz, R0.w, R3;
MOV R0.w, c[0].y;
MUL R3.xyz, R1.zxyw, R2.yzxw;
MAD R5.xyz, R1.yzxw, R2.zxyw, -R3;
MOV R3.xyz, c[18];
DP4 R4.z, R3, c[15];
DP4 R4.y, R3, c[14];
DP4 R4.x, R3, c[13];
MAD R4.xyz, R4, c[20].w, -R0;
MUL R3.xyz, R5, R1.w;
DP3 result.texcoord[2].y, R3, R4;
DP3 result.texcoord[2].z, R1, R4;
DP3 result.texcoord[2].x, R2, R4;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MOV R0, c[19];
DP4 R4.z, R0, c[15];
DP4 R4.x, R0, c[13];
DP4 R4.y, R0, c[14];
DP3 result.texcoord[1].y, R4, R3;
DP3 result.texcoord[1].z, R1, R4;
DP3 result.texcoord[1].x, R4, R2;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[25], c[25].zwzw;
END
# 85 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 19 [unity_Scale]
Vector 20 [_Scale]
Vector 21 [_SquashPlaneNormal]
Float 22 [_SquashAmount]
Vector 23 [_Wind]
Vector 24 [_MainTex_ST]
"vs_3_0
; 90 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
def c25, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c26, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c27, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c28, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
mov r1.xyz, c11
dp3 r1.x, c25.y, r1
add r1.x, v5, r1
add r0.xyz, r2, c25.x
mad r2, v2.z, c6, r2
add r3, r2, c25.x
dp4 r3.w, r3, r3
abs r0.w, v1
add r0.w, -r0, c25.y
mad r0.xyz, r0, r0.w, v0
add r1.z, v5.y, r1.x
mul r0.xyz, r0, c20
mov r1.y, r1.x
dp3 r1.x, r0, r1.z
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c26
frc r1, r1
mad r1, r1, c25.z, c25.w
frc r1, r1
mad r1, r1, c27.x, c27.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c27.x, c27.z
mul r1, r2, r1
rsq r3.w, r3.w
add r5.xy, r1.xzzw, r1.ywzw
mad r2.xyz, r3.w, r3, -v2
mad r1.xyz, r0.w, r2, v2
mul r2.xyz, r5.y, c23
mul r3.xy, v5.y, r1.xzzw
mul r4.xyz, v4.y, r2
mul r3.xz, r3.xyyw, c28.x
mul r2, v1.y, c5
mul r3.y, v4, c27.w
mad r3.xyz, r5.xyxw, r3, r4
mad r0.xyz, r3, c23.w, r0
mad r3.xyz, v4.x, c23, r0
dp3 r0.x, r3, c21
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c25.x
dp4 r0.y, r2, r2
rsq r0.y, r0.y
mul r2.xyz, r0.y, r2
add r0.x, r0, c21.w
mul r0.xyz, r0.x, c21
add r4.xyz, -r0, r3
mov r2.w, c27.y
add r2, -v1, r2
mad r2, r0.w, r2, v1
dp3 r1.w, r2, r2
dp3 r0.w, r1, r1
rsq r1.w, r1.w
mul r3.xyz, r1.w, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r1
mad r0.xyz, r0, c22.x, r4
mov r0.w, c25.y
mul r1.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r1
mov r1.w, c25.y
mov r1.xyz, c17
dp4 r5.z, r1, c14
dp4 r5.y, r1, c13
dp4 r5.x, r1, c12
mad r1.xyz, r5, c19.w, -r0
mul r4.xyz, r4, r2.w
dp3 o3.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c18, r0
mov r0, c13
dp4 r5.y, c18, r0
dp3 o3.z, r2, r1
dp3 o3.x, r3, r1
mov r1, c12
dp4 r5.x, c18, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mad o1.xy, v3, c24, c24.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 85 instructions, 5 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedecojnloklllmjhjhmojbbocnhbipplckabaaaaaacianaaaaadaaaaaa
cmaaaaaapeaaaaaahmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoiaaaaaaaaeaaaaaa
aiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaheaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
kealaaaaeaaaabaaojacaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaad
hcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacafaaaaaa
dgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaa
aaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaa
adaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaa
aaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
bkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
kgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaa
aeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
alaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
aiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
ajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
akaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaa
egacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaa
diaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaah
fcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaa
aaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaa
dcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaa
alaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaa
adaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaa
aiaaaaaaogikcaaaaaaaaaaaaiaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaabaaaaaai
icaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
icaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialpaaaaaaai
pcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaaj
pcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaaabaaaaaa
jgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaacgajbaaa
acaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaa
beaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_15;
  mediump vec3 lightDir_16;
  lightDir_16 = lightDir_2;
  lowp vec4 c_17;
  lowp float backContrib_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (tmpvar_10, lightDir_16);
  mediump float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_14, -(lightDir_16)), 0.0, 1.0);
  backContrib_18 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp (-(tmpvar_19), 0.0, 1.0);
  lowp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_21, backContrib_18, _TranslucencyViewDependency);
  backContrib_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_8 * ((tmpvar_23 * 2.0) + max (0.0, ((tmpvar_19 * 0.6) + 0.4))));
  c_17.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((c_17.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_16 + tmpvar_14)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_17.xyz = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_17.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_17.xyz = tmpvar_26;
  tmpvar_15 = c_17;
  c_1.xyz = tmpvar_15.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_15;
  mediump vec3 lightDir_16;
  lightDir_16 = lightDir_2;
  lowp vec4 c_17;
  lowp float backContrib_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (normal_10, lightDir_16);
  mediump float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_14, -(lightDir_16)), 0.0, 1.0);
  backContrib_18 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp (-(tmpvar_19), 0.0, 1.0);
  lowp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_21, backContrib_18, _TranslucencyViewDependency);
  backContrib_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_8 * ((tmpvar_23 * 2.0) + max (0.0, ((tmpvar_19 * 0.6) + 0.4))));
  c_17.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((c_17.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_16 + tmpvar_14)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_17.xyz = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_17.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_17.xyz = tmpvar_26;
  tmpvar_15 = c_17;
  c_1.xyz = tmpvar_15.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 653
uniform highp vec4 _MainTex_ST;
#line 669
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 654
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 657
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 661
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 665
    o.viewDir = viewDirForLight;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 653
uniform highp vec4 _MainTex_ST;
#line 669
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 640
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 670
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 673
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 677
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 681
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), 1.0);
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 94 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MOV R0.w, c[0].y;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.x, R2, c[26];
ADD R0.x, R0, c[26].w;
MUL R0.xyz, R0.x, c[26];
ADD R2.xyz, -R0, R2;
MAD R0.xyz, R0, c[27].x, R2;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].w, R3, c[20];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 94 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 99 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.w, r3, c19
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaoohcfgdmpmmdgapmgibkmackfofgmfbabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaa
egiocaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  mediump vec4 tmpvar_20;
  mediump vec3 lightDir_21;
  lightDir_21 = lightDir_2;
  mediump float atten_22;
  atten_22 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_16.w) * tmpvar_19.w);
  lowp vec4 c_23;
  lowp float backContrib_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (tmpvar_10, lightDir_21);
  mediump float tmpvar_26;
  tmpvar_26 = clamp (dot (tmpvar_15, -(lightDir_21)), 0.0, 1.0);
  backContrib_24 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp (-(tmpvar_25), 0.0, 1.0);
  lowp float tmpvar_28;
  tmpvar_28 = mix (tmpvar_27, backContrib_24, _TranslucencyViewDependency);
  backContrib_24 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_8 * ((tmpvar_29 * 2.0) + max (0.0, ((tmpvar_25 * 0.6) + 0.4))));
  c_23.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((c_23.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_21 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_23.xyz = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (c_23.xyz * (2.0 * atten_22));
  c_23.xyz = tmpvar_32;
  tmpvar_20 = c_23;
  c_1.xyz = tmpvar_20.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  mediump vec4 tmpvar_20;
  mediump vec3 lightDir_21;
  lightDir_21 = lightDir_2;
  mediump float atten_22;
  atten_22 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_16.w) * tmpvar_19.w);
  lowp vec4 c_23;
  lowp float backContrib_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (normal_10, lightDir_21);
  mediump float tmpvar_26;
  tmpvar_26 = clamp (dot (tmpvar_15, -(lightDir_21)), 0.0, 1.0);
  backContrib_24 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp (-(tmpvar_25), 0.0, 1.0);
  lowp float tmpvar_28;
  tmpvar_28 = mix (tmpvar_27, backContrib_24, _TranslucencyViewDependency);
  backContrib_24 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_8 * ((tmpvar_29 * 2.0) + max (0.0, ((tmpvar_25 * 0.6) + 0.4))));
  c_23.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((c_23.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_21 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_23.xyz = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (c_23.xyz * (2.0 * atten_22));
  c_23.xyz = tmpvar_32;
  tmpvar_20 = c_23;
  c_1.xyz = tmpvar_20.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 596
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 630
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 402
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 406
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 410
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 414
uniform highp vec4 _TreeBillboardDistances;
#line 432
#line 480
#line 498
#line 512
#line 524
uniform highp vec4 _Wind;
#line 592
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 607
#line 623
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 627
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 665
uniform highp vec4 _MainTex_ST;
#line 682
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 534
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 536
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 538
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 540
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 542
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 544
    return SmoothCurve( TriangleWave( x));
}
#line 546
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 548
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 552
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 556
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 560
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 525
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 528
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 532
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 498
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 502
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 572
void TreeVertLeaf( inout appdata_full v ) {
    #line 574
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 578
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 666
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 669
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 673
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 677
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 596
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 630
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 656
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 402
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 406
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 410
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 414
uniform highp vec4 _TreeBillboardDistances;
#line 432
#line 480
#line 498
#line 512
#line 524
uniform highp vec4 _Wind;
#line 592
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 607
#line 623
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 627
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 665
uniform highp vec4 _MainTex_ST;
#line 682
uniform lowp float _Cutoff;
#line 607
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 611
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 615
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 619
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 398
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 394
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 683
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 686
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 690
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 694
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 93 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R2.xyz, R0.w, R3, -vertex.normal;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R2.xyz, R0.w, c[26];
ADD R0.xyz, -R2, R0;
MAD R0.xyz, R2, c[27].x, R0;
MOV R0.w, c[0].y;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 93 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 98 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhofconmjhdhgmpopbaabhejoheahimokabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_19;
  mediump vec3 lightDir_20;
  lightDir_20 = lightDir_2;
  mediump float atten_21;
  atten_21 = (tmpvar_17.w * tmpvar_18.w);
  lowp vec4 c_22;
  lowp float backContrib_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_10, lightDir_20);
  mediump float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_15, -(lightDir_20)), 0.0, 1.0);
  backContrib_23 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp (-(tmpvar_24), 0.0, 1.0);
  lowp float tmpvar_27;
  tmpvar_27 = mix (tmpvar_26, backContrib_23, _TranslucencyViewDependency);
  backContrib_23 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * ((tmpvar_28 * 2.0) + max (0.0, ((tmpvar_24 * 0.6) + 0.4))));
  c_22.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((c_22.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_20 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_22.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_22.xyz * (2.0 * atten_21));
  c_22.xyz = tmpvar_31;
  tmpvar_19 = c_22;
  c_1.xyz = tmpvar_19.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_19;
  mediump vec3 lightDir_20;
  lightDir_20 = lightDir_2;
  mediump float atten_21;
  atten_21 = (tmpvar_17.w * tmpvar_18.w);
  lowp vec4 c_22;
  lowp float backContrib_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (normal_10, lightDir_20);
  mediump float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_15, -(lightDir_20)), 0.0, 1.0);
  backContrib_23 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp (-(tmpvar_24), 0.0, 1.0);
  lowp float tmpvar_27;
  tmpvar_27 = mix (tmpvar_26, backContrib_23, _TranslucencyViewDependency);
  backContrib_23 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * ((tmpvar_28 * 2.0) + max (0.0, ((tmpvar_24 * 0.6) + 0.4))));
  c_22.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((c_22.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_20 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_22.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_22.xyz * (2.0 * atten_21));
  c_22.xyz = tmpvar_31;
  tmpvar_19 = c_22;
  c_1.xyz = tmpvar_19.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 588
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 622
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 648
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
#line 397
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
#line 401
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
#line 405
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 424
#line 472
#line 490
#line 504
#line 516
uniform highp vec4 _Wind;
#line 584
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 599
#line 615
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 619
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 657
uniform highp vec4 _MainTex_ST;
#line 674
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 526
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 528
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 530
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 532
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 534
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 536
    return SmoothCurve( TriangleWave( x));
}
#line 538
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 540
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 544
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 548
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 552
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 517
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 520
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 524
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 490
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 494
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 564
void TreeVertLeaf( inout appdata_full v ) {
    #line 566
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 570
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 658
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 661
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 665
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 669
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 588
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 622
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 648
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
#line 397
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
#line 401
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
#line 405
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 424
#line 472
#line 490
#line 504
#line 516
uniform highp vec4 _Wind;
#line 584
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 599
#line 615
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 619
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 657
uniform highp vec4 _MainTex_ST;
#line 674
uniform lowp float _Cutoff;
#line 599
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 603
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 607
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 611
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 631
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 635
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 639
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 643
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 675
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 678
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 682
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 686
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 91 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.w, -R1.x, c[0].y;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R0.xyz, R0, R4.w, vertex.position;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R3.xy, R1.xzzw, R1.ywzw;
MAD R4.xyz, R4.w, R2, vertex.normal;
MUL R1.xyz, R3.y, c[28];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R3.zw, vertex.color.y, R4.xyxz;
MOV R1.w, c[0].y;
MUL R1.xz, R3.zyww, c[31].z;
MUL R1.y, vertex.texcoord[1], c[31];
MAD R1.xyz, R3.xyxw, R1, R2;
DP3 R3.x, R4, R4;
MAD R0.xyz, R1, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R1.xyz, R0.w, c[26];
ADD R2.xyz, -R1, R0;
MAD R1.xyz, R1, c[27].x, R2;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R2, vertex.attrib[14].z, c[7], R0;
ADD R2, R2, c[0].x;
DP4 R0.x, R2, R2;
RSQ R0.x, R0.x;
MUL R2.xyz, R0.x, R2;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.w, R2, vertex.attrib[14];
DP3 R3.y, R2, R2;
DP4 R0.w, R1, c[12];
DP4 R0.z, R1, c[11];
DP4 R0.y, R1, c[10];
DP4 R0.x, R1, c[9];
DP4 result.texcoord[3].y, R0, c[18];
DP4 result.texcoord[3].x, R0, c[17];
MOV R0.xyz, c[22];
MOV R0.w, c[0].y;
RSQ R3.w, R3.x;
RSQ R3.y, R3.y;
MUL R3.xyz, R3.y, R2;
MUL R2.xyz, R3.w, R4;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MUL R4.xyz, R4, R2.w;
DP4 R5.z, R0, c[15];
DP4 R5.x, R0, c[13];
DP4 R5.y, R0, c[14];
MAD R0.xyz, R5, c[24].w, -R1;
DP3 result.texcoord[2].y, R4, R0;
DP3 result.texcoord[2].z, R2, R0;
DP3 result.texcoord[2].x, R3, R0;
DP4 result.position.w, R1, c[4];
DP4 result.position.z, R1, c[3];
DP4 result.position.y, R1, c[2];
DP4 result.position.x, R1, c[1];
MOV R1, c[23];
DP4 R0.z, R1, c[15];
DP4 R0.x, R1, c[13];
DP4 R0.y, R1, c[14];
DP3 result.texcoord[1].y, R0, R4;
DP3 result.texcoord[1].z, R2, R0;
DP3 result.texcoord[1].x, R0, R3;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 91 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 96 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.w, -r0, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r4.w, v0
add r3, r2, c29.x
mul r0.xyz, r0, c24
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp4 r0.w, r3, r3
dp3 r1.x, r0, r1.x
add r1.xy, r1, c20.y
mul r1, r1.xxyy, c30
frc r1, r1
mad r1, r1, c29.z, c29.w
frc r1, r1
mad r1, r1, c31.x, c31.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c31.x, c31.z
mul r1, r2, r1
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
add r3.xy, r1.xzzw, r1.ywzw
mad r4.xyz, r4.w, r2, v2
mul r1.xyz, r3.y, c27
mul r2.xyz, v4.y, r1
mul r3.zw, v5.y, r4.xyxz
mov r0.w, c29.y
mul r1.xz, r3.zyww, c32.x
mul r1.y, v4, c31.w
mad r1.xyz, r3.xyxw, r1, r2
mad r0.xyz, r1, c27.w, r0
mad r1.xyz, v4.x, c27, r0
dp3 r3.x, r4, r4
dp3 r0.x, r1, c25
add r0.x, r0, c25.w
mul r0.xyz, r0.x, c25
add r2.xyz, -r0, r1
mad r0.xyz, r0, c26.x, r2
mul r1, v1.y, c5
mad r1, v1.x, c4, r1
mad r2, v1.z, c6, r1
add r2, r2, c29.x
dp4 r1.x, r2, r2
rsq r1.x, r1.x
mul r2.xyz, r1.x, r2
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.w, r2, v1
dp3 r3.y, r2, r2
dp4 r1.w, r0, c11
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
dp4 o4.y, r1, c17
dp4 o4.x, r1, c16
mov r1.w, c29.y
mov r1.xyz, c21
dp4 r5.z, r1, c14
dp4 r5.x, r1, c12
dp4 r5.y, r1, c13
mad r1.xyz, r5, c23.w, -r0
rsq r3.w, r3.x
rsq r3.y, r3.y
mul r3.xyz, r3.y, r2
mul r2.xyz, r3.w, r4
mul r4.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r4
mul r4.xyz, r4, r2.w
dp3 o3.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c22, r0
mov r0, c13
dp4 r5.y, c22, r0
dp3 o3.z, r2, r1
dp3 o3.x, r3, r1
mov r1, c12
dp4 r5.x, c22, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 93 instructions, 5 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgckghcgpnnkalnnecafeiihmneiaflbpabaaaaaaheaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaadaaaaaaaaaaaaaa
adaaaaaaabaaaaaaamadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcniamaaaaeaaaabaa
dgadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadmccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaaeaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaadaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaafaaaaaakgakbaaaabaaaaaa
egaabaaaabaaaaaadcaaaaakmccabaaaabaaaaaaagiecaaaaaaaaaaaagaaaaaa
pgapbaaaabaaaaaaagaebaaaabaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egacbaaaaeaaaaaabaaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaia
ebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaa
acaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaa
adaaaaaacgajbaaaabaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaa
jgaebaaaabaaaaaacgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
baaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaa
aeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaa
aeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
bccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_16;
  mediump vec3 lightDir_17;
  lightDir_17 = lightDir_2;
  mediump float atten_18;
  atten_18 = tmpvar_15.w;
  lowp vec4 c_19;
  lowp float backContrib_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (tmpvar_10, lightDir_17);
  mediump float tmpvar_22;
  tmpvar_22 = clamp (dot (tmpvar_14, -(lightDir_17)), 0.0, 1.0);
  backContrib_20 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (-(tmpvar_21), 0.0, 1.0);
  lowp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_23, backContrib_20, _TranslucencyViewDependency);
  backContrib_20 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_24 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_8 * ((tmpvar_25 * 2.0) + max (0.0, ((tmpvar_21 * 0.6) + 0.4))));
  c_19.xyz = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((c_19.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_17 + tmpvar_14)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_19.xyz = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_19.xyz * mix (2.0, (atten_18 * 2.0), _ShadowStrength));
  c_19.xyz = tmpvar_28;
  tmpvar_16 = c_19;
  c_1.xyz = tmpvar_16.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.xyz = tmpvar_11.xyz;
  diff_ibl_5.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_5.xyz = (tmpvar_11.xyz * diff_ibl_5.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_16;
  mediump vec3 lightDir_17;
  lightDir_17 = lightDir_2;
  mediump float atten_18;
  atten_18 = tmpvar_15.w;
  lowp vec4 c_19;
  lowp float backContrib_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (normal_10, lightDir_17);
  mediump float tmpvar_22;
  tmpvar_22 = clamp (dot (tmpvar_14, -(lightDir_17)), 0.0, 1.0);
  backContrib_20 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (-(tmpvar_21), 0.0, 1.0);
  lowp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_23, backContrib_20, _TranslucencyViewDependency);
  backContrib_20 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_24 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_8 * ((tmpvar_25 * 2.0) + max (0.0, ((tmpvar_21 * 0.6) + 0.4))));
  c_19.xyz = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((c_19.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_17 + tmpvar_14)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_19.xyz = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_19.xyz * mix (2.0, (atten_18 * 2.0), _ShadowStrength));
  c_19.xyz = tmpvar_28;
  tmpvar_16 = c_19;
  c_1.xyz = tmpvar_16.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 630
#line 656
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 525
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 527
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 529
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 531
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 533
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 535
    return SmoothCurve( TriangleWave( x));
}
#line 537
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 539
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 543
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 547
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 551
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 516
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 519
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 523
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 489
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 493
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 563
void TreeVertLeaf( inout appdata_full v ) {
    #line 565
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 569
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 657
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 660
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 664
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 668
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 630
#line 656
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 598
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 602
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 606
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 610
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 630
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 634
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 638
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 642
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 674
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 677
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 681
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 685
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, IN._LightCoord).w * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 93 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R2.xyz, R0.w, R3, -vertex.normal;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R2.xyz, R0.w, c[26];
ADD R0.xyz, -R2, R0;
MAD R0.xyz, R2, c[27].x, R0;
MOV R0.w, c[0].y;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 93 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 98 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhofconmjhdhgmpopbaabhejoheahimokabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(tmpvar_10));
  mediump vec4 tmpvar_12;
  mediump vec3 lightDir_13;
  lightDir_13 = lightDir_2;
  mediump float atten_14;
  atten_14 = tmpvar_11.w;
  lowp vec4 c_15;
  lowp float backContrib_16;
  mediump float tmpvar_17;
  tmpvar_17 = dot (tmpvar_6, lightDir_13);
  mediump float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_9, -(lightDir_13)), 0.0, 1.0);
  backContrib_16 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (-(tmpvar_17), 0.0, 1.0);
  lowp float tmpvar_20;
  tmpvar_20 = mix (tmpvar_19, backContrib_16, _TranslucencyViewDependency);
  backContrib_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_4 * ((tmpvar_21 * 2.0) + max (0.0, ((tmpvar_17 * 0.6) + 0.4))));
  c_15.xyz = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((c_15.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_13 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_15.xyz = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_15.xyz * (2.0 * atten_14));
  c_15.xyz = tmpvar_24;
  tmpvar_12 = c_15;
  c_1.xyz = tmpvar_12.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(tmpvar_10));
  mediump vec4 tmpvar_12;
  mediump vec3 lightDir_13;
  lightDir_13 = lightDir_2;
  mediump float atten_14;
  atten_14 = tmpvar_11.w;
  lowp vec4 c_15;
  lowp float backContrib_16;
  mediump float tmpvar_17;
  tmpvar_17 = dot (normal_6, lightDir_13);
  mediump float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_9, -(lightDir_13)), 0.0, 1.0);
  backContrib_16 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (-(tmpvar_17), 0.0, 1.0);
  lowp float tmpvar_20;
  tmpvar_20 = mix (tmpvar_19, backContrib_16, _TranslucencyViewDependency);
  backContrib_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_4 * ((tmpvar_21 * 2.0) + max (0.0, ((tmpvar_17 * 0.6) + 0.4))));
  c_15.xyz = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((c_15.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_13 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_15.xyz = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_15.xyz * (2.0 * atten_14));
  c_15.xyz = tmpvar_24;
  tmpvar_12 = c_15;
  c_1.xyz = tmpvar_12.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 642
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 629
#line 651
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 525
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 527
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 529
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 531
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 533
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 535
    return SmoothCurve( TriangleWave( x));
}
#line 537
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 539
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 543
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 547
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 551
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 516
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 519
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 523
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 489
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 493
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 563
void TreeVertLeaf( inout appdata_full v ) {
    #line 565
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 569
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 652
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 655
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 659
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 663
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 642
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 629
#line 651
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 598
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 602
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 606
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 610
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 629
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 633
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 637
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 20 [unity_Scale]
Vector 21 [_Scale]
Vector 22 [_SquashPlaneNormal]
Float 23 [_SquashAmount]
Vector 24 [_Wind]
Vector 25 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 85 ALU
PARAM c[28] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..25],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R3.w, R3, R3;
ABS R0.w, vertex.attrib[14];
ADD R0.w, -R0, c[0].y;
MAD R0.xyz, R0, R0.w, vertex.position;
MOV R1.x, c[0].y;
DP3 R1.x, R1.x, c[12];
ADD R1.x, vertex.color, R1;
ADD R1.z, vertex.color.y, R1.x;
MUL R0.xyz, R0, c[21];
MOV R1.y, R1.x;
DP3 R1.x, R0, R1.z;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[26];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
RSQ R3.w, R3.w;
ADD R2, R2, c[27].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
MAD R2.xyz, R3.w, R3, -vertex.normal;
MAD R3.xyz, R0.w, R2, vertex.normal;
ADD R5.xy, R1.xzzw, R1.ywzw;
MUL R1.xyz, R5.y, c[24];
MUL R2.xy, vertex.color.y, R3.xzzw;
MUL R4.xyz, vertex.texcoord[1].y, R1;
MUL R2.xz, R2.xyyw, c[27].z;
MUL R1, vertex.attrib[14].y, c[6];
MUL R2.y, vertex.texcoord[1], c[27];
MAD R2.xyz, R5.xyxw, R2, R4;
MAD R0.xyz, R2, c[24].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[24], R0;
DP3 R0.x, R2, c[22];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R0.y, R1, R1;
RSQ R0.y, R0.y;
MOV R3.w, c[0].y;
MUL R1.xyz, R0.y, R1;
ADD R0.x, R0, c[22].w;
MUL R0.xyz, R0.x, c[22];
ADD R4.xyz, -R0, R2;
MOV R1.w, c[27];
ADD R1, -vertex.attrib[14], R1;
MAD R1, R0.w, R1, vertex.attrib[14];
DP3 R2.x, R1, R1;
DP3 R0.w, R3, R3;
RSQ R2.x, R2.x;
MAD R0.xyz, R0, c[23].x, R4;
MUL R2.xyz, R2.x, R1;
RSQ R0.w, R0.w;
MUL R1.xyz, R0.w, R3;
MOV R0.w, c[0].y;
MUL R3.xyz, R1.zxyw, R2.yzxw;
MAD R5.xyz, R1.yzxw, R2.zxyw, -R3;
MOV R3.xyz, c[18];
DP4 R4.z, R3, c[15];
DP4 R4.y, R3, c[14];
DP4 R4.x, R3, c[13];
MAD R4.xyz, R4, c[20].w, -R0;
MUL R3.xyz, R5, R1.w;
DP3 result.texcoord[2].y, R3, R4;
DP3 result.texcoord[2].z, R1, R4;
DP3 result.texcoord[2].x, R2, R4;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MOV R0, c[19];
DP4 R4.z, R0, c[15];
DP4 R4.x, R0, c[13];
DP4 R4.y, R0, c[14];
DP3 result.texcoord[1].y, R4, R3;
DP3 result.texcoord[1].z, R1, R4;
DP3 result.texcoord[1].x, R4, R2;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[25], c[25].zwzw;
END
# 85 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 19 [unity_Scale]
Vector 20 [_Scale]
Vector 21 [_SquashPlaneNormal]
Float 22 [_SquashAmount]
Vector 23 [_Wind]
Vector 24 [_MainTex_ST]
"vs_3_0
; 90 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
def c25, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c26, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c27, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c28, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
mov r1.xyz, c11
dp3 r1.x, c25.y, r1
add r1.x, v5, r1
add r0.xyz, r2, c25.x
mad r2, v2.z, c6, r2
add r3, r2, c25.x
dp4 r3.w, r3, r3
abs r0.w, v1
add r0.w, -r0, c25.y
mad r0.xyz, r0, r0.w, v0
add r1.z, v5.y, r1.x
mul r0.xyz, r0, c20
mov r1.y, r1.x
dp3 r1.x, r0, r1.z
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c26
frc r1, r1
mad r1, r1, c25.z, c25.w
frc r1, r1
mad r1, r1, c27.x, c27.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c27.x, c27.z
mul r1, r2, r1
rsq r3.w, r3.w
add r5.xy, r1.xzzw, r1.ywzw
mad r2.xyz, r3.w, r3, -v2
mad r1.xyz, r0.w, r2, v2
mul r2.xyz, r5.y, c23
mul r3.xy, v5.y, r1.xzzw
mul r4.xyz, v4.y, r2
mul r3.xz, r3.xyyw, c28.x
mul r2, v1.y, c5
mul r3.y, v4, c27.w
mad r3.xyz, r5.xyxw, r3, r4
mad r0.xyz, r3, c23.w, r0
mad r3.xyz, v4.x, c23, r0
dp3 r0.x, r3, c21
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c25.x
dp4 r0.y, r2, r2
rsq r0.y, r0.y
mul r2.xyz, r0.y, r2
add r0.x, r0, c21.w
mul r0.xyz, r0.x, c21
add r4.xyz, -r0, r3
mov r2.w, c27.y
add r2, -v1, r2
mad r2, r0.w, r2, v1
dp3 r1.w, r2, r2
dp3 r0.w, r1, r1
rsq r1.w, r1.w
mul r3.xyz, r1.w, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r1
mad r0.xyz, r0, c22.x, r4
mov r0.w, c25.y
mul r1.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r1
mov r1.w, c25.y
mov r1.xyz, c17
dp4 r5.z, r1, c14
dp4 r5.y, r1, c13
dp4 r5.x, r1, c12
mad r1.xyz, r5, c19.w, -r0
mul r4.xyz, r4, r2.w
dp3 o3.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c18, r0
mov r0, c13
dp4 r5.y, c18, r0
dp3 o3.z, r2, r1
dp3 o3.x, r3, r1
mov r1, c12
dp4 r5.x, c18, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mad o1.xy, v3, c24, c24.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 85 instructions, 5 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedecojnloklllmjhjhmojbbocnhbipplckabaaaaaacianaaaaadaaaaaa
cmaaaaaapeaaaaaahmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoiaaaaaaaaeaaaaaa
aiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaheaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
kealaaaaeaaaabaaojacaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaad
hcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacafaaaaaa
dgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaa
aaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaa
adaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaa
aaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
bkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
kgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaa
aeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
alaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
aiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
ajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
akaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaa
egacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaa
diaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaah
fcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaa
aaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaa
dcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaa
alaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaa
adaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaa
aiaaaaaaogikcaaaaaaaaaaaaiaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaabaaaaaai
icaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
icaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialpaaaaaaai
pcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaaj
pcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaaabaaaaaa
jgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaacgajbaaa
acaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaa
beaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_9;
  mediump vec3 lightDir_10;
  lightDir_10 = lightDir_2;
  lowp vec4 c_11;
  lowp float backContrib_12;
  mediump float tmpvar_13;
  tmpvar_13 = dot (tmpvar_6, lightDir_10);
  mediump float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_8, -(lightDir_10)), 0.0, 1.0);
  backContrib_12 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = clamp (-(tmpvar_13), 0.0, 1.0);
  lowp float tmpvar_16;
  tmpvar_16 = mix (tmpvar_15, backContrib_12, _TranslucencyViewDependency);
  backContrib_12 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_4 * ((tmpvar_17 * 2.0) + max (0.0, ((tmpvar_13 * 0.6) + 0.4))));
  c_11.xyz = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((c_11.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_10 + tmpvar_8)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_11.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (c_11.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_11.xyz = tmpvar_20;
  tmpvar_9 = c_11;
  c_1.xyz = tmpvar_9.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_9;
  mediump vec3 lightDir_10;
  lightDir_10 = lightDir_2;
  lowp vec4 c_11;
  lowp float backContrib_12;
  mediump float tmpvar_13;
  tmpvar_13 = dot (normal_6, lightDir_10);
  mediump float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_8, -(lightDir_10)), 0.0, 1.0);
  backContrib_12 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = clamp (-(tmpvar_13), 0.0, 1.0);
  lowp float tmpvar_16;
  tmpvar_16 = mix (tmpvar_15, backContrib_12, _TranslucencyViewDependency);
  backContrib_12 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_4 * ((tmpvar_17 * 2.0) + max (0.0, ((tmpvar_13 * 0.6) + 0.4))));
  c_11.xyz = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((c_11.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_10 + tmpvar_8)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_11.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (c_11.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_11.xyz = tmpvar_20;
  tmpvar_9 = c_11;
  c_1.xyz = tmpvar_9.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 648
uniform highp vec4 _MainTex_ST;
#line 664
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 649
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 652
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 656
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 660
    o.viewDir = viewDirForLight;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 648
uniform highp vec4 _MainTex_ST;
#line 664
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 665
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 668
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 672
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 676
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), 1.0);
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 94 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MOV R0.w, c[0].y;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.x, R2, c[26];
ADD R0.x, R0, c[26].w;
MUL R0.xyz, R0.x, c[26];
ADD R2.xyz, -R0, R2;
MAD R0.xyz, R0, c[27].x, R2;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].w, R3, c[20];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 94 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 99 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.w, r3, c19
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaoohcfgdmpmmdgapmgibkmackfofgmfbabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaa
egiocaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_10 = texture2D (_LightTexture0, P_11);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12));
  mediump vec4 tmpvar_14;
  mediump vec3 lightDir_15;
  lightDir_15 = lightDir_2;
  mediump float atten_16;
  atten_16 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_10.w) * tmpvar_13.w);
  lowp vec4 c_17;
  lowp float backContrib_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (tmpvar_6, lightDir_15);
  mediump float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_9, -(lightDir_15)), 0.0, 1.0);
  backContrib_18 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp (-(tmpvar_19), 0.0, 1.0);
  lowp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_21, backContrib_18, _TranslucencyViewDependency);
  backContrib_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_4 * ((tmpvar_23 * 2.0) + max (0.0, ((tmpvar_19 * 0.6) + 0.4))));
  c_17.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((c_17.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_15 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_17.xyz = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_17.xyz * (2.0 * atten_16));
  c_17.xyz = tmpvar_26;
  tmpvar_14 = c_17;
  c_1.xyz = tmpvar_14.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_10 = texture2D (_LightTexture0, P_11);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12));
  mediump vec4 tmpvar_14;
  mediump vec3 lightDir_15;
  lightDir_15 = lightDir_2;
  mediump float atten_16;
  atten_16 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_10.w) * tmpvar_13.w);
  lowp vec4 c_17;
  lowp float backContrib_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (normal_6, lightDir_15);
  mediump float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_9, -(lightDir_15)), 0.0, 1.0);
  backContrib_18 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp (-(tmpvar_19), 0.0, 1.0);
  lowp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_21, backContrib_18, _TranslucencyViewDependency);
  backContrib_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_4 * ((tmpvar_23 * 2.0) + max (0.0, ((tmpvar_19 * 0.6) + 0.4))));
  c_17.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((c_17.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_15 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_17.xyz = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_17.xyz * (2.0 * atten_16));
  c_17.xyz = tmpvar_26;
  tmpvar_14 = c_17;
  c_1.xyz = tmpvar_14.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 596
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 629
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 651
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 402
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 406
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 410
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 414
uniform highp vec4 _TreeBillboardDistances;
#line 432
#line 480
#line 498
#line 512
#line 524
uniform highp vec4 _Wind;
#line 592
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 607
#line 623
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 627
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 638
#line 660
uniform highp vec4 _MainTex_ST;
#line 677
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 534
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 536
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 538
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 540
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 542
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 544
    return SmoothCurve( TriangleWave( x));
}
#line 546
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 548
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 552
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 556
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 560
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 525
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 528
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 532
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 498
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 502
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 572
void TreeVertLeaf( inout appdata_full v ) {
    #line 574
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 578
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 661
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 664
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 668
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 672
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 596
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 629
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 651
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 402
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 406
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 410
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 414
uniform highp vec4 _TreeBillboardDistances;
#line 432
#line 480
#line 498
#line 512
#line 524
uniform highp vec4 _Wind;
#line 592
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 607
#line 623
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 627
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 638
#line 660
uniform highp vec4 _MainTex_ST;
#line 677
uniform lowp float _Cutoff;
#line 607
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 611
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 615
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 619
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 398
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 394
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 638
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 642
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 646
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 678
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 681
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 685
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 689
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 93 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R2.xyz, R0.w, R3, -vertex.normal;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R2.xyz, R0.w, c[26];
ADD R0.xyz, -R2, R0;
MAD R0.xyz, R2, c[27].x, R0;
MOV R0.w, c[0].y;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 93 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 98 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhofconmjhdhgmpopbaabhejoheahimokabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(tmpvar_10));
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_13;
  mediump vec3 lightDir_14;
  lightDir_14 = lightDir_2;
  mediump float atten_15;
  atten_15 = (tmpvar_11.w * tmpvar_12.w);
  lowp vec4 c_16;
  lowp float backContrib_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (tmpvar_6, lightDir_14);
  mediump float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_9, -(lightDir_14)), 0.0, 1.0);
  backContrib_17 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp (-(tmpvar_18), 0.0, 1.0);
  lowp float tmpvar_21;
  tmpvar_21 = mix (tmpvar_20, backContrib_17, _TranslucencyViewDependency);
  backContrib_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_4 * ((tmpvar_22 * 2.0) + max (0.0, ((tmpvar_18 * 0.6) + 0.4))));
  c_16.xyz = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((c_16.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_14 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_16.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_16.xyz * (2.0 * atten_15));
  c_16.xyz = tmpvar_25;
  tmpvar_13 = c_16;
  c_1.xyz = tmpvar_13.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(tmpvar_10));
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_13;
  mediump vec3 lightDir_14;
  lightDir_14 = lightDir_2;
  mediump float atten_15;
  atten_15 = (tmpvar_11.w * tmpvar_12.w);
  lowp vec4 c_16;
  lowp float backContrib_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (normal_6, lightDir_14);
  mediump float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_9, -(lightDir_14)), 0.0, 1.0);
  backContrib_17 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp (-(tmpvar_18), 0.0, 1.0);
  lowp float tmpvar_21;
  tmpvar_21 = mix (tmpvar_20, backContrib_17, _TranslucencyViewDependency);
  backContrib_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_4 * ((tmpvar_22 * 2.0) + max (0.0, ((tmpvar_18 * 0.6) + 0.4))));
  c_16.xyz = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((c_16.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_14 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_16.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_16.xyz * (2.0 * atten_15));
  c_16.xyz = tmpvar_25;
  tmpvar_13 = c_16;
  c_1.xyz = tmpvar_13.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 588
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 643
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
#line 397
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
#line 401
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
#line 405
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 424
#line 472
#line 490
#line 504
#line 516
uniform highp vec4 _Wind;
#line 584
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 599
#line 615
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 619
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 630
#line 652
uniform highp vec4 _MainTex_ST;
#line 669
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 526
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 528
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 530
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 532
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 534
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 536
    return SmoothCurve( TriangleWave( x));
}
#line 538
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 540
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 544
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 548
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 552
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 517
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 520
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 524
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 490
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 494
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 564
void TreeVertLeaf( inout appdata_full v ) {
    #line 566
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 570
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 653
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 656
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 660
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 664
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 588
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 643
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
#line 397
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
#line 401
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
#line 405
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 424
#line 472
#line 490
#line 504
#line 516
uniform highp vec4 _Wind;
#line 584
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 599
#line 615
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 619
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 630
#line 652
uniform highp vec4 _MainTex_ST;
#line 669
uniform lowp float _Cutoff;
#line 599
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 603
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 607
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 611
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 630
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 634
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 638
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 670
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 673
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 677
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 681
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 91 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.w, -R1.x, c[0].y;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R0.xyz, R0, R4.w, vertex.position;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R3.xy, R1.xzzw, R1.ywzw;
MAD R4.xyz, R4.w, R2, vertex.normal;
MUL R1.xyz, R3.y, c[28];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R3.zw, vertex.color.y, R4.xyxz;
MOV R1.w, c[0].y;
MUL R1.xz, R3.zyww, c[31].z;
MUL R1.y, vertex.texcoord[1], c[31];
MAD R1.xyz, R3.xyxw, R1, R2;
DP3 R3.x, R4, R4;
MAD R0.xyz, R1, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R1.xyz, R0.w, c[26];
ADD R2.xyz, -R1, R0;
MAD R1.xyz, R1, c[27].x, R2;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R2, vertex.attrib[14].z, c[7], R0;
ADD R2, R2, c[0].x;
DP4 R0.x, R2, R2;
RSQ R0.x, R0.x;
MUL R2.xyz, R0.x, R2;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.w, R2, vertex.attrib[14];
DP3 R3.y, R2, R2;
DP4 R0.w, R1, c[12];
DP4 R0.z, R1, c[11];
DP4 R0.y, R1, c[10];
DP4 R0.x, R1, c[9];
DP4 result.texcoord[3].y, R0, c[18];
DP4 result.texcoord[3].x, R0, c[17];
MOV R0.xyz, c[22];
MOV R0.w, c[0].y;
RSQ R3.w, R3.x;
RSQ R3.y, R3.y;
MUL R3.xyz, R3.y, R2;
MUL R2.xyz, R3.w, R4;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MUL R4.xyz, R4, R2.w;
DP4 R5.z, R0, c[15];
DP4 R5.x, R0, c[13];
DP4 R5.y, R0, c[14];
MAD R0.xyz, R5, c[24].w, -R1;
DP3 result.texcoord[2].y, R4, R0;
DP3 result.texcoord[2].z, R2, R0;
DP3 result.texcoord[2].x, R3, R0;
DP4 result.position.w, R1, c[4];
DP4 result.position.z, R1, c[3];
DP4 result.position.y, R1, c[2];
DP4 result.position.x, R1, c[1];
MOV R1, c[23];
DP4 R0.z, R1, c[15];
DP4 R0.x, R1, c[13];
DP4 R0.y, R1, c[14];
DP3 result.texcoord[1].y, R0, R4;
DP3 result.texcoord[1].z, R2, R0;
DP3 result.texcoord[1].x, R0, R3;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 91 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 96 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.w, -r0, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r4.w, v0
add r3, r2, c29.x
mul r0.xyz, r0, c24
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp4 r0.w, r3, r3
dp3 r1.x, r0, r1.x
add r1.xy, r1, c20.y
mul r1, r1.xxyy, c30
frc r1, r1
mad r1, r1, c29.z, c29.w
frc r1, r1
mad r1, r1, c31.x, c31.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c31.x, c31.z
mul r1, r2, r1
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
add r3.xy, r1.xzzw, r1.ywzw
mad r4.xyz, r4.w, r2, v2
mul r1.xyz, r3.y, c27
mul r2.xyz, v4.y, r1
mul r3.zw, v5.y, r4.xyxz
mov r0.w, c29.y
mul r1.xz, r3.zyww, c32.x
mul r1.y, v4, c31.w
mad r1.xyz, r3.xyxw, r1, r2
mad r0.xyz, r1, c27.w, r0
mad r1.xyz, v4.x, c27, r0
dp3 r3.x, r4, r4
dp3 r0.x, r1, c25
add r0.x, r0, c25.w
mul r0.xyz, r0.x, c25
add r2.xyz, -r0, r1
mad r0.xyz, r0, c26.x, r2
mul r1, v1.y, c5
mad r1, v1.x, c4, r1
mad r2, v1.z, c6, r1
add r2, r2, c29.x
dp4 r1.x, r2, r2
rsq r1.x, r1.x
mul r2.xyz, r1.x, r2
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.w, r2, v1
dp3 r3.y, r2, r2
dp4 r1.w, r0, c11
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
dp4 o4.y, r1, c17
dp4 o4.x, r1, c16
mov r1.w, c29.y
mov r1.xyz, c21
dp4 r5.z, r1, c14
dp4 r5.x, r1, c12
dp4 r5.y, r1, c13
mad r1.xyz, r5, c23.w, -r0
rsq r3.w, r3.x
rsq r3.y, r3.y
mul r3.xyz, r3.y, r2
mul r2.xyz, r3.w, r4
mul r4.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r4
mul r4.xyz, r4, r2.w
dp3 o3.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c22, r0
mov r0, c13
dp4 r5.y, c22, r0
dp3 o3.z, r2, r1
dp3 o3.x, r3, r1
mov r1, c12
dp4 r5.x, c22, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 93 instructions, 5 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgckghcgpnnkalnnecafeiihmneiaflbpabaaaaaaheaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaadaaaaaaaaaaaaaa
adaaaaaaabaaaaaaamadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcniamaaaaeaaaabaa
dgadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadmccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaaeaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaadaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaafaaaaaakgakbaaaabaaaaaa
egaabaaaabaaaaaadcaaaaakmccabaaaabaaaaaaagiecaaaaaaaaaaaagaaaaaa
pgapbaaaabaaaaaaagaebaaaabaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egacbaaaaeaaaaaabaaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaia
ebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaa
acaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaa
adaaaaaacgajbaaaabaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaa
jgaebaaaabaaaaaacgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
baaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaa
aeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaa
aeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
bccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_10;
  mediump vec3 lightDir_11;
  lightDir_11 = lightDir_2;
  mediump float atten_12;
  atten_12 = tmpvar_9.w;
  lowp vec4 c_13;
  lowp float backContrib_14;
  mediump float tmpvar_15;
  tmpvar_15 = dot (tmpvar_6, lightDir_11);
  mediump float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_8, -(lightDir_11)), 0.0, 1.0);
  backContrib_14 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = clamp (-(tmpvar_15), 0.0, 1.0);
  lowp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_17, backContrib_14, _TranslucencyViewDependency);
  backContrib_14 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_4 * ((tmpvar_19 * 2.0) + max (0.0, ((tmpvar_15 * 0.6) + 0.4))));
  c_13.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((c_13.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_11 + tmpvar_8)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_13.xyz = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_13.xyz * mix (2.0, (atten_12 * 2.0), _ShadowStrength));
  c_13.xyz = tmpvar_22;
  tmpvar_10 = c_13;
  c_1.xyz = tmpvar_10.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_10;
  mediump vec3 lightDir_11;
  lightDir_11 = lightDir_2;
  mediump float atten_12;
  atten_12 = tmpvar_9.w;
  lowp vec4 c_13;
  lowp float backContrib_14;
  mediump float tmpvar_15;
  tmpvar_15 = dot (normal_6, lightDir_11);
  mediump float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_8, -(lightDir_11)), 0.0, 1.0);
  backContrib_14 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = clamp (-(tmpvar_15), 0.0, 1.0);
  lowp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_17, backContrib_14, _TranslucencyViewDependency);
  backContrib_14 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_4 * ((tmpvar_19 * 2.0) + max (0.0, ((tmpvar_15 * 0.6) + 0.4))));
  c_13.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((c_13.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_11 + tmpvar_8)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_13.xyz = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_13.xyz * mix (2.0, (atten_12 * 2.0), _ShadowStrength));
  c_13.xyz = tmpvar_22;
  tmpvar_10 = c_13;
  c_1.xyz = tmpvar_10.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 642
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 629
#line 651
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 525
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 527
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 529
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 531
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 533
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 535
    return SmoothCurve( TriangleWave( x));
}
#line 537
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 539
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 543
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 547
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 551
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 516
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 519
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 523
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 489
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 493
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 563
void TreeVertLeaf( inout appdata_full v ) {
    #line 565
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 569
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 652
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 655
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 659
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 663
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 642
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 629
#line 651
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 598
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 602
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 606
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 610
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 629
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 633
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 637
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, IN._LightCoord).w * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 93 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R2.xyz, R0.w, R3, -vertex.normal;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R2.xyz, R0.w, c[26];
ADD R0.xyz, -R2, R0;
MAD R0.xyz, R2, c[27].x, R0;
MOV R0.w, c[0].y;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 93 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 98 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhofconmjhdhgmpopbaabhejoheahimokabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16));
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = lightDir_2;
  mediump float atten_20;
  atten_20 = tmpvar_17.w;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (tmpvar_10, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (tmpvar_15, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_8 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_19 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * (2.0 * atten_20));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1.xyz = tmpvar_18.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16));
  mediump vec4 tmpvar_18;
  mediump vec3 lightDir_19;
  lightDir_19 = lightDir_2;
  mediump float atten_20;
  atten_20 = tmpvar_17.w;
  lowp vec4 c_21;
  lowp float backContrib_22;
  mediump float tmpvar_23;
  tmpvar_23 = dot (normal_10, lightDir_19);
  mediump float tmpvar_24;
  tmpvar_24 = clamp (dot (tmpvar_15, -(lightDir_19)), 0.0, 1.0);
  backContrib_22 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = clamp (-(tmpvar_23), 0.0, 1.0);
  lowp float tmpvar_26;
  tmpvar_26 = mix (tmpvar_25, backContrib_22, _TranslucencyViewDependency);
  backContrib_22 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((tmpvar_26 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_28;
  tmpvar_28 = (tmpvar_8 * ((tmpvar_27 * 2.0) + max (0.0, ((tmpvar_23 * 0.6) + 0.4))));
  c_21.xyz = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = ((c_21.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_19 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_21.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = (c_21.xyz * (2.0 * atten_20));
  c_21.xyz = tmpvar_30;
  tmpvar_18 = c_21;
  c_1.xyz = tmpvar_18.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 646
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 630
#line 655
uniform highp vec4 _MainTex_ST;
#line 672
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 525
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 527
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 529
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 531
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 533
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 535
    return SmoothCurve( TriangleWave( x));
}
#line 537
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 539
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 543
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 547
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 551
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 516
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 519
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 523
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 489
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 493
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 563
void TreeVertLeaf( inout appdata_full v ) {
    #line 565
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 569
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 656
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 659
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 663
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 667
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 646
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 630
#line 655
uniform highp vec4 _MainTex_ST;
#line 672
uniform lowp float _Cutoff;
#line 598
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 602
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 606
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 610
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 630
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 634
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 638
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 642
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 673
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 676
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 680
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 684
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 20 [unity_Scale]
Vector 21 [_Scale]
Vector 22 [_SquashPlaneNormal]
Float 23 [_SquashAmount]
Vector 24 [_Wind]
Vector 25 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 85 ALU
PARAM c[28] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..25],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R3.w, R3, R3;
ABS R0.w, vertex.attrib[14];
ADD R0.w, -R0, c[0].y;
MAD R0.xyz, R0, R0.w, vertex.position;
MOV R1.x, c[0].y;
DP3 R1.x, R1.x, c[12];
ADD R1.x, vertex.color, R1;
ADD R1.z, vertex.color.y, R1.x;
MUL R0.xyz, R0, c[21];
MOV R1.y, R1.x;
DP3 R1.x, R0, R1.z;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[26];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
RSQ R3.w, R3.w;
ADD R2, R2, c[27].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
MAD R2.xyz, R3.w, R3, -vertex.normal;
MAD R3.xyz, R0.w, R2, vertex.normal;
ADD R5.xy, R1.xzzw, R1.ywzw;
MUL R1.xyz, R5.y, c[24];
MUL R2.xy, vertex.color.y, R3.xzzw;
MUL R4.xyz, vertex.texcoord[1].y, R1;
MUL R2.xz, R2.xyyw, c[27].z;
MUL R1, vertex.attrib[14].y, c[6];
MUL R2.y, vertex.texcoord[1], c[27];
MAD R2.xyz, R5.xyxw, R2, R4;
MAD R0.xyz, R2, c[24].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[24], R0;
DP3 R0.x, R2, c[22];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R0.y, R1, R1;
RSQ R0.y, R0.y;
MOV R3.w, c[0].y;
MUL R1.xyz, R0.y, R1;
ADD R0.x, R0, c[22].w;
MUL R0.xyz, R0.x, c[22];
ADD R4.xyz, -R0, R2;
MOV R1.w, c[27];
ADD R1, -vertex.attrib[14], R1;
MAD R1, R0.w, R1, vertex.attrib[14];
DP3 R2.x, R1, R1;
DP3 R0.w, R3, R3;
RSQ R2.x, R2.x;
MAD R0.xyz, R0, c[23].x, R4;
MUL R2.xyz, R2.x, R1;
RSQ R0.w, R0.w;
MUL R1.xyz, R0.w, R3;
MOV R0.w, c[0].y;
MUL R3.xyz, R1.zxyw, R2.yzxw;
MAD R5.xyz, R1.yzxw, R2.zxyw, -R3;
MOV R3.xyz, c[18];
DP4 R4.z, R3, c[15];
DP4 R4.y, R3, c[14];
DP4 R4.x, R3, c[13];
MAD R4.xyz, R4, c[20].w, -R0;
MUL R3.xyz, R5, R1.w;
DP3 result.texcoord[2].y, R3, R4;
DP3 result.texcoord[2].z, R1, R4;
DP3 result.texcoord[2].x, R2, R4;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MOV R0, c[19];
DP4 R4.z, R0, c[15];
DP4 R4.x, R0, c[13];
DP4 R4.y, R0, c[14];
DP3 result.texcoord[1].y, R4, R3;
DP3 result.texcoord[1].z, R1, R4;
DP3 result.texcoord[1].x, R4, R2;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[25], c[25].zwzw;
END
# 85 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 19 [unity_Scale]
Vector 20 [_Scale]
Vector 21 [_SquashPlaneNormal]
Float 22 [_SquashAmount]
Vector 23 [_Wind]
Vector 24 [_MainTex_ST]
"vs_3_0
; 90 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
def c25, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c26, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c27, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c28, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
mov r1.xyz, c11
dp3 r1.x, c25.y, r1
add r1.x, v5, r1
add r0.xyz, r2, c25.x
mad r2, v2.z, c6, r2
add r3, r2, c25.x
dp4 r3.w, r3, r3
abs r0.w, v1
add r0.w, -r0, c25.y
mad r0.xyz, r0, r0.w, v0
add r1.z, v5.y, r1.x
mul r0.xyz, r0, c20
mov r1.y, r1.x
dp3 r1.x, r0, r1.z
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c26
frc r1, r1
mad r1, r1, c25.z, c25.w
frc r1, r1
mad r1, r1, c27.x, c27.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c27.x, c27.z
mul r1, r2, r1
rsq r3.w, r3.w
add r5.xy, r1.xzzw, r1.ywzw
mad r2.xyz, r3.w, r3, -v2
mad r1.xyz, r0.w, r2, v2
mul r2.xyz, r5.y, c23
mul r3.xy, v5.y, r1.xzzw
mul r4.xyz, v4.y, r2
mul r3.xz, r3.xyyw, c28.x
mul r2, v1.y, c5
mul r3.y, v4, c27.w
mad r3.xyz, r5.xyxw, r3, r4
mad r0.xyz, r3, c23.w, r0
mad r3.xyz, v4.x, c23, r0
dp3 r0.x, r3, c21
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c25.x
dp4 r0.y, r2, r2
rsq r0.y, r0.y
mul r2.xyz, r0.y, r2
add r0.x, r0, c21.w
mul r0.xyz, r0.x, c21
add r4.xyz, -r0, r3
mov r2.w, c27.y
add r2, -v1, r2
mad r2, r0.w, r2, v1
dp3 r1.w, r2, r2
dp3 r0.w, r1, r1
rsq r1.w, r1.w
mul r3.xyz, r1.w, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r1
mad r0.xyz, r0, c22.x, r4
mov r0.w, c25.y
mul r1.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r1
mov r1.w, c25.y
mov r1.xyz, c17
dp4 r5.z, r1, c14
dp4 r5.y, r1, c13
dp4 r5.x, r1, c12
mad r1.xyz, r5, c19.w, -r0
mul r4.xyz, r4, r2.w
dp3 o3.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c18, r0
mov r0, c13
dp4 r5.y, c18, r0
dp3 o3.z, r2, r1
dp3 o3.x, r3, r1
mov r1, c12
dp4 r5.x, c18, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mad o1.xy, v3, c24, c24.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 85 instructions, 5 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedecojnloklllmjhjhmojbbocnhbipplckabaaaaaacianaaaaadaaaaaa
cmaaaaaapeaaaaaahmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoiaaaaaaaaeaaaaaa
aiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaheaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
kealaaaaeaaaabaaojacaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaad
hcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacafaaaaaa
dgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaa
aaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaa
adaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaa
aaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
bkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
kgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaa
aeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
alaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
aiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
ajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
akaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaa
egacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaa
diaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaah
fcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaa
aaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaa
dcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaa
alaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaa
adaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaa
aiaaaaaaogikcaaaaaaaaaaaaiaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaabaaaaaai
icaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
icaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialpaaaaaaai
pcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaaj
pcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaaabaaaaaa
jgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaacgajbaaa
acaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaa
beaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_15;
  mediump vec3 lightDir_16;
  lightDir_16 = lightDir_2;
  lowp vec4 c_17;
  lowp float backContrib_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (tmpvar_10, lightDir_16);
  mediump float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_14, -(lightDir_16)), 0.0, 1.0);
  backContrib_18 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp (-(tmpvar_19), 0.0, 1.0);
  lowp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_21, backContrib_18, _TranslucencyViewDependency);
  backContrib_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_8 * ((tmpvar_23 * 2.0) + max (0.0, ((tmpvar_19 * 0.6) + 0.4))));
  c_17.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((c_17.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_16 + tmpvar_14)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_17.xyz = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_17.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_17.xyz = tmpvar_26;
  tmpvar_15 = c_17;
  c_1.xyz = tmpvar_15.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_15;
  mediump vec3 lightDir_16;
  lightDir_16 = lightDir_2;
  lowp vec4 c_17;
  lowp float backContrib_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (normal_10, lightDir_16);
  mediump float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_14, -(lightDir_16)), 0.0, 1.0);
  backContrib_18 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp (-(tmpvar_19), 0.0, 1.0);
  lowp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_21, backContrib_18, _TranslucencyViewDependency);
  backContrib_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_8 * ((tmpvar_23 * 2.0) + max (0.0, ((tmpvar_19 * 0.6) + 0.4))));
  c_17.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((c_17.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_16 + tmpvar_14)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_17.xyz = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_17.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_17.xyz = tmpvar_26;
  tmpvar_15 = c_17;
  c_1.xyz = tmpvar_15.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 644
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 653
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 656
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 660
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 664
    o.viewDir = viewDirForLight;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 644
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 640
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), 1.0);
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 94 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MOV R0.w, c[0].y;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.x, R2, c[26];
ADD R0.x, R0, c[26].w;
MUL R0.xyz, R0.x, c[26];
ADD R2.xyz, -R0, R2;
MAD R0.xyz, R0, c[27].x, R2;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].w, R3, c[20];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 94 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 99 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.w, r3, c19
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaoohcfgdmpmmdgapmgibkmackfofgmfbabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaa
egiocaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  mediump vec4 tmpvar_20;
  mediump vec3 lightDir_21;
  lightDir_21 = lightDir_2;
  mediump float atten_22;
  atten_22 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_16.w) * tmpvar_19.w);
  lowp vec4 c_23;
  lowp float backContrib_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (tmpvar_10, lightDir_21);
  mediump float tmpvar_26;
  tmpvar_26 = clamp (dot (tmpvar_15, -(lightDir_21)), 0.0, 1.0);
  backContrib_24 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp (-(tmpvar_25), 0.0, 1.0);
  lowp float tmpvar_28;
  tmpvar_28 = mix (tmpvar_27, backContrib_24, _TranslucencyViewDependency);
  backContrib_24 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_8 * ((tmpvar_29 * 2.0) + max (0.0, ((tmpvar_25 * 0.6) + 0.4))));
  c_23.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((c_23.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_21 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_23.xyz = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (c_23.xyz * (2.0 * atten_22));
  c_23.xyz = tmpvar_32;
  tmpvar_20 = c_23;
  c_1.xyz = tmpvar_20.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_16;
  highp vec2 P_17;
  P_17 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_16 = texture2D (_LightTexture0, P_17);
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(tmpvar_18));
  mediump vec4 tmpvar_20;
  mediump vec3 lightDir_21;
  lightDir_21 = lightDir_2;
  mediump float atten_22;
  atten_22 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_16.w) * tmpvar_19.w);
  lowp vec4 c_23;
  lowp float backContrib_24;
  mediump float tmpvar_25;
  tmpvar_25 = dot (normal_10, lightDir_21);
  mediump float tmpvar_26;
  tmpvar_26 = clamp (dot (tmpvar_15, -(lightDir_21)), 0.0, 1.0);
  backContrib_24 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = clamp (-(tmpvar_25), 0.0, 1.0);
  lowp float tmpvar_28;
  tmpvar_28 = mix (tmpvar_27, backContrib_24, _TranslucencyViewDependency);
  backContrib_24 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((tmpvar_28 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_30;
  tmpvar_30 = (tmpvar_8 * ((tmpvar_29 * 2.0) + max (0.0, ((tmpvar_25 * 0.6) + 0.4))));
  c_23.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = ((c_23.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_21 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_23.xyz = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = (c_23.xyz * (2.0 * atten_22));
  c_23.xyz = tmpvar_32;
  tmpvar_20 = c_23;
  c_1.xyz = tmpvar_20.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 596
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 630
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 402
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 406
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 410
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 414
uniform highp vec4 _TreeBillboardDistances;
#line 432
#line 480
#line 498
#line 512
#line 524
uniform highp vec4 _Wind;
#line 592
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 607
#line 623
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 627
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 664
uniform highp vec4 _MainTex_ST;
#line 681
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 534
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 536
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 538
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 540
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 542
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 544
    return SmoothCurve( TriangleWave( x));
}
#line 546
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 548
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 552
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 556
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 560
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 525
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 528
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 532
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 498
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 502
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 572
void TreeVertLeaf( inout appdata_full v ) {
    #line 574
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 578
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 665
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 668
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 672
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 676
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 596
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 630
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 655
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 402
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 406
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 410
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 414
uniform highp vec4 _TreeBillboardDistances;
#line 432
#line 480
#line 498
#line 512
#line 524
uniform highp vec4 _Wind;
#line 592
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 607
#line 623
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 627
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 639
#line 664
uniform highp vec4 _MainTex_ST;
#line 681
uniform lowp float _Cutoff;
#line 607
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 611
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 615
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 619
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 398
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 394
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 639
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 643
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 647
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 651
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 682
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 685
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 689
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 693
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 93 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R2.xyz, R0.w, R3, -vertex.normal;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R2.xyz, R0.w, c[26];
ADD R0.xyz, -R2, R0;
MAD R0.xyz, R2, c[27].x, R0;
MOV R0.w, c[0].y;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 93 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 98 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhofconmjhdhgmpopbaabhejoheahimokabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_19;
  mediump vec3 lightDir_20;
  lightDir_20 = lightDir_2;
  mediump float atten_21;
  atten_21 = (tmpvar_17.w * tmpvar_18.w);
  lowp vec4 c_22;
  lowp float backContrib_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (tmpvar_10, lightDir_20);
  mediump float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_15, -(lightDir_20)), 0.0, 1.0);
  backContrib_23 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp (-(tmpvar_24), 0.0, 1.0);
  lowp float tmpvar_27;
  tmpvar_27 = mix (tmpvar_26, backContrib_23, _TranslucencyViewDependency);
  backContrib_23 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * ((tmpvar_28 * 2.0) + max (0.0, ((tmpvar_24 * 0.6) + 0.4))));
  c_22.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((c_22.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_20 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_22.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_22.xyz * (2.0 * atten_21));
  c_22.xyz = tmpvar_31;
  tmpvar_19 = c_22;
  c_1.xyz = tmpvar_19.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_LightTextureB0, vec2(tmpvar_16));
  lowp vec4 tmpvar_18;
  tmpvar_18 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_19;
  mediump vec3 lightDir_20;
  lightDir_20 = lightDir_2;
  mediump float atten_21;
  atten_21 = (tmpvar_17.w * tmpvar_18.w);
  lowp vec4 c_22;
  lowp float backContrib_23;
  mediump float tmpvar_24;
  tmpvar_24 = dot (normal_10, lightDir_20);
  mediump float tmpvar_25;
  tmpvar_25 = clamp (dot (tmpvar_15, -(lightDir_20)), 0.0, 1.0);
  backContrib_23 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = clamp (-(tmpvar_24), 0.0, 1.0);
  lowp float tmpvar_27;
  tmpvar_27 = mix (tmpvar_26, backContrib_23, _TranslucencyViewDependency);
  backContrib_23 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_8 * ((tmpvar_28 * 2.0) + max (0.0, ((tmpvar_24 * 0.6) + 0.4))));
  c_22.xyz = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = ((c_22.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_20 + tmpvar_15)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_22.xyz = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = (c_22.xyz * (2.0 * atten_21));
  c_22.xyz = tmpvar_31;
  tmpvar_19 = c_22;
  c_1.xyz = tmpvar_19.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 588
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 622
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
#line 397
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
#line 401
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
#line 405
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 424
#line 472
#line 490
#line 504
#line 516
uniform highp vec4 _Wind;
#line 584
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 599
#line 615
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 619
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 656
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 526
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 528
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 530
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 532
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 534
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 536
    return SmoothCurve( TriangleWave( x));
}
#line 538
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 540
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 544
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 548
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 552
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 517
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 520
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 524
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 490
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 494
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 564
void TreeVertLeaf( inout appdata_full v ) {
    #line 566
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 570
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 657
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 660
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 664
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 668
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 588
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 622
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 647
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
#line 397
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
#line 401
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
#line 405
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 424
#line 472
#line 490
#line 504
#line 516
uniform highp vec4 _Wind;
#line 584
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 599
#line 615
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 619
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 631
#line 656
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 599
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 603
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 607
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 611
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 631
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 635
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 639
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 643
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 674
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 677
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 681
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 685
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 91 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.w, -R1.x, c[0].y;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R0.xyz, R0, R4.w, vertex.position;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R3.xy, R1.xzzw, R1.ywzw;
MAD R4.xyz, R4.w, R2, vertex.normal;
MUL R1.xyz, R3.y, c[28];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R3.zw, vertex.color.y, R4.xyxz;
MOV R1.w, c[0].y;
MUL R1.xz, R3.zyww, c[31].z;
MUL R1.y, vertex.texcoord[1], c[31];
MAD R1.xyz, R3.xyxw, R1, R2;
DP3 R3.x, R4, R4;
MAD R0.xyz, R1, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R1.xyz, R0.w, c[26];
ADD R2.xyz, -R1, R0;
MAD R1.xyz, R1, c[27].x, R2;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R2, vertex.attrib[14].z, c[7], R0;
ADD R2, R2, c[0].x;
DP4 R0.x, R2, R2;
RSQ R0.x, R0.x;
MUL R2.xyz, R0.x, R2;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.w, R2, vertex.attrib[14];
DP3 R3.y, R2, R2;
DP4 R0.w, R1, c[12];
DP4 R0.z, R1, c[11];
DP4 R0.y, R1, c[10];
DP4 R0.x, R1, c[9];
DP4 result.texcoord[3].y, R0, c[18];
DP4 result.texcoord[3].x, R0, c[17];
MOV R0.xyz, c[22];
MOV R0.w, c[0].y;
RSQ R3.w, R3.x;
RSQ R3.y, R3.y;
MUL R3.xyz, R3.y, R2;
MUL R2.xyz, R3.w, R4;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MUL R4.xyz, R4, R2.w;
DP4 R5.z, R0, c[15];
DP4 R5.x, R0, c[13];
DP4 R5.y, R0, c[14];
MAD R0.xyz, R5, c[24].w, -R1;
DP3 result.texcoord[2].y, R4, R0;
DP3 result.texcoord[2].z, R2, R0;
DP3 result.texcoord[2].x, R3, R0;
DP4 result.position.w, R1, c[4];
DP4 result.position.z, R1, c[3];
DP4 result.position.y, R1, c[2];
DP4 result.position.x, R1, c[1];
MOV R1, c[23];
DP4 R0.z, R1, c[15];
DP4 R0.x, R1, c[13];
DP4 R0.y, R1, c[14];
DP3 result.texcoord[1].y, R0, R4;
DP3 result.texcoord[1].z, R2, R0;
DP3 result.texcoord[1].x, R0, R3;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 91 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 96 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.w, -r0, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r4.w, v0
add r3, r2, c29.x
mul r0.xyz, r0, c24
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp4 r0.w, r3, r3
dp3 r1.x, r0, r1.x
add r1.xy, r1, c20.y
mul r1, r1.xxyy, c30
frc r1, r1
mad r1, r1, c29.z, c29.w
frc r1, r1
mad r1, r1, c31.x, c31.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c31.x, c31.z
mul r1, r2, r1
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
add r3.xy, r1.xzzw, r1.ywzw
mad r4.xyz, r4.w, r2, v2
mul r1.xyz, r3.y, c27
mul r2.xyz, v4.y, r1
mul r3.zw, v5.y, r4.xyxz
mov r0.w, c29.y
mul r1.xz, r3.zyww, c32.x
mul r1.y, v4, c31.w
mad r1.xyz, r3.xyxw, r1, r2
mad r0.xyz, r1, c27.w, r0
mad r1.xyz, v4.x, c27, r0
dp3 r3.x, r4, r4
dp3 r0.x, r1, c25
add r0.x, r0, c25.w
mul r0.xyz, r0.x, c25
add r2.xyz, -r0, r1
mad r0.xyz, r0, c26.x, r2
mul r1, v1.y, c5
mad r1, v1.x, c4, r1
mad r2, v1.z, c6, r1
add r2, r2, c29.x
dp4 r1.x, r2, r2
rsq r1.x, r1.x
mul r2.xyz, r1.x, r2
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.w, r2, v1
dp3 r3.y, r2, r2
dp4 r1.w, r0, c11
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
dp4 o4.y, r1, c17
dp4 o4.x, r1, c16
mov r1.w, c29.y
mov r1.xyz, c21
dp4 r5.z, r1, c14
dp4 r5.x, r1, c12
dp4 r5.y, r1, c13
mad r1.xyz, r5, c23.w, -r0
rsq r3.w, r3.x
rsq r3.y, r3.y
mul r3.xyz, r3.y, r2
mul r2.xyz, r3.w, r4
mul r4.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r4
mul r4.xyz, r4, r2.w
dp3 o3.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c22, r0
mov r0, c13
dp4 r5.y, c22, r0
dp3 o3.z, r2, r1
dp3 o3.x, r3, r1
mov r1, c12
dp4 r5.x, c22, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 93 instructions, 5 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgckghcgpnnkalnnecafeiihmneiaflbpabaaaaaaheaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaadaaaaaaaaaaaaaa
adaaaaaaabaaaaaaamadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcniamaaaaeaaaabaa
dgadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadmccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaaeaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaadaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaafaaaaaakgakbaaaabaaaaaa
egaabaaaabaaaaaadcaaaaakmccabaaaabaaaaaaagiecaaaaaaaaaaaagaaaaaa
pgapbaaaabaaaaaaagaebaaaabaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egacbaaaaeaaaaaabaaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaia
ebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaa
acaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaa
adaaaaaacgajbaaaabaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaa
jgaebaaaabaaaaaacgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
baaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaa
aeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaa
aeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
bccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  worldNormal_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_16;
  mediump vec3 lightDir_17;
  lightDir_17 = lightDir_2;
  mediump float atten_18;
  atten_18 = tmpvar_15.w;
  lowp vec4 c_19;
  lowp float backContrib_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (tmpvar_10, lightDir_17);
  mediump float tmpvar_22;
  tmpvar_22 = clamp (dot (tmpvar_14, -(lightDir_17)), 0.0, 1.0);
  backContrib_20 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (-(tmpvar_21), 0.0, 1.0);
  lowp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_23, backContrib_20, _TranslucencyViewDependency);
  backContrib_20 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_24 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_8 * ((tmpvar_25 * 2.0) + max (0.0, ((tmpvar_21 * 0.6) + 0.4))));
  c_19.xyz = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((c_19.xyz + (pow (max (0.0, dot (tmpvar_10, normalize((lightDir_17 + tmpvar_14)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_19.xyz = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_19.xyz * mix (2.0, (atten_18 * 2.0), _ShadowStrength));
  c_19.xyz = tmpvar_28;
  tmpvar_16 = c_19;
  c_1.xyz = tmpvar_16.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  lowp vec3 tmpvar_4;
  lowp vec4 diff_ibl_5;
  highp vec3 worldNormal_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7.xyz * _Color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_6 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_6);
  diff_ibl_5.w = tmpvar_11.w;
  diff_ibl_5.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_5.xyz * ExposureIBL.x) * tmpvar_8);
  tmpvar_4 = tmpvar_12;
  tmpvar_4 = (tmpvar_4 * tmpvar_3.w);
  lowp float x_13;
  x_13 = (tmpvar_7.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_14;
  tmpvar_14 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_16;
  mediump vec3 lightDir_17;
  lightDir_17 = lightDir_2;
  mediump float atten_18;
  atten_18 = tmpvar_15.w;
  lowp vec4 c_19;
  lowp float backContrib_20;
  mediump float tmpvar_21;
  tmpvar_21 = dot (normal_10, lightDir_17);
  mediump float tmpvar_22;
  tmpvar_22 = clamp (dot (tmpvar_14, -(lightDir_17)), 0.0, 1.0);
  backContrib_20 = tmpvar_22;
  mediump float tmpvar_23;
  tmpvar_23 = clamp (-(tmpvar_21), 0.0, 1.0);
  lowp float tmpvar_24;
  tmpvar_24 = mix (tmpvar_23, backContrib_20, _TranslucencyViewDependency);
  backContrib_20 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((tmpvar_24 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_26;
  tmpvar_26 = (tmpvar_8 * ((tmpvar_25 * 2.0) + max (0.0, ((tmpvar_21 * 0.6) + 0.4))));
  c_19.xyz = tmpvar_26;
  mediump vec3 tmpvar_27;
  tmpvar_27 = ((c_19.xyz + (pow (max (0.0, dot (normal_10, normalize((lightDir_17 + tmpvar_14)))), (_Shininess * 128.0)) * tmpvar_9.w)) * _LightColor0.xyz);
  c_19.xyz = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = (c_19.xyz * mix (2.0, (atten_18 * 2.0), _ShadowStrength));
  c_19.xyz = tmpvar_28;
  tmpvar_16 = c_19;
  c_1.xyz = tmpvar_16.xyz;
  c_1.w = tmpvar_7.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 646
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 630
#line 655
uniform highp vec4 _MainTex_ST;
#line 672
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 525
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 527
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 529
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 531
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 533
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 535
    return SmoothCurve( TriangleWave( x));
}
#line 537
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 539
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 543
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 547
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 551
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 516
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 519
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 523
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 489
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 493
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 563
void TreeVertLeaf( inout appdata_full v ) {
    #line 565
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 569
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 656
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 659
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 663
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 667
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 646
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 630
#line 655
uniform highp vec4 _MainTex_ST;
#line 672
uniform lowp float _Cutoff;
#line 598
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 602
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 606
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 610
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 630
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 634
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 638
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 642
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 673
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 676
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 680
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 684
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, IN._LightCoord).w * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 93 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R2.xyz, R0.w, R3, -vertex.normal;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R2.xyz, R0.w, c[26];
ADD R0.xyz, -R2, R0;
MAD R0.xyz, R2, c[27].x, R0;
MOV R0.w, c[0].y;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 93 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 98 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhofconmjhdhgmpopbaabhejoheahimokabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(tmpvar_10));
  mediump vec4 tmpvar_12;
  mediump vec3 lightDir_13;
  lightDir_13 = lightDir_2;
  mediump float atten_14;
  atten_14 = tmpvar_11.w;
  lowp vec4 c_15;
  lowp float backContrib_16;
  mediump float tmpvar_17;
  tmpvar_17 = dot (tmpvar_6, lightDir_13);
  mediump float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_9, -(lightDir_13)), 0.0, 1.0);
  backContrib_16 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (-(tmpvar_17), 0.0, 1.0);
  lowp float tmpvar_20;
  tmpvar_20 = mix (tmpvar_19, backContrib_16, _TranslucencyViewDependency);
  backContrib_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_4 * ((tmpvar_21 * 2.0) + max (0.0, ((tmpvar_17 * 0.6) + 0.4))));
  c_15.xyz = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((c_15.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_13 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_15.xyz = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_15.xyz * (2.0 * atten_14));
  c_15.xyz = tmpvar_24;
  tmpvar_12 = c_15;
  c_1.xyz = tmpvar_12.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(tmpvar_10));
  mediump vec4 tmpvar_12;
  mediump vec3 lightDir_13;
  lightDir_13 = lightDir_2;
  mediump float atten_14;
  atten_14 = tmpvar_11.w;
  lowp vec4 c_15;
  lowp float backContrib_16;
  mediump float tmpvar_17;
  tmpvar_17 = dot (normal_6, lightDir_13);
  mediump float tmpvar_18;
  tmpvar_18 = clamp (dot (tmpvar_9, -(lightDir_13)), 0.0, 1.0);
  backContrib_16 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = clamp (-(tmpvar_17), 0.0, 1.0);
  lowp float tmpvar_20;
  tmpvar_20 = mix (tmpvar_19, backContrib_16, _TranslucencyViewDependency);
  backContrib_16 = tmpvar_20;
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((tmpvar_20 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_22;
  tmpvar_22 = (tmpvar_4 * ((tmpvar_21 * 2.0) + max (0.0, ((tmpvar_17 * 0.6) + 0.4))));
  c_15.xyz = tmpvar_22;
  mediump vec3 tmpvar_23;
  tmpvar_23 = ((c_15.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_13 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_15.xyz = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = (c_15.xyz * (2.0 * atten_14));
  c_15.xyz = tmpvar_24;
  tmpvar_12 = c_15;
  c_1.xyz = tmpvar_12.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 642
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 629
#line 651
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 525
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 527
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 529
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 531
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 533
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 535
    return SmoothCurve( TriangleWave( x));
}
#line 537
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 539
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 543
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 547
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 551
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 516
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 519
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 523
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 489
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 493
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 563
void TreeVertLeaf( inout appdata_full v ) {
    #line 565
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 569
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 652
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 655
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 659
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 663
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 642
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 629
#line 651
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 598
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 602
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 606
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 610
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 629
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 633
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 637
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 17 [_Time]
Vector 18 [_WorldSpaceCameraPos]
Vector 19 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 20 [unity_Scale]
Vector 21 [_Scale]
Vector 22 [_SquashPlaneNormal]
Float 23 [_SquashAmount]
Vector 24 [_Wind]
Vector 25 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 85 ALU
PARAM c[28] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..25],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
MAD R2, vertex.normal.z, c[7], R2;
ADD R3, R2, c[0].x;
DP4 R3.w, R3, R3;
ABS R0.w, vertex.attrib[14];
ADD R0.w, -R0, c[0].y;
MAD R0.xyz, R0, R0.w, vertex.position;
MOV R1.x, c[0].y;
DP3 R1.x, R1.x, c[12];
ADD R1.x, vertex.color, R1;
ADD R1.z, vertex.color.y, R1.x;
MUL R0.xyz, R0, c[21];
MOV R1.y, R1.x;
DP3 R1.x, R0, R1.z;
ADD R1.xy, R1, c[17].y;
MUL R1, R1.xxyy, c[26];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
RSQ R3.w, R3.w;
ADD R2, R2, c[27].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
MAD R2.xyz, R3.w, R3, -vertex.normal;
MAD R3.xyz, R0.w, R2, vertex.normal;
ADD R5.xy, R1.xzzw, R1.ywzw;
MUL R1.xyz, R5.y, c[24];
MUL R2.xy, vertex.color.y, R3.xzzw;
MUL R4.xyz, vertex.texcoord[1].y, R1;
MUL R2.xz, R2.xyyw, c[27].z;
MUL R1, vertex.attrib[14].y, c[6];
MUL R2.y, vertex.texcoord[1], c[27];
MAD R2.xyz, R5.xyxw, R2, R4;
MAD R0.xyz, R2, c[24].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[24], R0;
DP3 R0.x, R2, c[22];
MAD R1, vertex.attrib[14].x, c[5], R1;
MAD R1, vertex.attrib[14].z, c[7], R1;
ADD R1, R1, c[0].x;
DP4 R0.y, R1, R1;
RSQ R0.y, R0.y;
MOV R3.w, c[0].y;
MUL R1.xyz, R0.y, R1;
ADD R0.x, R0, c[22].w;
MUL R0.xyz, R0.x, c[22];
ADD R4.xyz, -R0, R2;
MOV R1.w, c[27];
ADD R1, -vertex.attrib[14], R1;
MAD R1, R0.w, R1, vertex.attrib[14];
DP3 R2.x, R1, R1;
DP3 R0.w, R3, R3;
RSQ R2.x, R2.x;
MAD R0.xyz, R0, c[23].x, R4;
MUL R2.xyz, R2.x, R1;
RSQ R0.w, R0.w;
MUL R1.xyz, R0.w, R3;
MOV R0.w, c[0].y;
MUL R3.xyz, R1.zxyw, R2.yzxw;
MAD R5.xyz, R1.yzxw, R2.zxyw, -R3;
MOV R3.xyz, c[18];
DP4 R4.z, R3, c[15];
DP4 R4.y, R3, c[14];
DP4 R4.x, R3, c[13];
MAD R4.xyz, R4, c[20].w, -R0;
MUL R3.xyz, R5, R1.w;
DP3 result.texcoord[2].y, R3, R4;
DP3 result.texcoord[2].z, R1, R4;
DP3 result.texcoord[2].x, R2, R4;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MOV R0, c[19];
DP4 R4.z, R0, c[15];
DP4 R4.x, R0, c[13];
DP4 R4.y, R0, c[14];
DP3 result.texcoord[1].y, R4, R3;
DP3 result.texcoord[1].z, R1, R4;
DP3 result.texcoord[1].x, R4, R2;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[25], c[25].zwzw;
END
# 85 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 16 [_Time]
Vector 17 [_WorldSpaceCameraPos]
Vector 18 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 19 [unity_Scale]
Vector 20 [_Scale]
Vector 21 [_SquashPlaneNormal]
Float 22 [_SquashAmount]
Vector 23 [_Wind]
Vector 24 [_MainTex_ST]
"vs_3_0
; 90 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
def c25, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c26, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c27, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c28, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
mov r1.xyz, c11
dp3 r1.x, c25.y, r1
add r1.x, v5, r1
add r0.xyz, r2, c25.x
mad r2, v2.z, c6, r2
add r3, r2, c25.x
dp4 r3.w, r3, r3
abs r0.w, v1
add r0.w, -r0, c25.y
mad r0.xyz, r0, r0.w, v0
add r1.z, v5.y, r1.x
mul r0.xyz, r0, c20
mov r1.y, r1.x
dp3 r1.x, r0, r1.z
add r1.xy, r1, c16.y
mul r1, r1.xxyy, c26
frc r1, r1
mad r1, r1, c25.z, c25.w
frc r1, r1
mad r1, r1, c27.x, c27.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c27.x, c27.z
mul r1, r2, r1
rsq r3.w, r3.w
add r5.xy, r1.xzzw, r1.ywzw
mad r2.xyz, r3.w, r3, -v2
mad r1.xyz, r0.w, r2, v2
mul r2.xyz, r5.y, c23
mul r3.xy, v5.y, r1.xzzw
mul r4.xyz, v4.y, r2
mul r3.xz, r3.xyyw, c28.x
mul r2, v1.y, c5
mul r3.y, v4, c27.w
mad r3.xyz, r5.xyxw, r3, r4
mad r0.xyz, r3, c23.w, r0
mad r3.xyz, v4.x, c23, r0
dp3 r0.x, r3, c21
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c25.x
dp4 r0.y, r2, r2
rsq r0.y, r0.y
mul r2.xyz, r0.y, r2
add r0.x, r0, c21.w
mul r0.xyz, r0.x, c21
add r4.xyz, -r0, r3
mov r2.w, c27.y
add r2, -v1, r2
mad r2, r0.w, r2, v1
dp3 r1.w, r2, r2
dp3 r0.w, r1, r1
rsq r1.w, r1.w
mul r3.xyz, r1.w, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r1
mad r0.xyz, r0, c22.x, r4
mov r0.w, c25.y
mul r1.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r1
mov r1.w, c25.y
mov r1.xyz, c17
dp4 r5.z, r1, c14
dp4 r5.y, r1, c13
dp4 r5.x, r1, c12
mad r1.xyz, r5, c19.w, -r0
mul r4.xyz, r4, r2.w
dp3 o3.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c18, r0
mov r0, c13
dp4 r5.y, c18, r0
dp3 o3.z, r2, r1
dp3 o3.x, r3, r1
mov r1, c12
dp4 r5.x, c18, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mad o1.xy, v3, c24, c24.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 85 instructions, 5 temp regs, 0 temp arrays:
// ALU 79 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedecojnloklllmjhjhmojbbocnhbipplckabaaaaaacianaaaaadaaaaaa
cmaaaaaapeaaaaaahmabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheoiaaaaaaaaeaaaaaa
aiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaheaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefc
kealaaaaeaaaabaaojacaaaafjaaaaaeegiocaaaaaaaaaaaajaaaaaafjaaaaae
egiocaaaabaaaaaaafaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaae
egiocaaaadaaaaaabfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaad
hcbabaaaaaaaaaaafpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaa
fpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaa
afaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacafaaaaaa
dgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaa
aaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaadkiacaaa
adaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaaakaabaaa
aaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaaaaaaaaaa
bkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaaegiacaaa
adaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaa
abeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaapgapbaaa
aaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaaabaaaaaa
egiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaabaaaaaa
kgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaaaaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaaacaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaabkbabaaa
aeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
alaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
aiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
ajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaa
akaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaaaeaaaaaa
eeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaaaeaaaaaa
egacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaadcaaaaaj
hcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaaacaaaaaa
diaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaah
fcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaafecaabaaa
aaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaaaaaaaaaa
egacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaa
aaaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaa
baaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaaakaaaaaa
dcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaa
alaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaa
adaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaa
aiaaaaaaogikcaaaaaaaaaaaaiaaaaaabaaaaaahbcaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaabaaaaaai
icaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
ecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
icaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialpaaaaaaai
pcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaadcaaaaaj
pcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaaabaaaaaa
baaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaf
icaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
aaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaaabaaaaaa
jgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaacgajbaaa
acaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaacaaaaaa
aaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaa
adaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaa
pgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaaacaaaaaa
egacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaaheccabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaaacaaaaaaegacbaaaacaaaaaa
egacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaaabaaaaaaaeaaaaaa
egiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
baaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaa
beaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaahbccabaaaadaaaaaaegacbaaa
acaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaaadaaaaaaegacbaaaabaaaaaa
egacbaaaaaaaaaaabaaaaaahcccabaaaadaaaaaaegacbaaaadaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_9;
  mediump vec3 lightDir_10;
  lightDir_10 = lightDir_2;
  lowp vec4 c_11;
  lowp float backContrib_12;
  mediump float tmpvar_13;
  tmpvar_13 = dot (tmpvar_6, lightDir_10);
  mediump float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_8, -(lightDir_10)), 0.0, 1.0);
  backContrib_12 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = clamp (-(tmpvar_13), 0.0, 1.0);
  lowp float tmpvar_16;
  tmpvar_16 = mix (tmpvar_15, backContrib_12, _TranslucencyViewDependency);
  backContrib_12 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_4 * ((tmpvar_17 * 2.0) + max (0.0, ((tmpvar_13 * 0.6) + 0.4))));
  c_11.xyz = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((c_11.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_10 + tmpvar_8)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_11.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (c_11.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_11.xyz = tmpvar_20;
  tmpvar_9 = c_11;
  c_1.xyz = tmpvar_9.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES


#ifdef VERTEX

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}



#endif
#ifdef FRAGMENT

varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2);
  mediump vec4 tmpvar_9;
  mediump vec3 lightDir_10;
  lightDir_10 = lightDir_2;
  lowp vec4 c_11;
  lowp float backContrib_12;
  mediump float tmpvar_13;
  tmpvar_13 = dot (normal_6, lightDir_10);
  mediump float tmpvar_14;
  tmpvar_14 = clamp (dot (tmpvar_8, -(lightDir_10)), 0.0, 1.0);
  backContrib_12 = tmpvar_14;
  mediump float tmpvar_15;
  tmpvar_15 = clamp (-(tmpvar_13), 0.0, 1.0);
  lowp float tmpvar_16;
  tmpvar_16 = mix (tmpvar_15, backContrib_12, _TranslucencyViewDependency);
  backContrib_12 = tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_16 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_4 * ((tmpvar_17 * 2.0) + max (0.0, ((tmpvar_13 * 0.6) + 0.4))));
  c_11.xyz = tmpvar_18;
  mediump vec3 tmpvar_19;
  tmpvar_19 = ((c_11.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_10 + tmpvar_8)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_11.xyz = tmpvar_19;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (c_11.xyz * mix (2.0, 2.0, _ShadowStrength));
  c_11.xyz = tmpvar_20;
  tmpvar_9 = c_11;
  c_1.xyz = tmpvar_9.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 648
uniform highp vec4 _MainTex_ST;
#line 664
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 649
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 652
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 656
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 660
    o.viewDir = viewDirForLight;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 648
uniform highp vec4 _MainTex_ST;
#line 664
uniform lowp float _Cutoff;
#line 596
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 600
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 604
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 608
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 665
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 668
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 672
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 676
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), 1.0);
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 94 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MOV R0.w, c[0].y;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R2.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.x, R2, c[26];
ADD R0.x, R0, c[26].w;
MUL R0.xyz, R0.x, c[26];
ADD R2.xyz, -R0, R2;
MAD R0.xyz, R0, c[27].x, R2;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].w, R3, c[20];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 94 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 99 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.w, r3, c19
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedaoohcfgdmpmmdgapmgibkmackfofgmfbabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapaaaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadpccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaa
aeaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaeaaaaaa
egiocaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_10 = texture2D (_LightTexture0, P_11);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12));
  mediump vec4 tmpvar_14;
  mediump vec3 lightDir_15;
  lightDir_15 = lightDir_2;
  mediump float atten_16;
  atten_16 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_10.w) * tmpvar_13.w);
  lowp vec4 c_17;
  lowp float backContrib_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (tmpvar_6, lightDir_15);
  mediump float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_9, -(lightDir_15)), 0.0, 1.0);
  backContrib_18 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp (-(tmpvar_19), 0.0, 1.0);
  lowp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_21, backContrib_18, _TranslucencyViewDependency);
  backContrib_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_4 * ((tmpvar_23 * 2.0) + max (0.0, ((tmpvar_19 * 0.6) + 0.4))));
  c_17.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((c_17.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_15 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_17.xyz = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_17.xyz * (2.0 * atten_16));
  c_17.xyz = tmpvar_26;
  tmpvar_14 = c_17;
  c_1.xyz = tmpvar_14.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22));
}



#endif
#ifdef FRAGMENT

varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_10 = texture2D (_LightTexture0, P_11);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12));
  mediump vec4 tmpvar_14;
  mediump vec3 lightDir_15;
  lightDir_15 = lightDir_2;
  mediump float atten_16;
  atten_16 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_10.w) * tmpvar_13.w);
  lowp vec4 c_17;
  lowp float backContrib_18;
  mediump float tmpvar_19;
  tmpvar_19 = dot (normal_6, lightDir_15);
  mediump float tmpvar_20;
  tmpvar_20 = clamp (dot (tmpvar_9, -(lightDir_15)), 0.0, 1.0);
  backContrib_18 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = clamp (-(tmpvar_19), 0.0, 1.0);
  lowp float tmpvar_22;
  tmpvar_22 = mix (tmpvar_21, backContrib_18, _TranslucencyViewDependency);
  backContrib_18 = tmpvar_22;
  lowp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_22 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_4 * ((tmpvar_23 * 2.0) + max (0.0, ((tmpvar_19 * 0.6) + 0.4))));
  c_17.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = ((c_17.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_15 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_17.xyz = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = (c_17.xyz * (2.0 * atten_16));
  c_17.xyz = tmpvar_26;
  tmpvar_14 = c_17;
  c_1.xyz = tmpvar_14.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 596
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 629
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 651
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 402
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 406
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 410
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 414
uniform highp vec4 _TreeBillboardDistances;
#line 432
#line 480
#line 498
#line 512
#line 524
uniform highp vec4 _Wind;
#line 592
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 607
#line 623
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 627
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 638
#line 660
uniform highp vec4 _MainTex_ST;
#line 677
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 534
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 536
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 538
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 540
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 542
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 544
    return SmoothCurve( TriangleWave( x));
}
#line 546
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 548
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 552
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 556
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 560
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 525
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 528
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 532
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 498
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 502
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 572
void TreeVertLeaf( inout appdata_full v ) {
    #line 574
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 578
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 661
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 664
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 668
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 672
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 596
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 629
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 651
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec4 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
#line 398
#line 402
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 406
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 410
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 414
uniform highp vec4 _TreeBillboardDistances;
#line 432
#line 480
#line 498
#line 512
#line 524
uniform highp vec4 _Wind;
#line 592
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 607
#line 623
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 627
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 638
#line 660
uniform highp vec4 _MainTex_ST;
#line 677
uniform lowp float _Cutoff;
#line 607
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 611
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 615
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 619
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 398
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 394
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 638
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 642
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 646
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 678
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 681
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 685
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 689
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 93 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
TEMP R6;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.x, -R1, c[0].y;
MAD R0.xyz, R0, R4.x, vertex.position;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
ADD R4.zw, R1.xyxz, R1.xyyw;
MAD R2.xyz, R0.w, R3, -vertex.normal;
MAD R1.xyz, R4.x, R2, vertex.normal;
MUL R2.xyz, R4.w, c[28];
MUL R3.xyz, vertex.texcoord[1].y, R2;
MUL R5.xy, vertex.color.y, R1.xzzw;
MUL R2.xz, R5.xyyw, c[31].z;
MUL R2.y, vertex.texcoord[1], c[31];
MAD R2.xyz, R4.zwzw, R2, R3;
MAD R0.xyz, R2, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R2.xyz, R0.w, c[26];
ADD R0.xyz, -R2, R0;
MAD R0.xyz, R2, c[27].x, R0;
MOV R0.w, c[0].y;
MUL R2, vertex.attrib[14].y, c[6];
MAD R2, vertex.attrib[14].x, c[5], R2;
MAD R2, vertex.attrib[14].z, c[7], R2;
ADD R2, R2, c[0].x;
DP4 R1.w, R2, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R2;
DP3 R1.w, R1, R1;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.x, R2, vertex.attrib[14];
DP4 R3.z, R0, c[11];
DP4 R3.y, R0, c[10];
DP4 R3.x, R0, c[9];
DP4 R3.w, R0, c[12];
DP4 result.texcoord[3].z, R3, c[19];
DP4 result.texcoord[3].y, R3, c[18];
DP4 result.texcoord[3].x, R3, c[17];
DP3 R3.x, R2, R2;
RSQ R3.x, R3.x;
MUL R3.xyz, R3.x, R2;
RSQ R1.w, R1.w;
MUL R2.xyz, R1.w, R1;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MOV R1.w, c[0].y;
MOV R1.xyz, c[22];
DP4 R5.z, R1, c[15];
DP4 R5.x, R1, c[13];
DP4 R5.y, R1, c[14];
MOV R1, c[23];
MAD R5.xyz, R5, c[24].w, -R0;
MUL R4.xyz, R4, R2.w;
DP4 R6.z, R1, c[15];
DP4 R6.x, R1, c[13];
DP4 R6.y, R1, c[14];
MAD R1.xyz, R6, c[24].w, -R0;
DP3 result.texcoord[1].y, R1, R4;
DP3 result.texcoord[2].y, R4, R5;
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
DP3 result.texcoord[1].z, R2, R1;
DP3 result.texcoord[1].x, R1, R3;
DP3 result.texcoord[2].z, R2, R5;
DP3 result.texcoord[2].x, R3, R5;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 93 instructions, 7 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 98 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.x, -r0.w, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
mad r0.xyz, r0, r4.x, v0
mad r2, v2.z, c6, r2
add r3, r2, c29.x
dp4 r1.w, r3, r3
mul r1.xyz, r0, c24
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r1, r0.x
add r0.xy, r0, c20.y
mul r0, r0.xxyy, c30
frc r0, r0
mad r0, r0, c29.z, c29.w
frc r0, r0
mad r0, r0, c31.x, c31.y
abs r0, r0
mul r2, r0, r0
mad r0, -r0, c31.x, c31.z
mul r0, r2, r0
rsq r1.w, r1.w
mad r2.xyz, r1.w, r3, -v2
add r4.zw, r0.xyxz, r0.xyyw
mad r0.xyz, r4.x, r2, v2
mul r2.xyz, r4.w, c27
mul r3.xyz, v4.y, r2
mul r5.xy, v5.y, r0.xzzw
mov r1.w, c29.y
mul r2.xz, r5.xyyw, c32.x
mul r2.y, v4, c31.w
mad r2.xyz, r4.zwzw, r2, r3
mad r1.xyz, r2, c27.w, r1
mad r2.xyz, v4.x, c27, r1
dp3 r0.w, r2, c25
add r0.w, r0, c25
mul r1.xyz, r0.w, c25
add r2.xyz, -r1, r2
mad r1.xyz, r1, c26.x, r2
mul r2, v1.y, c5
mad r2, v1.x, c4, r2
mad r2, v1.z, c6, r2
add r2, r2, c29.x
dp4 r0.w, r2, r2
rsq r0.w, r0.w
mul r2.xyz, r0.w, r2
dp3 r0.w, r0, r0
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.x, r2, v1
dp4 r3.z, r1, c10
dp4 r3.y, r1, c9
dp4 r3.x, r1, c8
dp4 r3.w, r1, c11
dp4 o4.z, r3, c18
dp4 o4.y, r3, c17
dp4 o4.x, r3, c16
dp3 r3.x, r2, r2
rsq r3.x, r3.x
mul r4.xyz, r3.x, r2
rsq r0.w, r0.w
mul r3.xyz, r0.w, r0
mul r2.xyz, r3.zxyw, r4.yzxw
mov r0.w, c29.y
mov r0.xyz, c21
dp4 r5.z, r0, c14
dp4 r5.x, r0, c12
dp4 r5.y, r0, c13
mad r6.xyz, r5, c23.w, -r1
mad r2.xyz, r3.yzxw, r4.zxyw, -r2
mul r5.xyz, r2, r2.w
mov r0, c14
dp4 r7.z, c22, r0
mov r0, c13
mov r2, c12
dp4 r7.x, c22, r2
dp4 r7.y, c22, r0
mad r0.xyz, r7, c23.w, -r1
dp3 o2.y, r0, r5
dp3 o3.y, r5, r6
dp4 o0.w, r1, c3
dp4 o0.z, r1, c2
dp4 o0.y, r1, c1
dp4 o0.x, r1, c0
dp3 o2.z, r3, r0
dp3 o2.x, r0, r4
dp3 o3.z, r3, r6
dp3 o3.x, r4, r6
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 94 instructions, 5 temp regs, 0 temp arrays:
// ALU 88 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhofconmjhdhgmpopbaabhejoheahimokabaaaaaakaaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcaeanaaaaeaaaabaa
ebadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadhccabaaa
acaaaaaagfaaaaadhccabaaaadaaaaaagfaaaaadhccabaaaaeaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaaadaaaaaaegiacaaa
aaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaahbcaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaaabaaaaaaakaabaaa
abaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaaegacbaaaaeaaaaaa
baaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaalaaaaaa
baaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaaiaaaaaa
baaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaajaaaaaa
baaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaaadaaaaaaakaaaaaa
bbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaaacaaaaaaeeaaaaaf
icaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaa
abaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaialp
aaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaiaebaaaaaaabaaaaaa
dcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaaacaaaaaaegbobaaa
abaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaa
eeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaahhcaabaaaacaaaaaa
pgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaaadaaaaaacgajbaaa
abaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaajgaebaaaabaaaaaa
cgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaaaeaaaaaafgifcaaa
acaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
dcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaaacaaaaaa
aaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaa
bdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaa
aeaaaaaaegacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaa
aaaaaaaabaaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaa
baaaaaaheccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaah
bccabaaaacaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaabaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaaeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaeaaaaaa
egacbaaaaeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaa
baaaaaahbccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaadaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahcccabaaa
adaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaadiaaaaaipcaabaaaabaaaaaa
fgafbaaaaaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaa
egiocaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaak
pcaabaaaaaaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaa
abaaaaaaaaaaaaaipcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaa
apaaaaaadiaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaaaaaaaaa
aeaaaaaadcaaaaakhcaabaaaabaaaaaaegiccaaaaaaaaaaaadaaaaaaagaabaaa
aaaaaaaaegacbaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaaaaaaaaa
afaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaadcaaaaakhccabaaaaeaaaaaa
egiccaaaaaaaaaaaagaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(tmpvar_10));
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_13;
  mediump vec3 lightDir_14;
  lightDir_14 = lightDir_2;
  mediump float atten_15;
  atten_15 = (tmpvar_11.w * tmpvar_12.w);
  lowp vec4 c_16;
  lowp float backContrib_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (tmpvar_6, lightDir_14);
  mediump float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_9, -(lightDir_14)), 0.0, 1.0);
  backContrib_17 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp (-(tmpvar_18), 0.0, 1.0);
  lowp float tmpvar_21;
  tmpvar_21 = mix (tmpvar_20, backContrib_17, _TranslucencyViewDependency);
  backContrib_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_4 * ((tmpvar_22 * 2.0) + max (0.0, ((tmpvar_18 * 0.6) + 0.4))));
  c_16.xyz = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((c_16.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_14 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_16.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_16.xyz * (2.0 * atten_15));
  c_16.xyz = tmpvar_25;
  tmpvar_13 = c_16;
  c_1.xyz = tmpvar_13.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xyz;
}



#endif
#ifdef FRAGMENT

varying highp vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD1);
  lightDir_2 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(xlv_TEXCOORD2);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_LightTextureB0, vec2(tmpvar_10));
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_13;
  mediump vec3 lightDir_14;
  lightDir_14 = lightDir_2;
  mediump float atten_15;
  atten_15 = (tmpvar_11.w * tmpvar_12.w);
  lowp vec4 c_16;
  lowp float backContrib_17;
  mediump float tmpvar_18;
  tmpvar_18 = dot (normal_6, lightDir_14);
  mediump float tmpvar_19;
  tmpvar_19 = clamp (dot (tmpvar_9, -(lightDir_14)), 0.0, 1.0);
  backContrib_17 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = clamp (-(tmpvar_18), 0.0, 1.0);
  lowp float tmpvar_21;
  tmpvar_21 = mix (tmpvar_20, backContrib_17, _TranslucencyViewDependency);
  backContrib_17 = tmpvar_21;
  lowp vec3 tmpvar_22;
  tmpvar_22 = ((tmpvar_21 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_23;
  tmpvar_23 = (tmpvar_4 * ((tmpvar_22 * 2.0) + max (0.0, ((tmpvar_18 * 0.6) + 0.4))));
  c_16.xyz = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = ((c_16.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_14 + tmpvar_9)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_16.xyz = tmpvar_24;
  mediump vec3 tmpvar_25;
  tmpvar_25 = (c_16.xyz * (2.0 * atten_15));
  c_16.xyz = tmpvar_25;
  tmpvar_13 = c_16;
  c_1.xyz = tmpvar_13.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 588
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 643
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
#line 397
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
#line 401
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
#line 405
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 424
#line 472
#line 490
#line 504
#line 516
uniform highp vec4 _Wind;
#line 584
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 599
#line 615
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 619
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 630
#line 652
uniform highp vec4 _MainTex_ST;
#line 669
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 526
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 528
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 530
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 532
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 534
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 536
    return SmoothCurve( TriangleWave( x));
}
#line 538
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 540
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 544
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 548
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 552
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 517
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 520
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 524
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 490
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 494
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 564
void TreeVertLeaf( inout appdata_full v ) {
    #line 566
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 570
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 653
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 656
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 660
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 664
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 588
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 621
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 643
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec3 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform sampler2D _LightTextureB0;
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
#line 397
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
#line 401
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
#line 405
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 424
#line 472
#line 490
#line 504
#line 516
uniform highp vec4 _Wind;
#line 584
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 599
#line 615
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 619
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 630
#line 652
uniform highp vec4 _MainTex_ST;
#line 669
uniform lowp float _Cutoff;
#line 599
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 603
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 607
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 611
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= (2.0 * atten);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 630
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 634
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 638
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 670
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 673
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 677
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 681
    lowp vec3 lightDir = normalize(IN.lightDir);
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 21 [_Time]
Vector 22 [_WorldSpaceCameraPos]
Vector 23 [_WorldSpaceLightPos0]
Matrix 9 [_Object2World]
Matrix 13 [_World2Object]
Vector 24 [unity_Scale]
Matrix 17 [_LightMatrix0]
Vector 25 [_Scale]
Vector 26 [_SquashPlaneNormal]
Float 27 [_SquashAmount]
Vector 28 [_Wind]
Vector 29 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 91 ALU
PARAM c[32] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..29],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1, -1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEMP R4;
TEMP R5;
MUL R0, vertex.normal.y, c[6];
MAD R2, vertex.normal.x, c[5], R0;
ADD R0.xyz, R2, c[0].x;
ABS R1.x, vertex.attrib[14].w;
ADD R4.w, -R1.x, c[0].y;
MAD R2, vertex.normal.z, c[7], R2;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
ADD R0.w, vertex.color.x, R0;
MAD R0.xyz, R0, R4.w, vertex.position;
ADD R3, R2, c[0].x;
MUL R0.xyz, R0, c[25];
ADD R1.x, vertex.color.y, R0.w;
MOV R1.y, R0.w;
DP4 R0.w, R3, R3;
DP3 R1.x, R0, R1.x;
ADD R1.xy, R1, c[21].y;
MUL R1, R1.xxyy, c[30];
FRC R1, R1;
MAD R1, R1, c[0].z, c[0].w;
FRC R1, R1;
MAD R1, R1, c[0].z, -c[0].y;
ABS R1, R1;
MUL R2, -R1, c[0].z;
ADD R2, R2, c[31].x;
MUL R1, R1, R1;
MUL R1, R1, R2;
RSQ R0.w, R0.w;
MAD R2.xyz, R0.w, R3, -vertex.normal;
ADD R3.xy, R1.xzzw, R1.ywzw;
MAD R4.xyz, R4.w, R2, vertex.normal;
MUL R1.xyz, R3.y, c[28];
MUL R2.xyz, vertex.texcoord[1].y, R1;
MUL R3.zw, vertex.color.y, R4.xyxz;
MOV R1.w, c[0].y;
MUL R1.xz, R3.zyww, c[31].z;
MUL R1.y, vertex.texcoord[1], c[31];
MAD R1.xyz, R3.xyxw, R1, R2;
DP3 R3.x, R4, R4;
MAD R0.xyz, R1, c[28].w, R0;
MAD R0.xyz, vertex.texcoord[1].x, c[28], R0;
DP3 R0.w, R0, c[26];
ADD R0.w, R0, c[26];
MUL R1.xyz, R0.w, c[26];
ADD R2.xyz, -R1, R0;
MAD R1.xyz, R1, c[27].x, R2;
MUL R0, vertex.attrib[14].y, c[6];
MAD R0, vertex.attrib[14].x, c[5], R0;
MAD R2, vertex.attrib[14].z, c[7], R0;
ADD R2, R2, c[0].x;
DP4 R0.x, R2, R2;
RSQ R0.x, R0.x;
MUL R2.xyz, R0.x, R2;
MOV R2.w, c[31];
ADD R2, -vertex.attrib[14], R2;
MAD R2, R4.w, R2, vertex.attrib[14];
DP3 R3.y, R2, R2;
DP4 R0.w, R1, c[12];
DP4 R0.z, R1, c[11];
DP4 R0.y, R1, c[10];
DP4 R0.x, R1, c[9];
DP4 result.texcoord[3].y, R0, c[18];
DP4 result.texcoord[3].x, R0, c[17];
MOV R0.xyz, c[22];
MOV R0.w, c[0].y;
RSQ R3.w, R3.x;
RSQ R3.y, R3.y;
MUL R3.xyz, R3.y, R2;
MUL R2.xyz, R3.w, R4;
MUL R4.xyz, R2.zxyw, R3.yzxw;
MAD R4.xyz, R2.yzxw, R3.zxyw, -R4;
MUL R4.xyz, R4, R2.w;
DP4 R5.z, R0, c[15];
DP4 R5.x, R0, c[13];
DP4 R5.y, R0, c[14];
MAD R0.xyz, R5, c[24].w, -R1;
DP3 result.texcoord[2].y, R4, R0;
DP3 result.texcoord[2].z, R2, R0;
DP3 result.texcoord[2].x, R3, R0;
DP4 result.position.w, R1, c[4];
DP4 result.position.z, R1, c[3];
DP4 result.position.y, R1, c[2];
DP4 result.position.x, R1, c[1];
MOV R1, c[23];
DP4 R0.z, R1, c[15];
DP4 R0.x, R1, c[13];
DP4 R0.y, R1, c[14];
DP3 result.texcoord[1].y, R0, R4;
DP3 result.texcoord[1].z, R2, R0;
DP3 result.texcoord[1].x, R0, R3;
MAD result.texcoord[0].xy, vertex.texcoord[0], c[29], c[29].zwzw;
END
# 91 instructions, 6 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 20 [_Time]
Vector 21 [_WorldSpaceCameraPos]
Vector 22 [_WorldSpaceLightPos0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 23 [unity_Scale]
Matrix 16 [_LightMatrix0]
Vector 24 [_Scale]
Vector 25 [_SquashPlaneNormal]
Float 26 [_SquashAmount]
Vector 27 [_Wind]
Vector 28 [_MainTex_ST]
"vs_3_0
; 96 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
def c29, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c30, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c31, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c32, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r2, v2.x, c4, r0
add r0.xyz, r2, c29.x
abs r0.w, v1
add r4.w, -r0, c29.y
mov r1.xyz, c11
dp3 r0.w, c29.y, r1
add r0.w, v5.x, r0
mad r2, v2.z, c6, r2
mad r0.xyz, r0, r4.w, v0
add r3, r2, c29.x
mul r0.xyz, r0, c24
add r1.x, v5.y, r0.w
mov r1.y, r0.w
dp4 r0.w, r3, r3
dp3 r1.x, r0, r1.x
add r1.xy, r1, c20.y
mul r1, r1.xxyy, c30
frc r1, r1
mad r1, r1, c29.z, c29.w
frc r1, r1
mad r1, r1, c31.x, c31.y
abs r1, r1
mul r2, r1, r1
mad r1, -r1, c31.x, c31.z
mul r1, r2, r1
rsq r0.w, r0.w
mad r2.xyz, r0.w, r3, -v2
add r3.xy, r1.xzzw, r1.ywzw
mad r4.xyz, r4.w, r2, v2
mul r1.xyz, r3.y, c27
mul r2.xyz, v4.y, r1
mul r3.zw, v5.y, r4.xyxz
mov r0.w, c29.y
mul r1.xz, r3.zyww, c32.x
mul r1.y, v4, c31.w
mad r1.xyz, r3.xyxw, r1, r2
mad r0.xyz, r1, c27.w, r0
mad r1.xyz, v4.x, c27, r0
dp3 r3.x, r4, r4
dp3 r0.x, r1, c25
add r0.x, r0, c25.w
mul r0.xyz, r0.x, c25
add r2.xyz, -r0, r1
mad r0.xyz, r0, c26.x, r2
mul r1, v1.y, c5
mad r1, v1.x, c4, r1
mad r2, v1.z, c6, r1
add r2, r2, c29.x
dp4 r1.x, r2, r2
rsq r1.x, r1.x
mul r2.xyz, r1.x, r2
mov r2.w, c31.y
add r2, -v1, r2
mad r2, r4.w, r2, v1
dp3 r3.y, r2, r2
dp4 r1.w, r0, c11
dp4 r1.z, r0, c10
dp4 r1.y, r0, c9
dp4 r1.x, r0, c8
dp4 o4.y, r1, c17
dp4 o4.x, r1, c16
mov r1.w, c29.y
mov r1.xyz, c21
dp4 r5.z, r1, c14
dp4 r5.x, r1, c12
dp4 r5.y, r1, c13
mad r1.xyz, r5, c23.w, -r0
rsq r3.w, r3.x
rsq r3.y, r3.y
mul r3.xyz, r3.y, r2
mul r2.xyz, r3.w, r4
mul r4.xyz, r2.zxyw, r3.yzxw
mad r4.xyz, r2.yzxw, r3.zxyw, -r4
mul r4.xyz, r4, r2.w
dp3 o3.y, r4, r1
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mov r0, c14
dp4 r5.z, c22, r0
mov r0, c13
dp4 r5.y, c22, r0
dp3 o3.z, r2, r1
dp3 o3.x, r3, r1
mov r1, c12
dp4 r5.x, c22, r1
dp3 o2.y, r5, r4
dp3 o2.z, r2, r5
dp3 o2.x, r5, r3
mad o1.xy, v3, c28, c28.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 224 // 208 used size, 13 vars
Matrix 48 [_LightMatrix0] 4
Vector 112 [_Wind] 4
Vector 192 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 0 [_Time] 4
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityLighting" 720 // 16 used size, 17 vars
Vector 0 [_WorldSpaceLightPos0] 4
ConstBuffer "UnityPerDraw" 336 // 336 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
Matrix 256 [_World2Object] 4
Vector 320 [unity_Scale] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 93 instructions, 5 temp regs, 0 temp arrays:
// ALU 87 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedgckghcgpnnkalnnecafeiihmneiaflbpabaaaaaaheaoaaaaadaaaaaa
cmaaaaaapeaaaaaajeabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapapaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheojiaaaaaaafaaaaaa
aiaaaaaaiaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaaimaaaaaaadaaaaaaaaaaaaaa
adaaaaaaabaaaaaaamadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahaiaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahaiaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklfdeieefcniamaaaaeaaaabaa
dgadaaaafjaaaaaeegiocaaaaaaaaaaaanaaaaaafjaaaaaeegiocaaaabaaaaaa
afaaaaaafjaaaaaeegiocaaaacaaaaaaabaaaaaafjaaaaaeegiocaaaadaaaaaa
bfaaaaaafjaaaaaeegiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaa
fpaaaaadpcbabaaaabaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaa
adaaaaaafpaaaaaddcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaae
pccabaaaaaaaaaaaabaaaaaagfaaaaaddccabaaaabaaaaaagfaaaaadmccabaaa
abaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaac
afaaaaaadgaaaaagbcaabaaaaaaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaaaaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaaaaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaaaaaaaaa
akaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahecaabaaaaaaaaaaabkaabaaa
aaaaaaaabkbabaaaafaaaaaaapaaaaaibcaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaabaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaaaaaaaaaiicaabaaaaaaaaaaadkbabaiambaaaaaa
abaaaaaaabeaaaaaaaaaiadpdcaaaaajhcaabaaaabaaaaaaegacbaaaabaaaaaa
pgapbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaabaaaaaaegacbaaa
abaaaaaaegiccaaaaeaaaaaaafaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
abaaaaaakgakbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaaaaaaaaa
fgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaa
aceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaa
egaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalp
aaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaa
egaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaa
acaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaa
acaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaaaaaaaaa
ngafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
aaaaaaaaegiccaaaaaaaaaaaahaaaaaadiaaaaahhcaabaaaacaaaaaaegacbaaa
acaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaadaaaaaabkaabaaaaaaaaaaa
bkbabaaaaeaaaaaabaaaaaaiicaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaaeaaaaaaegbcbaaaacaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaeaaaaaaegaobaaa
aeaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaakhcaabaaa
aeaaaaaaegacbaaaaeaaaaaafgafbaaaaaaaaaaaegbcbaiaebaaaaaaacaaaaaa
dcaaaaajhcaabaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaaaeaaaaaaegbcbaaa
acaaaaaadiaaaaahccaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdn
diaaaaahfcaabaaaadaaaaaaagacbaaaaeaaaaaafgafbaaaaaaaaaaadgaaaaaf
ecaabaaaaaaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaaaaaaaaaaigaabaaa
aaaaaaaaegacbaaaadaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaaaaaaaaa
egacbaaaaaaaaaaapgipcaaaaaaaaaaaahaaaaaaegacbaaaabaaaaaadcaaaaak
hcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaaahaaaaaaegacbaaa
aaaaaaaabaaaaaaibcaabaaaabaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaaakaabaaaabaaaaaadkiacaaaaeaaaaaa
akaaaaaadcaaaaalhcaabaaaabaaaaaaagaabaiaebaaaaaaabaaaaaaegiccaaa
aeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaa
aeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaa
abaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaa
egaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaa
adaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaa
adaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaamaaaaaa
agaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipcaabaaa
abaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaadiaaaaaidcaabaaa
acaaaaaafgafbaaaabaaaaaaegiacaaaaaaaaaaaaeaaaaaadcaaaaakdcaabaaa
abaaaaaaegiacaaaaaaaaaaaadaaaaaaagaabaaaabaaaaaaegaabaaaacaaaaaa
dcaaaaakdcaabaaaabaaaaaaegiacaaaaaaaaaaaafaaaaaakgakbaaaabaaaaaa
egaabaaaabaaaaaadcaaaaakmccabaaaabaaaaaaagiecaaaaaaaaaaaagaaaaaa
pgapbaaaabaaaaaaagaebaaaabaaaaaadcaaaaaldccabaaaabaaaaaaegbabaaa
adaaaaaaegiacaaaaaaaaaaaamaaaaaaogikcaaaaaaaaaaaamaaaaaabaaaaaah
bcaabaaaabaaaaaaegacbaaaaeaaaaaaegacbaaaaeaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egacbaaaaeaaaaaabaaaaaaiicaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaalaaaaaabaaaaaaibcaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaaiaaaaaabaaaaaaiccaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaajaaaaaabaaaaaaiecaabaaaacaaaaaaegbcbaaaabaaaaaaegiccaaa
adaaaaaaakaaaaaabbaaaaahicaabaaaabaaaaaaegaobaaaacaaaaaaegaobaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaa
acaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaa
abeaaaaaaaaaialpaaaaaaaipcaabaaaacaaaaaaegaobaaaacaaaaaaegbobaia
ebaaaaaaabaaaaaadcaaaaajpcaabaaaacaaaaaapgapbaaaaaaaaaaaegaobaaa
acaaaaaaegbobaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegacbaaaacaaaaaa
egacbaaaacaaaaaaeeaaaaaficaabaaaaaaaaaaadkaabaaaaaaaaaaadiaaaaah
hcaabaaaacaaaaaapgapbaaaaaaaaaaaegacbaaaacaaaaaadiaaaaahhcaabaaa
adaaaaaacgajbaaaabaaaaaajgaebaaaacaaaaaadcaaaaakhcaabaaaadaaaaaa
jgaebaaaabaaaaaacgajbaaaacaaaaaaegacbaiaebaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaaadaaaaaadiaaaaajhcaabaaa
aeaaaaaafgifcaaaacaaaaaaaaaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaal
hcaabaaaaeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaacaaaaaaaaaaaaaa
egacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaa
kgikcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaadcaaaaalhcaabaaaaeaaaaaa
egiccaaaadaaaaaabdaaaaaapgipcaaaacaaaaaaaaaaaaaaegacbaaaaeaaaaaa
baaaaaahcccabaaaacaaaaaaegacbaaaadaaaaaaegacbaaaaeaaaaaabaaaaaah
eccabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaaeaaaaaabaaaaaahbccabaaa
acaaaaaaegacbaaaacaaaaaaegacbaaaaeaaaaaadiaaaaajhcaabaaaaeaaaaaa
fgifcaaaabaaaaaaaeaaaaaaegiccaaaadaaaaaabbaaaaaadcaaaaalhcaabaaa
aeaaaaaaegiccaaaadaaaaaabaaaaaaaagiacaaaabaaaaaaaeaaaaaaegacbaaa
aeaaaaaadcaaaaalhcaabaaaaeaaaaaaegiccaaaadaaaaaabcaaaaaakgikcaaa
abaaaaaaaeaaaaaaegacbaaaaeaaaaaaaaaaaaaihcaabaaaaeaaaaaaegacbaaa
aeaaaaaaegiccaaaadaaaaaabdaaaaaadcaaaaalhcaabaaaaaaaaaaaegacbaaa
aeaaaaaapgipcaaaadaaaaaabeaaaaaaegacbaiaebaaaaaaaaaaaaaabaaaaaah
bccabaaaadaaaaaaegacbaaaacaaaaaaegacbaaaaaaaaaaabaaaaaaheccabaaa
adaaaaaaegacbaaaabaaaaaaegacbaaaaaaaaaaabaaaaaahcccabaaaadaaaaaa
egacbaaaadaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((texture2D (_BumpMap, xlv_TEXCOORD0).xyz * 2.0) - 1.0);
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_10;
  mediump vec3 lightDir_11;
  lightDir_11 = lightDir_2;
  mediump float atten_12;
  atten_12 = tmpvar_9.w;
  lowp vec4 c_13;
  lowp float backContrib_14;
  mediump float tmpvar_15;
  tmpvar_15 = dot (tmpvar_6, lightDir_11);
  mediump float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_8, -(lightDir_11)), 0.0, 1.0);
  backContrib_14 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = clamp (-(tmpvar_15), 0.0, 1.0);
  lowp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_17, backContrib_14, _TranslucencyViewDependency);
  backContrib_14 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_4 * ((tmpvar_19 * 2.0) + max (0.0, ((tmpvar_15 * 0.6) + 0.4))));
  c_13.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((c_13.xyz + (pow (max (0.0, dot (tmpvar_6, normalize((lightDir_11 + tmpvar_8)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_13.xyz = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_13.xyz * mix (2.0, (atten_12 * 2.0), _ShadowStrength));
  c_13.xyz = tmpvar_22;
  tmpvar_10 = c_13;
  c_1.xyz = tmpvar_10.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp float tmpvar_5;
  tmpvar_5 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = _glesNormal;
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = _glesTANGENT.xyz;
  highp vec4 tmpvar_8;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = _glesNormal.xy;
  highp vec4 tmpvar_9;
  tmpvar_9 = (_glesVertex + ((tmpvar_8 * glstate_matrix_invtrans_modelview0) * tmpvar_5));
  highp vec3 tmpvar_10;
  tmpvar_10 = mix (_glesNormal, normalize((tmpvar_6 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_5));
  highp vec4 tmpvar_11;
  tmpvar_11.w = -1.0;
  tmpvar_11.xyz = normalize((tmpvar_7 * glstate_matrix_invtrans_modelview0)).xyz;
  highp vec4 tmpvar_12;
  tmpvar_12 = mix (_glesTANGENT, tmpvar_11, vec4(tmpvar_5));
  tmpvar_3.w = tmpvar_9.w;
  tmpvar_4.w = tmpvar_12.w;
  tmpvar_3.xyz = (tmpvar_9.xyz * _Scale.xyz);
  highp vec4 pos_13;
  pos_13.w = tmpvar_3.w;
  highp vec3 bend_14;
  vec4 v_15;
  v_15.x = _Object2World[0].w;
  v_15.y = _Object2World[1].w;
  v_15.z = _Object2World[2].w;
  v_15.w = _Object2World[3].w;
  highp float tmpvar_16;
  tmpvar_16 = (dot (v_15.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_17;
  tmpvar_17.x = dot (tmpvar_3.xyz, vec3((_glesColor.y + tmpvar_16)));
  tmpvar_17.y = tmpvar_16;
  highp vec4 tmpvar_18;
  tmpvar_18 = abs(((fract((((fract(((_Time.yy + tmpvar_17).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * tmpvar_18) * (3.0 - (2.0 * tmpvar_18)));
  highp vec2 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xz + tmpvar_19.yw);
  bend_14.xz = ((_glesColor.y * 0.1) * tmpvar_10).xz;
  bend_14.y = (_glesMultiTexCoord1.y * 0.3);
  pos_13.xyz = (tmpvar_3.xyz + (((tmpvar_20.xyx * bend_14) + ((_Wind.xyz * tmpvar_20.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_13.xyz = (pos_13.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec3 tmpvar_21;
  tmpvar_21 = mix ((pos_13.xyz - ((dot (_SquashPlaneNormal.xyz, pos_13.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_13.xyz, vec3(_SquashAmount));
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_21;
  tmpvar_3 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(tmpvar_10);
  tmpvar_4.xyz = normalize(tmpvar_12.xyz);
  highp vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_24 = tmpvar_4.xyz;
  tmpvar_25 = (((tmpvar_23.yzx * tmpvar_4.zxy) - (tmpvar_23.zxy * tmpvar_4.yzx)) * tmpvar_12.w);
  highp mat3 tmpvar_26;
  tmpvar_26[0].x = tmpvar_24.x;
  tmpvar_26[0].y = tmpvar_25.x;
  tmpvar_26[0].z = tmpvar_23.x;
  tmpvar_26[1].x = tmpvar_24.y;
  tmpvar_26[1].y = tmpvar_25.y;
  tmpvar_26[1].z = tmpvar_23.y;
  tmpvar_26[2].x = tmpvar_24.z;
  tmpvar_26[2].y = tmpvar_25.z;
  tmpvar_26[2].z = tmpvar_23.z;
  highp vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_26 * (_World2Object * _WorldSpaceLightPos0).xyz);
  tmpvar_1 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_29;
  tmpvar_29 = (tmpvar_26 * (((_World2Object * tmpvar_28).xyz * unity_Scale.w) - tmpvar_21));
  tmpvar_2 = tmpvar_29;
  gl_Position = (glstate_matrix_mvp * tmpvar_22);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * tmpvar_22)).xy;
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform mediump float _Shininess;
uniform sampler2D _TranslucencyMap;
uniform sampler2D _GlossMap;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform mediump float _ShadowStrength;
uniform lowp float _TranslucencyViewDependency;
uniform lowp vec3 _TranslucencyColor;
uniform lowp vec4 _Color;
uniform sampler2D _LightTexture0;
uniform lowp vec4 _LightColor0;
void main ()
{
  lowp vec4 c_1;
  lowp vec3 lightDir_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = (tmpvar_3.xyz * _Color.xyz);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_GlossMap, xlv_TEXCOORD0);
  lowp vec3 normal_6;
  normal_6.xy = ((texture2D (_BumpMap, xlv_TEXCOORD0).wy * 2.0) - 1.0);
  normal_6.z = sqrt((1.0 - clamp (dot (normal_6.xy, normal_6.xy), 0.0, 1.0)));
  lowp float x_7;
  x_7 = (tmpvar_3.w - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  lightDir_2 = xlv_TEXCOORD1;
  mediump vec3 tmpvar_8;
  tmpvar_8 = normalize(xlv_TEXCOORD2);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, xlv_TEXCOORD3);
  mediump vec4 tmpvar_10;
  mediump vec3 lightDir_11;
  lightDir_11 = lightDir_2;
  mediump float atten_12;
  atten_12 = tmpvar_9.w;
  lowp vec4 c_13;
  lowp float backContrib_14;
  mediump float tmpvar_15;
  tmpvar_15 = dot (normal_6, lightDir_11);
  mediump float tmpvar_16;
  tmpvar_16 = clamp (dot (tmpvar_8, -(lightDir_11)), 0.0, 1.0);
  backContrib_14 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = clamp (-(tmpvar_15), 0.0, 1.0);
  lowp float tmpvar_18;
  tmpvar_18 = mix (tmpvar_17, backContrib_14, _TranslucencyViewDependency);
  backContrib_14 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((tmpvar_18 * texture2D (_TranslucencyMap, xlv_TEXCOORD0).x) * _TranslucencyColor);
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_4 * ((tmpvar_19 * 2.0) + max (0.0, ((tmpvar_15 * 0.6) + 0.4))));
  c_13.xyz = tmpvar_20;
  mediump vec3 tmpvar_21;
  tmpvar_21 = ((c_13.xyz + (pow (max (0.0, dot (normal_6, normalize((lightDir_11 + tmpvar_8)))), (_Shininess * 128.0)) * tmpvar_5.w)) * _LightColor0.xyz);
  c_13.xyz = tmpvar_21;
  mediump vec3 tmpvar_22;
  tmpvar_22 = (c_13.xyz * mix (2.0, (atten_12 * 2.0), _ShadowStrength));
  c_13.xyz = tmpvar_22;
  tmpvar_10 = c_13;
  c_1.xyz = tmpvar_10.xyz;
  c_1.w = tmpvar_3.w;
  gl_FragData[0] = c_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 642
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 629
#line 651
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 91
highp vec3 ObjSpaceViewDir( in highp vec4 v ) {
    highp vec3 objSpaceCameraPos = ((_World2Object * vec4( _WorldSpaceCameraPos.xyz, 1.0)).xyz * unity_Scale.w);
    return (objSpaceCameraPos - v.xyz);
}
#line 525
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 527
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 529
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 531
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 533
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 535
    return SmoothCurve( TriangleWave( x));
}
#line 537
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 539
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 543
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 547
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 551
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 516
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 519
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 523
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 489
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 493
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 563
void TreeVertLeaf( inout appdata_full v ) {
    #line 565
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 569
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 652
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 655
    TreeVertLeaf( v);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    #line 659
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    highp vec3 lightDir = (rotation * ObjSpaceLightDir( v.vertex));
    o.lightDir = lightDir;
    highp vec3 viewDirForLight = (rotation * ObjSpaceViewDir( v.vertex));
    #line 663
    o.viewDir = viewDirForLight;
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp vec2 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec2(xl_retval.pack0);
    xlv_TEXCOORD1 = vec3(xl_retval.lightDir);
    xlv_TEXCOORD2 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 587
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 642
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
    mediump vec3 lightDir;
    mediump vec3 viewDir;
    highp vec2 _LightCoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 393
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
#line 397
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
#line 401
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
#line 405
uniform highp vec4 _TreeBillboardDistances;
#line 423
#line 471
#line 489
#line 503
#line 515
uniform highp vec4 _Wind;
#line 583
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 598
#line 614
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 618
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 629
#line 651
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 598
mediump vec4 LightingTreeLeaf( in LeafSurfaceOutput s, in mediump vec3 lightDir, in mediump vec3 viewDir, in mediump float atten ) {
    mediump vec3 h = normalize((lightDir + viewDir));
    mediump float dotNL = dot( s.Normal, lightDir);
    #line 602
    mediump float dotNH = max( 0.0, dot( s.Normal, h));
    mediump float spec = (pow( dotNH, (s.Specular * 128.0)) * s.Gloss);
    lowp float backContrib = xll_saturate_f(dot( viewDir, (-lightDir)));
    backContrib = mix( xll_saturate_f((-dotNL)), backContrib, _TranslucencyViewDependency);
    #line 606
    lowp vec3 translucencyColor = ((backContrib * s.Translucency) * _TranslucencyColor);
    dotNL = max( 0.0, ((dotNL * 0.6) + 0.4));
    lowp vec4 c;
    c.xyz = (s.Albedo * ((translucencyColor * 2.0) + dotNL));
    #line 610
    c.xyz = ((c.xyz + spec) * _LightColor0.xyz);
    c.xyz *= mix( 2.0, (atten * 2.0), _ShadowStrength);
    return c;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 629
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 633
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 637
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    lowp vec3 lightDir = IN.lightDir;
    lowp vec4 c = LightingTreeLeaf( o, lightDir, normalize(IN.viewDir), (texture( _LightTexture0, IN._LightCoord).w * 1.0));
    c.w = o.Alpha;
    return c;
}
in highp vec2 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD0);
    xlt_IN.lightDir = vec3(xlv_TEXCOORD1);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 20
//   opengl - ALU: 40 to 52, TEX: 4 to 6
//   d3d9 - ALU: 39 to 49, TEX: 5 to 7
//   d3d11 - ALU: 34 to 44, TEX: 4 to 6, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 46 ALU, 5 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6];
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MAD R0.w, R0, c[6].z, c[6];
DP3 R1.x, R2, R1;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[7].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R0.w;
MOV R0.w, c[7].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[7].x;
POW R2.x, R0.w, R1.y;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1, c[1];
MAD R1.xyz, R1, R0, R0.w;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MUL R1.xyz, R1, c[0];
TEX R0.w, R0.x, texture[4], 2D;
MUL R0.xyz, R0.w, R1;
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 46 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 44 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c6.z, c6.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c7.z, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7.x, c7.y
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.z, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r0.xyz, r0, r2, r0.w
mul_pp r1.xyz, r0, c0
add_pp r0.y, r1.w, -c5.x
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r1.xyz, r0.x, r1
cmp r0.y, r0, c6.x, c6
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_LightTexture0] 2D 0
// 48 instructions, 5 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhohpechbilplfeppphlpodfngefebpgiabaaaaaahaahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgiagaaaaeaaaaaaajkabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaaegbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaaj
hcaabaaaacaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaa
aeaaaaaaddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaa
aeaaaaaaegacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ecaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaa
acaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdp
abeaaaaamnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaf
iccabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaigadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"3.0-!!ARBfp1.0
# 40 ALU, 4 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.z, R0.x;
MUL R1.xyz, R0.z, fragment.texcoord[2];
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R2.xyz, R1, fragment.texcoord[1];
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
ADD R0.z, -R0, c[6].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R1.w, R0, R2;
DP3 R0.y, fragment.texcoord[1], R0;
MOV_SAT R0.z, -R0.y;
MOV R0.w, c[7].y;
MUL R2.x, R0.w, c[4];
MAX R0.w, R1, c[7].x;
POW R1.w, R0.w, R2.x;
DP3_SAT R0.x, R1, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.y, R0, c[6].z, c[6].w;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[7];
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R2.x;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R0.xyz, R0, c[0];
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 40 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 39 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c6.z, c6.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v2
add_pp r0.xyz, r2, v1
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c6.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c4.x
mul_pp r1.w, c7.z, r0
max_pp r2.w, r0.x, c6.x
pow_pp r0, r2.w, r1.w
dp3_pp r0.y, v1, r1
texld r1, v0, s0
mov_pp_sat r0.z, -r0.y
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mad_pp r0.y, r0, c7.x, c7
texld r0.x, v0, s1
max_pp r2.x, r0.y, c6
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c6.z, r2.x
mul_pp r1.xyz, r1, c1
mad_pp r1.xyz, r1, r0, r0.w
add_pp r2.x, r1.w, -c5
cmp r0.x, r2, c6, c6.y
mul_pp r1.xyz, r1, c0
mov_pp r0, -r0.x
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Vector 16 [_LightColor0] 4
Vector 64 [_Color] 4
Vector 80 [_TranslucencyColor] 3
Float 92 [_TranslucencyViewDependency]
Float 100 [_Shininess]
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_TranslucencyMap] 2D 3
SetTexture 2 [_GlossMap] 2D 2
SetTexture 3 [_BumpMap] 2D 1
// 42 instructions, 3 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlaeelfjfnihndgbpcgfcbopponpjaaokabaaaaaaiiagaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjiafaaaaeaaaaaaaggabaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaaddcbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaa
adaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaajgahbaaa
abaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaaacaaaaaa
deaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaabkiacaaa
aaaaaaaaagaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaacaaaaaa
dgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaadkiacaaaaaaaaaaaafaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
dcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaigadbaaaabaaaaaa
fgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaaaaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"3.0-!!ARBfp1.0
# 52 ALU, 6 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 0.5, 2, 1 },
		{ 0.60009766, 0.39990234, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].z, -c[6].w;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6].w;
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
DP3 R1.x, R2, R1;
TEX R2, fragment.texcoord[0], texture[0], 2D;
MAD R0.w, R0, c[7].x, c[7].y;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[6].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].z, R0.w;
MOV R0.w, c[7].z;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[6].x;
POW R1.x, R0.w, R1.y;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1.x, R0;
MUL R1.xyz, R2, c[1];
MAD R0.xyz, R1, R0, R0.w;
RCP R0.w, fragment.texcoord[3].w;
MAD R1.xy, fragment.texcoord[3], R0.w, c[6].y;
TEX R0.w, R1, texture[4], 2D;
DP3 R1.z, fragment.texcoord[3], fragment.texcoord[3];
SLT R1.x, c[6], fragment.texcoord[3].z;
MUL R0.xyz, R0, c[0];
TEX R1.w, R1.z, texture[5], 2D;
MUL R0.w, R1.x, R0;
MUL R0.w, R0, R1;
MUL R0.xyz, R0.w, R0;
MUL result.color.xyz, R0, c[6].z;
SLT R0.x, R2.w, c[5];
MOV result.color.w, R2;
KIL -R0.x;
END
# 52 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 49 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c6, 0.00000000, 1.00000000, 0.50000000, 2.00000000
def c7, 2.00000000, -1.00000000, 0.60009766, 0.39990234
def c8, 128.00000000, 0, 0, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c8, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7, c7.w
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.w, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r0.xyz, r0, r2, r0.w
mul_pp r1.xyz, r0, c0
add_pp r0.x, r1.w, -c5
rcp r0.z, v3.w
mad r2.xy, v3, r0.z, c6.z
cmp r0.y, r0.x, c6.x, c6
dp3 r0.x, v3, v3
texld r0.w, r2, s4
cmp r0.z, -v3, c6.x, c6.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r1.xyz, r0.x, r1
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.w
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_TranslucencyMap] 2D 5
SetTexture 2 [_GlossMap] 2D 4
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_LightTexture0] 2D 0
SetTexture 5 [_LightTextureB0] 2D 1
// 54 instructions, 5 temp regs, 0 temp arrays:
// ALU 43 float, 0 int, 1 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhahbnlagjkogjhpmjkaldmljjelbdiipabaaaaaaeiaiaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceaahaaaaeaaaaaaanaabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaa
aaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiecaabaaa
abaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
dkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdpabeaaaaa
mnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
igadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
aeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaa
abaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaabaaaaaaapaaaaahicaabaaaaaaaaaaapgapbaaaaaaaaaaa
agaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"3.0-!!ARBfp1.0
# 48 ALU, 6 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6];
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MAD R0.w, R0, c[6].z, c[6];
DP3 R1.x, R2, R1;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[7].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R0.w;
MOV R0.w, c[7].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[7].x;
POW R2.x, R0.w, R1.y;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R1.xyz, R0, c[0];
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
TEX R0.w, fragment.texcoord[3], texture[5], CUBE;
TEX R2.w, R0.x, texture[4], 2D;
MUL R0.x, R2.w, R0.w;
MUL R0.xyz, R0.x, R1;
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 48 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 45 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c6.z, c6.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c7.z, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7.x, c7.y
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.z, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r1.xyz, r0, r2, r0.w
add_pp r0.x, r1.w, -c5
cmp r0.y, r0.x, c6.x, c6
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul_pp r1.xyz, r1, c0
mul_pp r1.xyz, r0.x, r1
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_TranslucencyMap] 2D 5
SetTexture 2 [_GlossMap] 2D 4
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_LightTextureB0] 2D 1
SetTexture 5 [_LightTexture0] CUBE 0
// 49 instructions, 5 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddfeoafghaabjbicdmkcifbnjocggpdnlabaaaaaalaahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckiagaaaaeaaaaaaakkabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaa
afaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaa
aaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiecaabaaa
abaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
dkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdpabeaaaaa
mnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
igadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaaaaaaaaaa
eghobaaaaeaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
agaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 44 ALU, 5 TEX
PARAM c[9] = { program.local[0..6],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.z, R0.x;
MUL R1.xyz, R0.z, fragment.texcoord[2];
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[7].x, -c[7].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R2.xyz, R1, fragment.texcoord[1];
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
ADD R0.z, -R0, c[7].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R1.w, R0, R2;
DP3 R0.y, fragment.texcoord[1], R0;
MOV_SAT R0.z, -R0.y;
MOV R0.w, c[8].y;
MUL R2.x, R0.w, c[5];
MAX R0.w, R1, c[8].x;
POW R1.w, R0.w, R2.x;
DP3_SAT R0.x, R1, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.y, R0, c[7].z, c[7].w;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[8];
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R0, c[7].x, R2.x;
MAD R0.xyz, R1, R0, R0.w;
TEX R0.w, fragment.texcoord[3], texture[4], 2D;
MUL R0.xyz, R0, c[0];
MOV R1.x, c[7];
MAD R0.w, R0, c[7].x, -c[7].x;
MAD R0.w, R0, c[4].x, R1.x;
MUL result.color.xyz, R0, R0.w;
SLT R0.x, R1.w, c[6];
MOV result.color.w, R1;
KIL -R0.x;
END
# 44 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 42 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c7, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c8, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c7.z, c7.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v2
add_pp r0.xyz, r2, v1
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c7.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c5.x
mul_pp r1.w, c8.z, r0
max_pp r2.w, r0.x, c7.x
pow_pp r0, r2.w, r1.w
dp3_pp r0.y, v1, r1
texld r1, v0, s0
mov_pp_sat r0.z, -r0.y
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mad_pp r0.y, r0, c8.x, c8
texld r0.x, v0, s1
mul_pp r1.xyz, r1, c1
max_pp r2.x, r0.y, c7
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c7.z, r2.x
mad_pp r0.xyz, r1, r0, r0.w
add_pp r0.w, r1, -c6.x
cmp r1.y, r0.w, c7.x, c7
texld r0.w, v3, s4
mov_pp r2, -r1.y
mul_pp r0.xyz, r0, c0
mov_pp r1.x, c7.z
mad_pp r0.w, r0, c7.z, -c7.z
mad_pp r0.w, r0, c4.x, r1.x
mul_pp oC0.xyz, r0, r0.w
texkill r2.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 160 [_ShadowStrength]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_LightTexture0] 2D 0
// 45 instructions, 3 temp regs, 0 temp arrays:
// ALU 36 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeokfdifecnnigheponljoofckgjkkmgmabaaaaaadiahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaagaaaaeaaaaaaaimabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadmcbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaa
adaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaajgahbaaa
abaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaaacaaaaaa
deaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaabkiacaaa
aaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaacaaaaaa
dgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
dcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaigadbaaaabaaaaaa
fgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaaeaabeaaaaaaaaaaamadcaaaaakicaabaaaaaaaaaaaakiacaaa
aaaaaaaaakaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaeadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 46 ALU, 5 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6];
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MAD R0.w, R0, c[6].z, c[6];
DP3 R1.x, R2, R1;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[7].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R0.w;
MOV R0.w, c[7].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[7].x;
POW R2.x, R0.w, R1.y;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1, c[1];
MAD R1.xyz, R1, R0, R0.w;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MUL R1.xyz, R1, c[0];
TEX R0.w, R0.x, texture[4], 2D;
MUL R0.xyz, R0.w, R1;
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 46 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 44 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c6.z, c6.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c7.z, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7.x, c7.y
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.z, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r0.xyz, r0, r2, r0.w
mul_pp r1.xyz, r0, c0
add_pp r0.y, r1.w, -c5.x
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r1.xyz, r0.x, r1
cmp r0.y, r0, c6.x, c6
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_LightTexture0] 2D 0
// 48 instructions, 5 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhohpechbilplfeppphlpodfngefebpgiabaaaaaahaahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgiagaaaaeaaaaaaajkabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaaegbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaaj
hcaabaaaacaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaa
aeaaaaaaddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaa
aeaaaaaaegacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ecaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaa
acaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdp
abeaaaaamnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaf
iccabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaigadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"3.0-!!ARBfp1.0
# 40 ALU, 4 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.z, R0.x;
MUL R1.xyz, R0.z, fragment.texcoord[2];
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R2.xyz, R1, fragment.texcoord[1];
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
ADD R0.z, -R0, c[6].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R1.w, R0, R2;
DP3 R0.y, fragment.texcoord[1], R0;
MOV_SAT R0.z, -R0.y;
MOV R0.w, c[7].y;
MUL R2.x, R0.w, c[4];
MAX R0.w, R1, c[7].x;
POW R1.w, R0.w, R2.x;
DP3_SAT R0.x, R1, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.y, R0, c[6].z, c[6].w;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[7];
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R2.x;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R0.xyz, R0, c[0];
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 40 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 39 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c6.z, c6.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v2
add_pp r0.xyz, r2, v1
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c6.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c4.x
mul_pp r1.w, c7.z, r0
max_pp r2.w, r0.x, c6.x
pow_pp r0, r2.w, r1.w
dp3_pp r0.y, v1, r1
texld r1, v0, s0
mov_pp_sat r0.z, -r0.y
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mad_pp r0.y, r0, c7.x, c7
texld r0.x, v0, s1
max_pp r2.x, r0.y, c6
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c6.z, r2.x
mul_pp r1.xyz, r1, c1
mad_pp r1.xyz, r1, r0, r0.w
add_pp r2.x, r1.w, -c5
cmp r0.x, r2, c6, c6.y
mul_pp r1.xyz, r1, c0
mov_pp r0, -r0.x
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Vector 16 [_LightColor0] 4
Vector 64 [_Color] 4
Vector 80 [_TranslucencyColor] 3
Float 92 [_TranslucencyViewDependency]
Float 100 [_Shininess]
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_TranslucencyMap] 2D 3
SetTexture 2 [_GlossMap] 2D 2
SetTexture 3 [_BumpMap] 2D 1
// 42 instructions, 3 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlaeelfjfnihndgbpcgfcbopponpjaaokabaaaaaaiiagaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjiafaaaaeaaaaaaaggabaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaaddcbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaa
adaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaajgahbaaa
abaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaaacaaaaaa
deaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaabkiacaaa
aaaaaaaaagaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaacaaaaaa
dgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaadkiacaaaaaaaaaaaafaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
dcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaigadbaaaabaaaaaa
fgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaaaaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"3.0-!!ARBfp1.0
# 52 ALU, 6 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 0.5, 2, 1 },
		{ 0.60009766, 0.39990234, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].z, -c[6].w;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6].w;
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
DP3 R1.x, R2, R1;
TEX R2, fragment.texcoord[0], texture[0], 2D;
MAD R0.w, R0, c[7].x, c[7].y;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[6].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].z, R0.w;
MOV R0.w, c[7].z;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[6].x;
POW R1.x, R0.w, R1.y;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1.x, R0;
MUL R1.xyz, R2, c[1];
MAD R0.xyz, R1, R0, R0.w;
RCP R0.w, fragment.texcoord[3].w;
MAD R1.xy, fragment.texcoord[3], R0.w, c[6].y;
TEX R0.w, R1, texture[4], 2D;
DP3 R1.z, fragment.texcoord[3], fragment.texcoord[3];
SLT R1.x, c[6], fragment.texcoord[3].z;
MUL R0.xyz, R0, c[0];
TEX R1.w, R1.z, texture[5], 2D;
MUL R0.w, R1.x, R0;
MUL R0.w, R0, R1;
MUL R0.xyz, R0.w, R0;
MUL result.color.xyz, R0, c[6].z;
SLT R0.x, R2.w, c[5];
MOV result.color.w, R2;
KIL -R0.x;
END
# 52 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 49 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c6, 0.00000000, 1.00000000, 0.50000000, 2.00000000
def c7, 2.00000000, -1.00000000, 0.60009766, 0.39990234
def c8, 128.00000000, 0, 0, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c8, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7, c7.w
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.w, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r0.xyz, r0, r2, r0.w
mul_pp r1.xyz, r0, c0
add_pp r0.x, r1.w, -c5
rcp r0.z, v3.w
mad r2.xy, v3, r0.z, c6.z
cmp r0.y, r0.x, c6.x, c6
dp3 r0.x, v3, v3
texld r0.w, r2, s4
cmp r0.z, -v3, c6.x, c6.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r1.xyz, r0.x, r1
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.w
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_TranslucencyMap] 2D 5
SetTexture 2 [_GlossMap] 2D 4
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_LightTexture0] 2D 0
SetTexture 5 [_LightTextureB0] 2D 1
// 54 instructions, 5 temp regs, 0 temp arrays:
// ALU 43 float, 0 int, 1 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhahbnlagjkogjhpmjkaldmljjelbdiipabaaaaaaeiaiaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceaahaaaaeaaaaaaanaabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaa
aaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiecaabaaa
abaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
dkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdpabeaaaaa
mnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
igadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
aeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaa
abaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaabaaaaaaapaaaaahicaabaaaaaaaaaaapgapbaaaaaaaaaaa
agaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"3.0-!!ARBfp1.0
# 48 ALU, 6 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6];
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MAD R0.w, R0, c[6].z, c[6];
DP3 R1.x, R2, R1;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[7].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R0.w;
MOV R0.w, c[7].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[7].x;
POW R2.x, R0.w, R1.y;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R1.xyz, R0, c[0];
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
TEX R0.w, fragment.texcoord[3], texture[5], CUBE;
TEX R2.w, R0.x, texture[4], 2D;
MUL R0.x, R2.w, R0.w;
MUL R0.xyz, R0.x, R1;
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 48 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 45 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c6.z, c6.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c7.z, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7.x, c7.y
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.z, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r1.xyz, r0, r2, r0.w
add_pp r0.x, r1.w, -c5
cmp r0.y, r0.x, c6.x, c6
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul_pp r1.xyz, r1, c0
mul_pp r1.xyz, r0.x, r1
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_TranslucencyMap] 2D 5
SetTexture 2 [_GlossMap] 2D 4
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_LightTextureB0] 2D 1
SetTexture 5 [_LightTexture0] CUBE 0
// 49 instructions, 5 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddfeoafghaabjbicdmkcifbnjocggpdnlabaaaaaalaahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckiagaaaaeaaaaaaakkabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaa
afaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaa
aaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiecaabaaa
abaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
dkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdpabeaaaaa
mnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
igadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaaaaaaaaaa
eghobaaaaeaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
agaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 44 ALU, 5 TEX
PARAM c[9] = { program.local[0..6],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.z, R0.x;
MUL R1.xyz, R0.z, fragment.texcoord[2];
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[7].x, -c[7].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R2.xyz, R1, fragment.texcoord[1];
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
ADD R0.z, -R0, c[7].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R1.w, R0, R2;
DP3 R0.y, fragment.texcoord[1], R0;
MOV_SAT R0.z, -R0.y;
MOV R0.w, c[8].y;
MUL R2.x, R0.w, c[5];
MAX R0.w, R1, c[8].x;
POW R1.w, R0.w, R2.x;
DP3_SAT R0.x, R1, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.y, R0, c[7].z, c[7].w;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[8];
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R0, c[7].x, R2.x;
MAD R0.xyz, R1, R0, R0.w;
TEX R0.w, fragment.texcoord[3], texture[4], 2D;
MUL R0.xyz, R0, c[0];
MOV R1.x, c[7];
MAD R0.w, R0, c[7].x, -c[7].x;
MAD R0.w, R0, c[4].x, R1.x;
MUL result.color.xyz, R0, R0.w;
SLT R0.x, R1.w, c[6];
MOV result.color.w, R1;
KIL -R0.x;
END
# 44 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 42 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c7, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c8, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c7.z, c7.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v2
add_pp r0.xyz, r2, v1
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c7.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c5.x
mul_pp r1.w, c8.z, r0
max_pp r2.w, r0.x, c7.x
pow_pp r0, r2.w, r1.w
dp3_pp r0.y, v1, r1
texld r1, v0, s0
mov_pp_sat r0.z, -r0.y
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mad_pp r0.y, r0, c8.x, c8
texld r0.x, v0, s1
mul_pp r1.xyz, r1, c1
max_pp r2.x, r0.y, c7
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c7.z, r2.x
mad_pp r0.xyz, r1, r0, r0.w
add_pp r0.w, r1, -c6.x
cmp r1.y, r0.w, c7.x, c7
texld r0.w, v3, s4
mov_pp r2, -r1.y
mul_pp r0.xyz, r0, c0
mov_pp r1.x, c7.z
mad_pp r0.w, r0, c7.z, -c7.z
mad_pp r0.w, r0, c4.x, r1.x
mul_pp oC0.xyz, r0, r0.w
texkill r2.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 160 [_ShadowStrength]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_LightTexture0] 2D 0
// 45 instructions, 3 temp regs, 0 temp arrays:
// ALU 36 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeokfdifecnnigheponljoofckgjkkmgmabaaaaaadiahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaagaaaaeaaaaaaaimabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadmcbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaa
adaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaajgahbaaa
abaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaaacaaaaaa
deaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaabkiacaaa
aaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaacaaaaaa
dgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
dcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaigadbaaaabaaaaaa
fgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaaeaabeaaaaaaaaaaamadcaaaaakicaabaaaaaaaaaaaakiacaaa
aaaaaaaaakaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaeadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 46 ALU, 5 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6];
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MAD R0.w, R0, c[6].z, c[6];
DP3 R1.x, R2, R1;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[7].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R0.w;
MOV R0.w, c[7].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[7].x;
POW R2.x, R0.w, R1.y;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1, c[1];
MAD R1.xyz, R1, R0, R0.w;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MUL R1.xyz, R1, c[0];
TEX R0.w, R0.x, texture[4], 2D;
MUL R0.xyz, R0.w, R1;
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 46 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 44 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c6.z, c6.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c7.z, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7.x, c7.y
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.z, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r0.xyz, r0, r2, r0.w
mul_pp r1.xyz, r0, c0
add_pp r0.y, r1.w, -c5.x
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r1.xyz, r0.x, r1
cmp r0.y, r0, c6.x, c6
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_LightTexture0] 2D 0
// 48 instructions, 5 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhohpechbilplfeppphlpodfngefebpgiabaaaaaahaahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgiagaaaaeaaaaaaajkabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaaegbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaaj
hcaabaaaacaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaa
aeaaaaaaddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaa
aeaaaaaaegacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ecaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaa
acaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdp
abeaaaaamnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaf
iccabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaigadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"3.0-!!ARBfp1.0
# 40 ALU, 4 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.z, R0.x;
MUL R1.xyz, R0.z, fragment.texcoord[2];
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R2.xyz, R1, fragment.texcoord[1];
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
ADD R0.z, -R0, c[6].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R1.w, R0, R2;
DP3 R0.y, fragment.texcoord[1], R0;
MOV_SAT R0.z, -R0.y;
MOV R0.w, c[7].y;
MUL R2.x, R0.w, c[4];
MAX R0.w, R1, c[7].x;
POW R1.w, R0.w, R2.x;
DP3_SAT R0.x, R1, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.y, R0, c[6].z, c[6].w;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[7];
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R2.x;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R0.xyz, R0, c[0];
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 40 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 39 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c6.z, c6.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v2
add_pp r0.xyz, r2, v1
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c6.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c4.x
mul_pp r1.w, c7.z, r0
max_pp r2.w, r0.x, c6.x
pow_pp r0, r2.w, r1.w
dp3_pp r0.y, v1, r1
texld r1, v0, s0
mov_pp_sat r0.z, -r0.y
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mad_pp r0.y, r0, c7.x, c7
texld r0.x, v0, s1
max_pp r2.x, r0.y, c6
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c6.z, r2.x
mul_pp r1.xyz, r1, c1
mad_pp r1.xyz, r1, r0, r0.w
add_pp r2.x, r1.w, -c5
cmp r0.x, r2, c6, c6.y
mul_pp r1.xyz, r1, c0
mov_pp r0, -r0.x
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Vector 16 [_LightColor0] 4
Vector 64 [_Color] 4
Vector 80 [_TranslucencyColor] 3
Float 92 [_TranslucencyViewDependency]
Float 100 [_Shininess]
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_TranslucencyMap] 2D 3
SetTexture 2 [_GlossMap] 2D 2
SetTexture 3 [_BumpMap] 2D 1
// 42 instructions, 3 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlaeelfjfnihndgbpcgfcbopponpjaaokabaaaaaaiiagaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjiafaaaaeaaaaaaaggabaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaaddcbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaa
adaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaajgahbaaa
abaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaaacaaaaaa
deaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaabkiacaaa
aaaaaaaaagaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaacaaaaaa
dgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaadkiacaaaaaaaaaaaafaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
dcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaigadbaaaabaaaaaa
fgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaaaaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"3.0-!!ARBfp1.0
# 52 ALU, 6 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 0.5, 2, 1 },
		{ 0.60009766, 0.39990234, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].z, -c[6].w;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6].w;
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
DP3 R1.x, R2, R1;
TEX R2, fragment.texcoord[0], texture[0], 2D;
MAD R0.w, R0, c[7].x, c[7].y;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[6].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].z, R0.w;
MOV R0.w, c[7].z;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[6].x;
POW R1.x, R0.w, R1.y;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1.x, R0;
MUL R1.xyz, R2, c[1];
MAD R0.xyz, R1, R0, R0.w;
RCP R0.w, fragment.texcoord[3].w;
MAD R1.xy, fragment.texcoord[3], R0.w, c[6].y;
TEX R0.w, R1, texture[4], 2D;
DP3 R1.z, fragment.texcoord[3], fragment.texcoord[3];
SLT R1.x, c[6], fragment.texcoord[3].z;
MUL R0.xyz, R0, c[0];
TEX R1.w, R1.z, texture[5], 2D;
MUL R0.w, R1.x, R0;
MUL R0.w, R0, R1;
MUL R0.xyz, R0.w, R0;
MUL result.color.xyz, R0, c[6].z;
SLT R0.x, R2.w, c[5];
MOV result.color.w, R2;
KIL -R0.x;
END
# 52 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 49 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c6, 0.00000000, 1.00000000, 0.50000000, 2.00000000
def c7, 2.00000000, -1.00000000, 0.60009766, 0.39990234
def c8, 128.00000000, 0, 0, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c8, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7, c7.w
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.w, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r0.xyz, r0, r2, r0.w
mul_pp r1.xyz, r0, c0
add_pp r0.x, r1.w, -c5
rcp r0.z, v3.w
mad r2.xy, v3, r0.z, c6.z
cmp r0.y, r0.x, c6.x, c6
dp3 r0.x, v3, v3
texld r0.w, r2, s4
cmp r0.z, -v3, c6.x, c6.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r1.xyz, r0.x, r1
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.w
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_TranslucencyMap] 2D 5
SetTexture 2 [_GlossMap] 2D 4
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_LightTexture0] 2D 0
SetTexture 5 [_LightTextureB0] 2D 1
// 54 instructions, 5 temp regs, 0 temp arrays:
// ALU 43 float, 0 int, 1 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhahbnlagjkogjhpmjkaldmljjelbdiipabaaaaaaeiaiaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceaahaaaaeaaaaaaanaabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaa
aaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiecaabaaa
abaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
dkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdpabeaaaaa
mnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
igadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
aeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaa
abaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaabaaaaaaapaaaaahicaabaaaaaaaaaaapgapbaaaaaaaaaaa
agaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"3.0-!!ARBfp1.0
# 48 ALU, 6 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6];
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MAD R0.w, R0, c[6].z, c[6];
DP3 R1.x, R2, R1;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[7].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R0.w;
MOV R0.w, c[7].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[7].x;
POW R2.x, R0.w, R1.y;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R1.xyz, R0, c[0];
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
TEX R0.w, fragment.texcoord[3], texture[5], CUBE;
TEX R2.w, R0.x, texture[4], 2D;
MUL R0.x, R2.w, R0.w;
MUL R0.xyz, R0.x, R1;
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 48 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 45 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c6.z, c6.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c7.z, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7.x, c7.y
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.z, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r1.xyz, r0, r2, r0.w
add_pp r0.x, r1.w, -c5
cmp r0.y, r0.x, c6.x, c6
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul_pp r1.xyz, r1, c0
mul_pp r1.xyz, r0.x, r1
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_TranslucencyMap] 2D 5
SetTexture 2 [_GlossMap] 2D 4
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_LightTextureB0] 2D 1
SetTexture 5 [_LightTexture0] CUBE 0
// 49 instructions, 5 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddfeoafghaabjbicdmkcifbnjocggpdnlabaaaaaalaahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckiagaaaaeaaaaaaakkabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaa
afaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaa
aaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiecaabaaa
abaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
dkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdpabeaaaaa
mnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
igadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaaaaaaaaaa
eghobaaaaeaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
agaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 44 ALU, 5 TEX
PARAM c[9] = { program.local[0..6],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.z, R0.x;
MUL R1.xyz, R0.z, fragment.texcoord[2];
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[7].x, -c[7].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R2.xyz, R1, fragment.texcoord[1];
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
ADD R0.z, -R0, c[7].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R1.w, R0, R2;
DP3 R0.y, fragment.texcoord[1], R0;
MOV_SAT R0.z, -R0.y;
MOV R0.w, c[8].y;
MUL R2.x, R0.w, c[5];
MAX R0.w, R1, c[8].x;
POW R1.w, R0.w, R2.x;
DP3_SAT R0.x, R1, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.y, R0, c[7].z, c[7].w;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[8];
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R0, c[7].x, R2.x;
MAD R0.xyz, R1, R0, R0.w;
TEX R0.w, fragment.texcoord[3], texture[4], 2D;
MUL R0.xyz, R0, c[0];
MOV R1.x, c[7];
MAD R0.w, R0, c[7].x, -c[7].x;
MAD R0.w, R0, c[4].x, R1.x;
MUL result.color.xyz, R0, R0.w;
SLT R0.x, R1.w, c[6];
MOV result.color.w, R1;
KIL -R0.x;
END
# 44 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 42 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c7, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c8, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c7.z, c7.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v2
add_pp r0.xyz, r2, v1
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c7.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c5.x
mul_pp r1.w, c8.z, r0
max_pp r2.w, r0.x, c7.x
pow_pp r0, r2.w, r1.w
dp3_pp r0.y, v1, r1
texld r1, v0, s0
mov_pp_sat r0.z, -r0.y
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mad_pp r0.y, r0, c8.x, c8
texld r0.x, v0, s1
mul_pp r1.xyz, r1, c1
max_pp r2.x, r0.y, c7
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c7.z, r2.x
mad_pp r0.xyz, r1, r0, r0.w
add_pp r0.w, r1, -c6.x
cmp r1.y, r0.w, c7.x, c7
texld r0.w, v3, s4
mov_pp r2, -r1.y
mul_pp r0.xyz, r0, c0
mov_pp r1.x, c7.z
mad_pp r0.w, r0, c7.z, -c7.z
mad_pp r0.w, r0, c4.x, r1.x
mul_pp oC0.xyz, r0, r0.w
texkill r2.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 160 [_ShadowStrength]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_LightTexture0] 2D 0
// 45 instructions, 3 temp regs, 0 temp arrays:
// ALU 36 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeokfdifecnnigheponljoofckgjkkmgmabaaaaaadiahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaagaaaaeaaaaaaaimabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadmcbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaa
adaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaajgahbaaa
abaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaaacaaaaaa
deaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaabkiacaaa
aaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaacaaaaaa
dgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
dcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaigadbaaaabaaaaaa
fgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaaeaabeaaaaaaaaaaamadcaaaaakicaabaaaaaaaaaaaakiacaaa
aaaaaaaaakaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaeadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 46 ALU, 5 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6];
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MAD R0.w, R0, c[6].z, c[6];
DP3 R1.x, R2, R1;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[7].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R0.w;
MOV R0.w, c[7].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[7].x;
POW R2.x, R0.w, R1.y;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1, c[1];
MAD R1.xyz, R1, R0, R0.w;
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
MUL R1.xyz, R1, c[0];
TEX R0.w, R0.x, texture[4], 2D;
MUL R0.xyz, R0.w, R1;
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 46 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 44 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c6.z, c6.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c7.z, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7.x, c7.y
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.z, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r0.xyz, r0, r2, r0.w
mul_pp r1.xyz, r0, c0
add_pp r0.y, r1.w, -c5.x
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r1.xyz, r0.x, r1
cmp r0.y, r0, c6.x, c6
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_LightTexture0] 2D 0
// 48 instructions, 5 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhohpechbilplfeppphlpodfngefebpgiabaaaaaahaahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcgiagaaaaeaaaaaaajkabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaa
acaaaaaagcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaa
abaaaaaaegbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaa
egbcbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaaj
hcaabaaaacaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaa
diaaaaahhcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaah
icaabaaaabaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaa
abaaaaaadkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaa
adaaaaaaaagabaaaacaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaa
aceaaaaaaaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialp
aaaaaaaaaaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaa
aeaaaaaaddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadp
aaaaaaaiicaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadp
elaaaaafecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaa
aeaaaaaaegacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaa
egacbaiaebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaai
ecaabaaaabaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaah
ccaabaaaabaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaa
abaaaaaabkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaa
eghobaaaacaaaaaaaagabaaaadaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaa
acaaaaaadcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdp
abeaaaaamnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaa
abaaaaaadcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaa
abaaaaaackaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaa
eghobaaaabaaaaaaaagabaaaaeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaa
abaaaaaaakaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaa
egiccaaaaaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaa
aceaaaaaaaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaai
hcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaf
iccabaaaaaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
aaaaaaaaigadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaaaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaa
egbcbaaaaeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaa
aaaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaaaaaaaaahicaabaaaaaaaaaaa
akaabaaaabaaaaaaakaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"3.0-!!ARBfp1.0
# 40 ALU, 4 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.z, R0.x;
MUL R1.xyz, R0.z, fragment.texcoord[2];
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R2.xyz, R1, fragment.texcoord[1];
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
ADD R0.z, -R0, c[6].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R1.w, R0, R2;
DP3 R0.y, fragment.texcoord[1], R0;
MOV_SAT R0.z, -R0.y;
MOV R0.w, c[7].y;
MUL R2.x, R0.w, c[4];
MAX R0.w, R1, c[7].x;
POW R1.w, R0.w, R2.x;
DP3_SAT R0.x, R1, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.y, R0, c[6].z, c[6].w;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[7];
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R2.x;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R0.xyz, R0, c[0];
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 40 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
"ps_3_0
; 39 ALU, 5 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c6.z, c6.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v2
add_pp r0.xyz, r2, v1
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c6.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c4.x
mul_pp r1.w, c7.z, r0
max_pp r2.w, r0.x, c6.x
pow_pp r0, r2.w, r1.w
dp3_pp r0.y, v1, r1
texld r1, v0, s0
mov_pp_sat r0.z, -r0.y
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mad_pp r0.y, r0, c7.x, c7
texld r0.x, v0, s1
max_pp r2.x, r0.y, c6
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c6.z, r2.x
mul_pp r1.xyz, r1, c1
mad_pp r1.xyz, r1, r0, r0.w
add_pp r2.x, r1.w, -c5
cmp r0.x, r2, c6, c6.y
mul_pp r1.xyz, r1, c0
mov_pp r0, -r0.x
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Vector 16 [_LightColor0] 4
Vector 64 [_Color] 4
Vector 80 [_TranslucencyColor] 3
Float 92 [_TranslucencyViewDependency]
Float 100 [_Shininess]
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
SetTexture 1 [_TranslucencyMap] 2D 3
SetTexture 2 [_GlossMap] 2D 2
SetTexture 3 [_BumpMap] 2D 1
// 42 instructions, 3 temp regs, 0 temp arrays:
// ALU 34 float, 0 int, 0 uint
// TEX 4 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedlaeelfjfnihndgbpcgfcbopponpjaaokabaaaaaaiiagaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjiafaaaaeaaaaaaaggabaaaafjaaaaaeegiocaaa
aaaaaaaaakaaaaaafkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaa
fkaaaaadaagabaaaacaaaaaafkaaaaadaagabaaaadaaaaaafibiaaaeaahabaaa
aaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaaeaahabaaa
acaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaagcbaaaaddcbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaa
adaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaabaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaajgahbaaa
abaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaaacaaaaaa
deaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaabkiacaaa
aaaaaaaaagaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
acaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaacaaaaaa
dgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaadkiacaaaaaaaaaaaafaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
adaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaaafaaaaaa
dcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaeaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaigadbaaaabaaaaaa
fgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaaaaaaaahhccabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"3.0-!!ARBfp1.0
# 52 ALU, 6 TEX
PARAM c[8] = { program.local[0..5],
		{ 0, 0.5, 2, 1 },
		{ 0.60009766, 0.39990234, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].z, -c[6].w;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6].w;
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
DP3 R1.x, R2, R1;
TEX R2, fragment.texcoord[0], texture[0], 2D;
MAD R0.w, R0, c[7].x, c[7].y;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[6].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].z, R0.w;
MOV R0.w, c[7].z;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[6].x;
POW R1.x, R0.w, R1.y;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1.x, R0;
MUL R1.xyz, R2, c[1];
MAD R0.xyz, R1, R0, R0.w;
RCP R0.w, fragment.texcoord[3].w;
MAD R1.xy, fragment.texcoord[3], R0.w, c[6].y;
TEX R0.w, R1, texture[4], 2D;
DP3 R1.z, fragment.texcoord[3], fragment.texcoord[3];
SLT R1.x, c[6], fragment.texcoord[3].z;
MUL R0.xyz, R0, c[0];
TEX R1.w, R1.z, texture[5], 2D;
MUL R0.w, R1.x, R0;
MUL R0.w, R0, R1;
MUL R0.xyz, R0.w, R0;
MUL result.color.xyz, R0, c[6].z;
SLT R0.x, R2.w, c[5];
MOV result.color.w, R2;
KIL -R0.x;
END
# 52 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
SetTexture 5 [_LightTextureB0] 2D
"ps_3_0
; 49 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c6, 0.00000000, 1.00000000, 0.50000000, 2.00000000
def c7, 2.00000000, -1.00000000, 0.60009766, 0.39990234
def c8, 128.00000000, 0, 0, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c7.x, c7.y
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c8, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7, c7.w
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.w, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r0.xyz, r0, r2, r0.w
mul_pp r1.xyz, r0, c0
add_pp r0.x, r1.w, -c5
rcp r0.z, v3.w
mad r2.xy, v3, r0.z, c6.z
cmp r0.y, r0.x, c6.x, c6
dp3 r0.x, v3, v3
texld r0.w, r2, s4
cmp r0.z, -v3, c6.x, c6.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s5
mul_pp r0.x, r0.z, r0
mul_pp r1.xyz, r0.x, r1
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.w
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_TranslucencyMap] 2D 5
SetTexture 2 [_GlossMap] 2D 4
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_LightTexture0] 2D 0
SetTexture 5 [_LightTextureB0] 2D 1
// 54 instructions, 5 temp regs, 0 temp arrays:
// ALU 43 float, 0 int, 1 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedhahbnlagjkogjhpmjkaldmljjelbdiipabaaaaaaeiaiaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapapaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefceaahaaaaeaaaaaaanaabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafibiaaaeaahabaaa
afaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadpcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaa
aaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiecaabaaa
abaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
dkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdpabeaaaaa
mnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
igadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaaaoaaaaahdcaabaaaabaaaaaaegbabaaa
aeaaaaaapgbpbaaaaeaaaaaaaaaaaaakdcaabaaaabaaaaaaegaabaaaabaaaaaa
aceaaaaaaaaaaadpaaaaaadpaaaaaaaaaaaaaaaaefaaaaajpcaabaaaabaaaaaa
egaabaaaabaaaaaaeghobaaaaeaaaaaaaagabaaaaaaaaaaadbaaaaahicaabaaa
aaaaaaaaabeaaaaaaaaaaaaackbabaaaaeaaaaaaabaaaaahicaabaaaaaaaaaaa
dkaabaaaaaaaaaaaabeaaaaaaaaaiadpdiaaaaahicaabaaaaaaaaaaadkaabaaa
abaaaaaadkaabaaaaaaaaaaabaaaaaahbcaabaaaabaaaaaaegbcbaaaaeaaaaaa
egbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaaagaabaaaabaaaaaaeghobaaa
afaaaaaaaagabaaaabaaaaaaapaaaaahicaabaaaaaaaaaaapgapbaaaaaaaaaaa
agaabaaaabaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SPOT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"3.0-!!ARBfp1.0
# 48 ALU, 6 TEX
PARAM c[8] = { program.local[0..5],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R2.xy, R0.wyzw, c[6].x, -c[6].y;
MUL R0.zw, R2.xyxy, R2.xyxy;
ADD_SAT R0.y, R0.z, R0.w;
DP3 R0.x, fragment.texcoord[1], fragment.texcoord[1];
RSQ R0.x, R0.x;
MUL R3.xyz, R0.x, fragment.texcoord[1];
ADD R0.y, -R0, c[6];
RSQ R0.y, R0.y;
RCP R2.z, R0.y;
DP3 R0.w, R3, R2;
MOV_SAT R0.y, -R0.w;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.x, R0.x;
MUL R1.xyz, R0.x, fragment.texcoord[2];
DP3_SAT R0.x, R1, -R3;
ADD R0.z, R0.x, -R0.y;
ADD R1.xyz, R1, R3;
DP3 R1.w, R1, R1;
RSQ R1.w, R1.w;
MUL R1.xyz, R1.w, R1;
MAD R0.w, R0, c[6].z, c[6];
DP3 R1.x, R2, R1;
MAD R0.y, R0.z, c[3].x, R0;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MUL R0.x, R0.y, R0;
MAX R0.w, R0, c[7].x;
MUL R0.xyz, R0.x, c[2];
MAD R0.xyz, R0, c[6].x, R0.w;
MOV R0.w, c[7].y;
MUL R1.y, R0.w, c[4].x;
MAX R0.w, R1.x, c[7].x;
POW R2.x, R0.w, R1.y;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R2.x, R0;
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R1, R0, R0.w;
MUL R1.xyz, R0, c[0];
DP3 R0.x, fragment.texcoord[3], fragment.texcoord[3];
TEX R0.w, fragment.texcoord[3], texture[5], CUBE;
TEX R2.w, R0.x, texture[4], 2D;
MUL R0.x, R2.w, R0.w;
MUL R0.xyz, R0.x, R1;
MUL result.color.xyz, R0, c[6].x;
SLT R0.x, R1.w, c[5];
MOV result.color.w, R1;
KIL -R0.x;
END
# 48 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_Shininess]
Float 5 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 45 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_cube s5
def c6, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c7, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r1.xyz, r0.x, v2
dp3_pp r0.x, v1, v1
rsq_pp r0.z, r0.x
mul_pp r2.xyz, r0.z, v1
texld r0.yw, v0, s3
mad_pp r0.xy, r0.wyzw, c6.z, c6.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
add_pp r3.xyz, r1, r2
dp3_pp r0.w, r3, r3
rsq_pp r0.w, r0.w
add_pp r0.z, -r0, c6.y
rsq_pp r0.z, r0.z
mul_pp r3.xyz, r0.w, r3
rcp_pp r0.z, r0.z
dp3_pp r0.w, r0, r3
mov_pp r1.w, c4.x
mul_pp r3.x, c7.z, r1.w
dp3_pp r1.w, r2, r0
max_pp r2.w, r0, c6.x
pow_pp r0, r2.w, r3.x
dp3_pp_sat r0.y, r1, -r2
mov_pp_sat r0.z, -r1.w
add_pp r0.y, r0, -r0.z
mad_pp r0.y, r0, c3.x, r0.z
texld r1.x, v0, s1
mul_pp r0.y, r0, r1.x
mad_pp r0.z, r1.w, c7.x, c7.y
texld r0.w, v0, s2
mul_pp r1.xyz, r0.y, c2
max_pp r0.z, r0, c6.x
mad_pp r2.xyz, r1, c6.z, r0.z
texld r1, v0, s0
mul_pp r0.w, r0.x, r0
mul_pp r0.xyz, r1, c1
mad_pp r1.xyz, r0, r2, r0.w
add_pp r0.x, r1.w, -c5
cmp r0.y, r0.x, c6.x, c6
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul_pp r1.xyz, r1, c0
mul_pp r1.xyz, r0.x, r1
mov_pp r0, -r0.y
mul_pp oC0.xyz, r1, c6.z
texkill r0.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 2
SetTexture 1 [_TranslucencyMap] 2D 5
SetTexture 2 [_GlossMap] 2D 4
SetTexture 3 [_BumpMap] 2D 3
SetTexture 4 [_LightTextureB0] 2D 1
SetTexture 5 [_LightTexture0] CUBE 0
// 49 instructions, 5 temp regs, 0 temp arrays:
// ALU 39 float, 0 int, 0 uint
// TEX 6 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddfeoafghaabjbicdmkcifbnjocggpdnlabaaaaaalaahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaimaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaaimaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefckiagaaaaeaaaaaaakkabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafkaaaaad
aagabaaaafaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaafibiaaaeaahabaaaacaaaaaaffffaaaafibiaaaeaahabaaa
adaaaaaaffffaaaafibiaaaeaahabaaaaeaaaaaaffffaaaafidaaaaeaahabaaa
afaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagfaaaaadpccabaaa
aaaaaaaagiaaaaacafaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaabaaaaaa
eghobaaaaaaaaaaaaagabaaaacaaaaaaaaaaaaajbcaabaaaabaaaaaadkaabaaa
aaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaaabaaaaaa
akaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaabaaaaaah
bcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaafbcaabaaa
abaaaaaaakaabaaaabaaaaaadiaaaaahhcaabaaaabaaaaaaagaabaaaabaaaaaa
egbcbaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajhcaabaaa
acaaaaaaegbcbaaaacaaaaaapgapbaaaabaaaaaaegacbaaaabaaaaaadiaaaaah
hcaabaaaadaaaaaapgapbaaaabaaaaaaegbcbaaaacaaaaaabaaaaaahicaabaaa
abaaaaaaegacbaaaacaaaaaaegacbaaaacaaaaaaeeaaaaaficaabaaaabaaaaaa
dkaabaaaabaaaaaadiaaaaahhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaa
acaaaaaaefaaaaajpcaabaaaaeaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaa
aagabaaaadaaaaaadcaaaaapdcaabaaaaeaaaaaahgapbaaaaeaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaa
aaaaaaaaapaaaaahicaabaaaabaaaaaaegaabaaaaeaaaaaaegaabaaaaeaaaaaa
ddaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaiadpaaaaaaai
icaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaaabeaaaaaaaaaiadpelaaaaaf
ecaabaaaaeaaaaaadkaabaaaabaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
aeaaaaaaegacbaaaacaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaeaaaaaa
egacbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaaabaaaaaaegacbaia
ebaaaaaaadaaaaaadeaaaaahccaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
aaaaaaaacpaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiecaabaaa
abaaaaaabkiacaaaaaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaa
abaaaaaabkaabaaaabaaaaaackaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaa
bkaabaaaabaaaaaaefaaaaajpcaabaaaadaaaaaaegbabaaaabaaaaaaeghobaaa
acaaaaaaaagabaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaa
dkaabaaaadaaaaaadgcaaaagecaabaaaabaaaaaaakaabaiaebaaaaaaacaaaaaa
dcaaaaajicaabaaaabaaaaaaakaabaaaacaaaaaaabeaaaaajkjjbjdpabeaaaaa
mnmmmmdodeaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaa
dcaaaaakbcaabaaaabaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaa
ckaabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaa
abaaaaaaaagabaaaafaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaa
akaabaaaacaaaaaadiaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaa
aaaaaaaaajaaaaaadcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaaaaaaaaaeaaaaaaaeapgapbaaaabaaaaaadiaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaa
aaaaaaaadkaabaaaaaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaa
igadbaaaabaaaaaafgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaabaaaaaabaaaaaahicaabaaaaaaaaaaaegbcbaaa
aeaaaaaaegbcbaaaaeaaaaaaefaaaaajpcaabaaaabaaaaaapgapbaaaaaaaaaaa
eghobaaaaeaaaaaaaagabaaaabaaaaaaefaaaaajpcaabaaaacaaaaaaegbcbaaa
aeaaaaaaeghobaaaafaaaaaaaagabaaaaaaaaaaaapaaaaahicaabaaaaaaaaaaa
agaabaaaabaaaaaapgapbaaaacaaaaaadiaaaaahhccabaaaaaaaaaaapgapbaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "POINT_COOKIE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"3.0-!!ARBfp1.0
# 44 ALU, 5 TEX
PARAM c[9] = { program.local[0..6],
		{ 2, 1, 0.60009766, 0.39990234 },
		{ 0, 128 } };
TEMP R0;
TEMP R1;
TEMP R2;
DP3 R0.x, fragment.texcoord[2], fragment.texcoord[2];
RSQ R0.z, R0.x;
MUL R1.xyz, R0.z, fragment.texcoord[2];
TEX R0.yw, fragment.texcoord[0], texture[3], 2D;
MAD R0.xy, R0.wyzw, c[7].x, -c[7].y;
MUL R0.zw, R0.xyxy, R0.xyxy;
ADD_SAT R0.z, R0, R0.w;
ADD R2.xyz, R1, fragment.texcoord[1];
DP3 R0.w, R2, R2;
RSQ R0.w, R0.w;
MUL R2.xyz, R0.w, R2;
ADD R0.z, -R0, c[7].y;
RSQ R0.z, R0.z;
RCP R0.z, R0.z;
DP3 R1.w, R0, R2;
DP3 R0.y, fragment.texcoord[1], R0;
MOV_SAT R0.z, -R0.y;
MOV R0.w, c[8].y;
MUL R2.x, R0.w, c[5];
MAX R0.w, R1, c[8].x;
POW R1.w, R0.w, R2.x;
DP3_SAT R0.x, R1, -fragment.texcoord[1];
ADD R0.x, R0, -R0.z;
MAD R0.z, R0.x, c[3].x, R0;
MAD R0.y, R0, c[7].z, c[7].w;
TEX R0.w, fragment.texcoord[0], texture[2], 2D;
MUL R0.w, R1, R0;
TEX R1, fragment.texcoord[0], texture[0], 2D;
TEX R0.x, fragment.texcoord[0], texture[1], 2D;
MAX R2.x, R0.y, c[8];
MUL R0.x, R0.z, R0;
MUL R0.xyz, R0.x, c[2];
MUL R1.xyz, R1, c[1];
MAD R0.xyz, R0, c[7].x, R2.x;
MAD R0.xyz, R1, R0, R0.w;
TEX R0.w, fragment.texcoord[3], texture[4], 2D;
MUL R0.xyz, R0, c[0];
MOV R1.x, c[7];
MAD R0.w, R0, c[7].x, -c[7].x;
MAD R0.w, R0, c[4].x, R1.x;
MUL result.color.xyz, R0, R0.w;
SLT R0.x, R1.w, c[6];
MOV result.color.w, R1;
KIL -R0.x;
END
# 44 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
Vector 0 [_LightColor0]
Vector 1 [_Color]
Vector 2 [_TranslucencyColor]
Float 3 [_TranslucencyViewDependency]
Float 4 [_ShadowStrength]
Float 5 [_Shininess]
Float 6 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_TranslucencyMap] 2D
SetTexture 2 [_GlossMap] 2D
SetTexture 3 [_BumpMap] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 42 ALU, 6 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c7, 0.00000000, 1.00000000, 2.00000000, -1.00000000
def c8, 0.60009766, 0.39990234, 128.00000000, 0
dcl_texcoord0 v0.xy
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
texld r0.yw, v0, s3
mad_pp r1.xy, r0.wyzw, c7.z, c7.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r0.w, r1.z, r1
dp3_pp r0.x, v2, v2
rsq_pp r0.x, r0.x
mul_pp r2.xyz, r0.x, v2
add_pp r0.xyz, r2, v1
dp3_pp r1.z, r0, r0
rsq_pp r1.z, r1.z
add_pp r0.w, -r0, c7.y
mul_pp r0.xyz, r1.z, r0
rsq_pp r0.w, r0.w
rcp_pp r1.z, r0.w
dp3_pp r0.x, r1, r0
mov_pp r0.w, c5.x
mul_pp r1.w, c8.z, r0
max_pp r2.w, r0.x, c7.x
pow_pp r0, r2.w, r1.w
dp3_pp r0.y, v1, r1
texld r1, v0, s0
mov_pp_sat r0.z, -r0.y
texld r0.w, v0, s2
mul_pp r0.w, r0.x, r0
dp3_pp_sat r0.x, r2, -v1
add_pp r0.x, r0, -r0.z
mad_pp r0.z, r0.x, c3.x, r0
mad_pp r0.y, r0, c8.x, c8
texld r0.x, v0, s1
mul_pp r1.xyz, r1, c1
max_pp r2.x, r0.y, c7
mul_pp r0.x, r0.z, r0
mul_pp r0.xyz, r0.x, c2
mad_pp r0.xyz, r0, c7.z, r2.x
mad_pp r0.xyz, r1, r0, r0.w
add_pp r0.w, r1, -c6.x
cmp r1.y, r0.w, c7.x, c7
texld r0.w, v3, s4
mov_pp r2, -r1.y
mul_pp r0.xyz, r0, c0
mov_pp r1.x, c7.z
mad_pp r0.w, r0, c7.z, -c7.z
mad_pp r0.w, r0, c4.x, r1.x
mul_pp oC0.xyz, r0, r0.w
texkill r2.xyzw
mov_pp oC0.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
ConstBuffer "$Globals" 224 // 212 used size, 13 vars
Vector 16 [_LightColor0] 4
Vector 128 [_Color] 4
Vector 144 [_TranslucencyColor] 3
Float 156 [_TranslucencyViewDependency]
Float 160 [_ShadowStrength]
Float 164 [_Shininess]
Float 208 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_TranslucencyMap] 2D 4
SetTexture 2 [_GlossMap] 2D 3
SetTexture 3 [_BumpMap] 2D 2
SetTexture 4 [_LightTexture0] 2D 0
// 45 instructions, 3 temp regs, 0 temp arrays:
// ALU 36 float, 0 int, 0 uint
// TEX 5 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedeokfdifecnnigheponljoofckgjkkmgmabaaaaaadiahaaaaadaaaaaa
cmaaaaaammaaaaaaaaabaaaaejfdeheojiaaaaaaafaaaaaaaiaaaaaaiaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaimaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaaimaaaaaaadaaaaaaaaaaaaaaadaaaaaaabaaaaaa
amamaaaaimaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahahaaaaimaaaaaa
acaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklkl
fdeieefcdaagaaaaeaaaaaaaimabaaaafjaaaaaeegiocaaaaaaaaaaaaoaaaaaa
fkaaaaadaagabaaaaaaaaaaafkaaaaadaagabaaaabaaaaaafkaaaaadaagabaaa
acaaaaaafkaaaaadaagabaaaadaaaaaafkaaaaadaagabaaaaeaaaaaafibiaaae
aahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaaabaaaaaaffffaaaafibiaaae
aahabaaaacaaaaaaffffaaaafibiaaaeaahabaaaadaaaaaaffffaaaafibiaaae
aahabaaaaeaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaagcbaaaadmcbabaaa
abaaaaaagcbaaaadhcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaad
pccabaaaaaaaaaaagiaaaaacadaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaa
abaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaaaaaaaajbcaabaaaabaaaaaa
dkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaanaaaaaadbaaaaahbcaabaaa
abaaaaaaakaabaaaabaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaabaaaaaa
baaaaaahbcaabaaaabaaaaaaegbcbaaaadaaaaaaegbcbaaaadaaaaaaeeaaaaaf
bcaabaaaabaaaaaaakaabaaaabaaaaaadcaaaaajocaabaaaabaaaaaaagbjbaaa
adaaaaaaagaabaaaabaaaaaaagbjbaaaacaaaaaadiaaaaahhcaabaaaacaaaaaa
agaabaaaabaaaaaaegbcbaaaadaaaaaabacaaaaibcaabaaaabaaaaaaegacbaaa
acaaaaaaegbcbaiaebaaaaaaacaaaaaabaaaaaahbcaabaaaacaaaaaajgahbaaa
abaaaaaajgahbaaaabaaaaaaeeaaaaafbcaabaaaacaaaaaaakaabaaaacaaaaaa
diaaaaahocaabaaaabaaaaaafgaobaaaabaaaaaaagaabaaaacaaaaaaefaaaaaj
pcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaadaaaaaaaagabaaaacaaaaaa
dcaaaaapdcaabaaaacaaaaaahgapbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaaaaaaaaaaaaaapaaaaah
icaabaaaacaaaaaaegaabaaaacaaaaaaegaabaaaacaaaaaaddaaaaahicaabaaa
acaaaaaadkaabaaaacaaaaaaabeaaaaaaaaaiadpaaaaaaaiicaabaaaacaaaaaa
dkaabaiaebaaaaaaacaaaaaaabeaaaaaaaaaiadpelaaaaafecaabaaaacaaaaaa
dkaabaaaacaaaaaabaaaaaahccaabaaaabaaaaaaegacbaaaacaaaaaajgahbaaa
abaaaaaabaaaaaahecaabaaaabaaaaaaegacbaaaacaaaaaaegbcbaaaacaaaaaa
deaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaaabeaaaaaaaaaaaaacpaaaaaf
ccaabaaaabaaaaaabkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaabkiacaaa
aaaaaaaaakaaaaaaabeaaaaaaaaaaaeddiaaaaahccaabaaaabaaaaaabkaabaaa
abaaaaaadkaabaaaabaaaaaabjaaaaafccaabaaaabaaaaaabkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaacaaaaaaaagabaaa
adaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaabaaaaaadkaabaaaacaaaaaa
dgcaaaagicaabaaaabaaaaaackaabaiaebaaaaaaabaaaaaadcaaaaajecaabaaa
abaaaaaackaabaaaabaaaaaaabeaaaaajkjjbjdpabeaaaaamnmmmmdodeaaaaah
ecaabaaaabaaaaaackaabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaaakaabaaaabaaaaaadcaaaaakbcaabaaa
abaaaaaadkiacaaaaaaaaaaaajaaaaaaakaabaaaabaaaaaadkaabaaaabaaaaaa
efaaaaajpcaabaaaacaaaaaaegbabaaaabaaaaaaeghobaaaabaaaaaaaagabaaa
aeaaaaaadiaaaaahbcaabaaaabaaaaaaakaabaaaabaaaaaaakaabaaaacaaaaaa
diaaaaaihcaabaaaacaaaaaaagaabaaaabaaaaaaegiccaaaaaaaaaaaajaaaaaa
dcaaaaamncaabaaaabaaaaaaagajbaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaaa
aaaaaaeaaaaaaaeakgakbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaaaaaaaaaiaaaaaadgaaaaaficcabaaaaaaaaaaadkaabaaa
aaaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaaaaaaaaaigadbaaaabaaaaaa
fgafbaaaabaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaa
aaaaaaaaabaaaaaaefaaaaajpcaabaaaabaaaaaaogbkbaaaabaaaaaaeghobaaa
aeaaaaaaaagabaaaaaaaaaaadcaaaaajicaabaaaaaaaaaaadkaabaaaabaaaaaa
abeaaaaaaaaaaaeaabeaaaaaaaaaaamadcaaaaakicaabaaaaaaaaaaaakiacaaa
aaaaaaaaakaaaaaadkaabaaaaaaaaaaaabeaaaaaaaaaaaeadiaaaaahhccabaaa
aaaaaaaapgapbaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "DIRECTIONAL_COOKIE" }
"!!GLES3"
}

}
	}
	Pass {
		Name "ShadowCaster"
		Tags { "LightMode" = "ShadowCaster" }
		Fog {Mode Off}
		ZWrite On ZTest LEqual Cull Off
		Offset 1, 1
Program "vp" {
// Vertex combos: 8
//   opengl - ALU: 54 to 55
//   d3d9 - ALU: 57 to 59
//   d3d11 - ALU: 50 to 51, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_Time]
Vector 14 [unity_LightShadowBias]
Matrix 9 [_Object2World]
Vector 15 [_Scale]
Vector 16 [_SquashPlaneNormal]
Float 17 [_SquashAmount]
Vector 18 [_Wind]
Vector 19 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 55 ALU
PARAM c[22] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..19],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[6];
MAD R1, vertex.normal.x, c[5], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[7], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
MUL R2.xyz, R0, c[15];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[13].y;
MUL R0, R0.xxyy, c[20];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[21].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[21].z;
MUL R1.xyz, R3.y, c[18];
MOV R0.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[21];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[18].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[18], R0;
DP3 R0.x, R1, c[16];
ADD R0.x, R0, c[16].w;
MUL R0.xyz, R0.x, c[16];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[17].x, R1;
DP4 R1.y, R0, c[4];
DP4 R1.x, R0, c[3];
ADD R1.x, R1, c[14];
MAX R1.z, R1.x, -R1.y;
ADD R1.z, R1, -R1.x;
MAD result.position.z, R1, c[14].y, R1.x;
MOV result.position.w, R1.y;
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
END
# 55 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 12 [_Time]
Vector 13 [unity_LightShadowBias]
Matrix 8 [_Object2World]
Vector 14 [_Scale]
Vector 15 [_SquashPlaneNormal]
Float 16 [_SquashAmount]
Vector 17 [_Wind]
Vector 18 [_MainTex_ST]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
def c19, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c20, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c21, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c22, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r1, v2.x, c4, r0
add r0.xyz, r1, c19.x
abs r0.w, v1
add r3.w, -r0, c19.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c11
dp3 r0.w, c19.y, r2
mad r1, v2.z, c6, r1
add r2, r1, c19.x
dp4 r2.y, r2, r2
mul r3.xyz, r0, c14
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c12.y
mul r0, r0.xxyy, c20
frc r0, r0
mad r0, r0, c19.z, c19.w
frc r0, r0
mad r0, r0, c21.x, c21.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c21.x, c21.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r0.xz, r0.xyyw, c22.x
mul r1.xyz, r2.y, c17
mov r0.w, c19.y
mul r1.xyz, v4.y, r1
mul r0.y, v4, c21.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c17.w, r3
mad r1.xyz, v4.x, c17, r0
dp3 r0.x, r1, c15
add r0.x, r0, c15.w
mul r0.xyz, r0.x, c15
add r1.xyz, -r0, r1
mad r0.xyz, r0, c16.x, r1
dp4 r1.x, r0, c2
add r1.x, r1, c13
max r1.y, r1.x, c19.x
add r1.y, r1, -r1.x
mad r1.z, r1.y, c13.y, r1.x
dp4 r1.w, r0, c3
dp4 r1.x, r0, c0
dp4 r1.y, r0, c1
mov o0, r1
mov o1, r1
mad o2.xy, v3, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 96 used size, 8 vars
Vector 80 [unity_LightShadowBias] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 56 instructions, 4 temp regs, 0 temp arrays:
// ALU 50 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiogejeadeebobahgpnndghnogbekedbabaaaaaaeeajaaaaadaaaaaa
cmaaaaaapeaaaaaaemabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheofaaaaaaaacaaaaaa
aiaaaaaadiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaeeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcpaahaaaaeaaaabaapmabaaaafjaaaaae
egiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaaagaaaaaafjaaaaaeegiocaaaadaaaaaaapaaaaaafjaaaaae
egiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaaddccabaaaabaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakdcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaa
aaaaaaaaigbabaiaebaaaaaaacaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaia
mbaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaa
aaaaaaaaegaabaaaaaaaaaaaigbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
bkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaa
aaaaaaaapgapbaaaaaaaaaaaapaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaa
kgakbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaeaaaaaaafaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaacaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaa
aaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
aaaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaa
acaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaa
agafbaaaacaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalp
aaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaa
dcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaaj
pcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaa
dcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaea
diaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaah
dcaabaaaacaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaa
adaaaaaafgafbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaa
adaaaaaaegacbaaaadaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaa
bkaabaaaacaaaaaabkbabaaaaeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaa
jkjjjjdodcaaaaajhcaabaaaabaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaa
aaaaaaaaadaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaa
aeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaa
abaaaaaapgapbaiaebaaaaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
aaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaaaaaaaaai
ecaabaaaaaaaaaaackaabaaaaaaaaaaaakiacaaaacaaaaaaafaaaaaadgaaaaaf
lccabaaaaaaaaaaaegambaaaaaaaaaaadeaaaaahbcaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakeccabaaaaaaaaaaabkiacaaaacaaaaaa
afaaaaaaakaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (glstate_matrix_mvp * tmpvar_15);
  tmpvar_1.xyw = tmpvar_16.xyw;
  tmpvar_1.z = (tmpvar_16.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_16.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec4 diff_ibl_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD1);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture2D (_BumpMap, xlv_TEXCOORD1).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureCube (_DiffCubeIBL, worldNormal_4);
  diff_ibl_3.xyz = tmpvar_8.xyz;
  diff_ibl_3.w = (tmpvar_8.w * ((tmpvar_8.w * ((tmpvar_8.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_3.xyz = (tmpvar_8.xyz * diff_ibl_3.w);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((diff_ibl_3.xyz * ExposureIBL.x) * tmpvar_6);
  tmpvar_2 = tmpvar_9;
  tmpvar_2 = (tmpvar_2 * tmpvar_1.w);
  lowp float x_10;
  x_10 = (tmpvar_5.w - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (glstate_matrix_mvp * tmpvar_15);
  tmpvar_1.xyw = tmpvar_16.xyw;
  tmpvar_1.z = (tmpvar_16.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_16.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec4 diff_ibl_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD1);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD1).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (dot (normal_7.xy, normal_7.xy), 0.0, 1.0)));
  worldNormal_4 = normal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureCube (_DiffCubeIBL, worldNormal_4);
  diff_ibl_3.xyz = tmpvar_8.xyz;
  diff_ibl_3.w = (tmpvar_8.w * ((tmpvar_8.w * ((tmpvar_8.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_3.xyz = (tmpvar_8.xyz * diff_ibl_3.w);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((diff_ibl_3.xyz * ExposureIBL.x) * tmpvar_6);
  tmpvar_2 = tmpvar_9;
  tmpvar_2 = (tmpvar_2 * tmpvar_1.w);
  lowp float x_10;
  x_10 = (tmpvar_5.w - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 651
uniform highp vec4 _MainTex_ST;
#line 663
uniform lowp float _Cutoff;
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 652
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 655
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pos.z += unity_LightShadowBias.x;
    #line 659
    highp float clamped = max( o.pos.z, (o.pos.w * -1.0));
    o.pos.z = mix( o.pos.z, clamped, unity_LightShadowBias.y);
    return o;
}

out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 651
uniform highp vec4 _MainTex_ST;
#line 663
uniform lowp float _Cutoff;
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 640
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 664
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 667
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 671
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 675
    return vec4( 0.0);
}
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_Time]
Vector 14 [_LightPositionRange]
Matrix 9 [_Object2World]
Vector 15 [_Scale]
Vector 16 [_SquashPlaneNormal]
Float 17 [_SquashAmount]
Vector 18 [_Wind]
Vector 19 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 54 ALU
PARAM c[22] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..19],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[6];
MAD R1, vertex.normal.x, c[5], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[7], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
MUL R2.xyz, R0, c[15];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[13].y;
MUL R0, R0.xxyy, c[20];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[21].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[21].z;
MUL R1.xyz, R3.y, c[18];
MOV R0.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[21];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[18].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[18], R0;
DP3 R0.x, R1, c[16];
ADD R0.x, R0, c[16].w;
MUL R0.xyz, R0.x, c[16];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[17].x, R1;
DP4 R1.z, R0, c[11];
DP4 R1.x, R0, c[9];
DP4 R1.y, R0, c[10];
ADD result.texcoord[0].xyz, R1, -c[14];
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
END
# 54 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 12 [_Time]
Vector 13 [_LightPositionRange]
Matrix 8 [_Object2World]
Vector 14 [_Scale]
Vector 15 [_SquashPlaneNormal]
Float 16 [_SquashAmount]
Vector 17 [_Wind]
Vector 18 [_MainTex_ST]
"vs_3_0
; 57 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
def c19, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c20, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c21, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c22, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r1, v2.x, c4, r0
add r0.xyz, r1, c19.x
abs r0.w, v1
add r3.w, -r0, c19.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c11
dp3 r0.w, c19.y, r2
mad r1, v2.z, c6, r1
add r2, r1, c19.x
dp4 r2.y, r2, r2
mul r3.xyz, r0, c14
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c12.y
mul r0, r0.xxyy, c20
frc r0, r0
mad r0, r0, c19.z, c19.w
frc r0, r0
mad r0, r0, c21.x, c21.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c21.x, c21.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r0.xz, r0.xyyw, c22.x
mul r1.xyz, r2.y, c17
mov r0.w, c19.y
mul r1.xyz, v4.y, r1
mul r0.y, v4, c21.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c17.w, r3
mad r1.xyz, v4.x, c17, r0
dp3 r0.x, r1, c15
add r0.x, r0, c15.w
mul r0.xyz, r0.x, c15
add r1.xyz, -r0, r1
mad r0.xyz, r0, c16.x, r1
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add o1.xyz, r1, -c13
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mad o2.xy, v3, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 56 instructions, 4 temp regs, 0 temp arrays:
// ALU 51 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlgjcnbdleeohinamchkbcblaaojgnafcabaaaaaaieajaaaaadaaaaaa
cmaaaaaapeaaaaaageabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheogiaaaaaaadaaaaaa
aiaaaaaafaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaafmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcbiaiaaaaeaaaabaaagacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaaddccabaaaacaaaaaagiaaaaacaeaaaaaabaaaaaai
ccaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
icaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ecaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
ccaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaaaaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadcaaaaakdcaabaaaaaaaaaaaigaabaaaaaaaaaaa
fgafbaaaaaaaaaaaigbabaiaebaaaaaaacaaaaaaaaaaaaaiecaabaaaaaaaaaaa
dkbabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajdcaabaaaaaaaaaaa
kgakbaaaaaaaaaaaegaabaaaaaaaaaaaigbabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaabaaaaaa
agabbaaaaaaaaaaapgapbaaaaaaaaaaaapaaaaaibcaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaakaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
acaaaaaakgakbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaeaaaaaaafaaaaaadgaaaaagbcaabaaaacaaaaaa
dkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaacaaaaaadkiacaaaadaaaaaa
anaaaaaadgaaaaagecaabaaaacaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaak
icaabaaaaaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaaaaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaakbabaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaabkbabaaaafaaaaaabaaaaaah
bcaabaaaacaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaaaaaaaaipcaabaaa
acaaaaaaagafbaaaacaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdo
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialp
diaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaa
acaaaaaadcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaea
aaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaa
aaaaaaahdcaabaaaacaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaai
hcaabaaaadaaaaaafgafbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaaegacbaaaadaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaa
abaaaaaabkaabaaaacaaaaaabkbabaaaaeaaaaaadgaaaaafecaabaaaacaaaaaa
abeaaaaajkjjjjdodcaaaaajhcaabaaaabaaaaaaigaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgipcaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
agbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaai
icaabaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaal
hcaabaaaabaaaaaapgapbaiaebaaaaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaa
egaibaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaaaaaaaaegadbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhccabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaadcaaaaaldccabaaaacaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp float tmpvar_2;
  tmpvar_2 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = _glesNormal.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex + ((tmpvar_4 * glstate_matrix_invtrans_modelview0) * tmpvar_2));
  tmpvar_1.w = tmpvar_5.w;
  tmpvar_1.xyz = (tmpvar_5.xyz * _Scale.xyz);
  highp vec4 pos_6;
  pos_6.w = tmpvar_1.w;
  highp vec3 bend_7;
  vec4 v_8;
  v_8.x = _Object2World[0].w;
  v_8.y = _Object2World[1].w;
  v_8.z = _Object2World[2].w;
  v_8.w = _Object2World[3].w;
  highp float tmpvar_9;
  tmpvar_9 = (dot (v_8.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_1.xyz, vec3((_glesColor.y + tmpvar_9)));
  tmpvar_10.y = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11 = abs(((fract((((fract(((_Time.yy + tmpvar_10).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * tmpvar_11) * (3.0 - (2.0 * tmpvar_11)));
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_12.xz + tmpvar_12.yw);
  bend_7.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_3 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_2))).xz;
  bend_7.y = (_glesMultiTexCoord1.y * 0.3);
  pos_6.xyz = (tmpvar_1.xyz + (((tmpvar_13.xyx * bend_7) + ((_Wind.xyz * tmpvar_13.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_6.xyz = (pos_6.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = mix ((pos_6.xyz - ((dot (_SquashPlaneNormal.xyz, pos_6.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_6.xyz, vec3(_SquashAmount));
  tmpvar_1 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_14).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec4 diff_ibl_4;
  highp vec3 worldNormal_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD1);
  lowp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz * _Color.xyz);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD1).xyz * 2.0) - 1.0);
  worldNormal_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureCube (_DiffCubeIBL, worldNormal_5);
  diff_ibl_4.xyz = tmpvar_9.xyz;
  diff_ibl_4.w = (tmpvar_9.w * ((tmpvar_9.w * ((tmpvar_9.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_4.xyz = (tmpvar_9.xyz * diff_ibl_4.w);
  highp vec3 tmpvar_10;
  tmpvar_10 = ((diff_ibl_4.xyz * ExposureIBL.x) * tmpvar_7);
  tmpvar_3 = tmpvar_10;
  tmpvar_3 = (tmpvar_3 * tmpvar_2.w);
  lowp float x_11;
  x_11 = (tmpvar_6.w - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_12;
  tmpvar_12 = fract((vec4(1.0, 255.0, 65025.0, 1.60581e+08) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 - (tmpvar_12.yzww * 0.00392157));
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp float tmpvar_2;
  tmpvar_2 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = _glesNormal.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex + ((tmpvar_4 * glstate_matrix_invtrans_modelview0) * tmpvar_2));
  tmpvar_1.w = tmpvar_5.w;
  tmpvar_1.xyz = (tmpvar_5.xyz * _Scale.xyz);
  highp vec4 pos_6;
  pos_6.w = tmpvar_1.w;
  highp vec3 bend_7;
  vec4 v_8;
  v_8.x = _Object2World[0].w;
  v_8.y = _Object2World[1].w;
  v_8.z = _Object2World[2].w;
  v_8.w = _Object2World[3].w;
  highp float tmpvar_9;
  tmpvar_9 = (dot (v_8.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_1.xyz, vec3((_glesColor.y + tmpvar_9)));
  tmpvar_10.y = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11 = abs(((fract((((fract(((_Time.yy + tmpvar_10).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * tmpvar_11) * (3.0 - (2.0 * tmpvar_11)));
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_12.xz + tmpvar_12.yw);
  bend_7.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_3 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_2))).xz;
  bend_7.y = (_glesMultiTexCoord1.y * 0.3);
  pos_6.xyz = (tmpvar_1.xyz + (((tmpvar_13.xyx * bend_7) + ((_Wind.xyz * tmpvar_13.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_6.xyz = (pos_6.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = mix ((pos_6.xyz - ((dot (_SquashPlaneNormal.xyz, pos_6.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_6.xyz, vec3(_SquashAmount));
  tmpvar_1 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_14).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec4 diff_ibl_4;
  highp vec3 worldNormal_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD1);
  lowp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz * _Color.xyz);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD1).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_5 = normal_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureCube (_DiffCubeIBL, worldNormal_5);
  diff_ibl_4.xyz = tmpvar_9.xyz;
  diff_ibl_4.w = (tmpvar_9.w * ((tmpvar_9.w * ((tmpvar_9.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_4.xyz = (tmpvar_9.xyz * diff_ibl_4.w);
  highp vec3 tmpvar_10;
  tmpvar_10 = ((diff_ibl_4.xyz * ExposureIBL.x) * tmpvar_7);
  tmpvar_3 = tmpvar_10;
  tmpvar_3 = (tmpvar_3 * tmpvar_2.w);
  lowp float x_11;
  x_11 = (tmpvar_6.w - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_12;
  tmpvar_12 = fract((vec4(1.0, 255.0, 65025.0, 1.60581e+08) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 - (tmpvar_12.yzww * 0.00392157));
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec3 vec;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 653
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 656
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.vec = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 660
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.vec);
    xlv_TEXCOORD1 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec3 vec;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 206
highp vec4 EncodeFloatRGBA( in highp float v ) {
    highp vec4 kEncodeMul = vec4( 1.0, 255.0, 65025.0, 1.60581e+08);
    highp float kEncodeBit = 0.00392157;
    #line 210
    highp vec4 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc -= (enc.yzww * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 640
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 663
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 665
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 669
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 673
    xll_clip_f((o.Alpha - _Cutoff));
    return EncodeFloatRGBA( min( (length(IN.vec) * _LightPositionRange.w), 0.999));
}
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.vec = vec3(xlv_TEXCOORD0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_Time]
Vector 14 [unity_LightShadowBias]
Matrix 9 [_Object2World]
Vector 15 [_Scale]
Vector 16 [_SquashPlaneNormal]
Float 17 [_SquashAmount]
Vector 18 [_Wind]
Vector 19 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 55 ALU
PARAM c[22] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..19],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[6];
MAD R1, vertex.normal.x, c[5], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[7], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
MUL R2.xyz, R0, c[15];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[13].y;
MUL R0, R0.xxyy, c[20];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[21].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[21].z;
MUL R1.xyz, R3.y, c[18];
MOV R0.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[21];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[18].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[18], R0;
DP3 R0.x, R1, c[16];
ADD R0.x, R0, c[16].w;
MUL R0.xyz, R0.x, c[16];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[17].x, R1;
DP4 R1.y, R0, c[4];
DP4 R1.x, R0, c[3];
ADD R1.x, R1, c[14];
MAX R1.z, R1.x, -R1.y;
ADD R1.z, R1, -R1.x;
MAD result.position.z, R1, c[14].y, R1.x;
MOV result.position.w, R1.y;
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
END
# 55 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 12 [_Time]
Vector 13 [unity_LightShadowBias]
Matrix 8 [_Object2World]
Vector 14 [_Scale]
Vector 15 [_SquashPlaneNormal]
Float 16 [_SquashAmount]
Vector 17 [_Wind]
Vector 18 [_MainTex_ST]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
def c19, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c20, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c21, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c22, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r1, v2.x, c4, r0
add r0.xyz, r1, c19.x
abs r0.w, v1
add r3.w, -r0, c19.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c11
dp3 r0.w, c19.y, r2
mad r1, v2.z, c6, r1
add r2, r1, c19.x
dp4 r2.y, r2, r2
mul r3.xyz, r0, c14
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c12.y
mul r0, r0.xxyy, c20
frc r0, r0
mad r0, r0, c19.z, c19.w
frc r0, r0
mad r0, r0, c21.x, c21.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c21.x, c21.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r0.xz, r0.xyyw, c22.x
mul r1.xyz, r2.y, c17
mov r0.w, c19.y
mul r1.xyz, v4.y, r1
mul r0.y, v4, c21.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c17.w, r3
mad r1.xyz, v4.x, c17, r0
dp3 r0.x, r1, c15
add r0.x, r0, c15.w
mul r0.xyz, r0.x, c15
add r1.xyz, -r0, r1
mad r0.xyz, r0, c16.x, r1
dp4 r1.x, r0, c2
add r1.x, r1, c13
max r1.y, r1.x, c19.x
add r1.y, r1, -r1.x
mad r1.z, r1.y, c13.y, r1.x
dp4 r1.w, r0, c3
dp4 r1.x, r0, c0
dp4 r1.y, r0, c1
mov o0, r1
mov o1, r1
mad o2.xy, v3, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 96 used size, 8 vars
Vector 80 [unity_LightShadowBias] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 56 instructions, 4 temp regs, 0 temp arrays:
// ALU 50 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiogejeadeebobahgpnndghnogbekedbabaaaaaaeeajaaaaadaaaaaa
cmaaaaaapeaaaaaaemabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheofaaaaaaaacaaaaaa
aiaaaaaadiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaeeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcpaahaaaaeaaaabaapmabaaaafjaaaaae
egiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaaagaaaaaafjaaaaaeegiocaaaadaaaaaaapaaaaaafjaaaaae
egiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaaddccabaaaabaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakdcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaa
aaaaaaaaigbabaiaebaaaaaaacaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaia
mbaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaa
aaaaaaaaegaabaaaaaaaaaaaigbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
bkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaa
aaaaaaaapgapbaaaaaaaaaaaapaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaa
kgakbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaeaaaaaaafaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaacaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaa
aaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
aaaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaa
acaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaa
agafbaaaacaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalp
aaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaa
dcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaaj
pcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaa
dcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaea
diaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaah
dcaabaaaacaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaa
adaaaaaafgafbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaa
adaaaaaaegacbaaaadaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaa
bkaabaaaacaaaaaabkbabaaaaeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaa
jkjjjjdodcaaaaajhcaabaaaabaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaa
aaaaaaaaadaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaa
aeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaa
abaaaaaapgapbaiaebaaaaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
aaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaaaaaaaaai
ecaabaaaaaaaaaaackaabaaaaaaaaaaaakiacaaaacaaaaaaafaaaaaadgaaaaaf
lccabaaaaaaaaaaaegambaaaaaaaaaaadeaaaaahbcaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakeccabaaaaaaaaaaabkiacaaaacaaaaaa
afaaaaaaakaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (glstate_matrix_mvp * tmpvar_15);
  tmpvar_1.xyw = tmpvar_16.xyw;
  tmpvar_1.z = (tmpvar_16.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_16.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
void main ()
{
  lowp float x_1;
  x_1 = (texture2D (_MainTex, xlv_TEXCOORD1).w - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (glstate_matrix_mvp * tmpvar_15);
  tmpvar_1.xyw = tmpvar_16.xyw;
  tmpvar_1.z = (tmpvar_16.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_16.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
uniform lowp float _Cutoff;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec3 normal_1;
  normal_1.xy = ((texture2D (_BumpMap, xlv_TEXCOORD1).wy * 2.0) - 1.0);
  normal_1.z = sqrt((1.0 - clamp (dot (normal_1.xy, normal_1.xy), 0.0, 1.0)));
  lowp float x_2;
  x_2 = (texture2D (_MainTex, xlv_TEXCOORD1).w - _Cutoff);
  if ((x_2 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 646
uniform highp vec4 _MainTex_ST;
#line 658
uniform lowp float _Cutoff;
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 647
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 650
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pos.z += unity_LightShadowBias.x;
    #line 654
    highp float clamped = max( o.pos.z, (o.pos.w * -1.0));
    o.pos.z = mix( o.pos.z, clamped, unity_LightShadowBias.y);
    return o;
}

out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 646
uniform highp vec4 _MainTex_ST;
#line 658
uniform lowp float _Cutoff;
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 659
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 662
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 666
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 670
    return vec4( 0.0);
}
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_Time]
Vector 14 [_LightPositionRange]
Matrix 9 [_Object2World]
Vector 15 [_Scale]
Vector 16 [_SquashPlaneNormal]
Float 17 [_SquashAmount]
Vector 18 [_Wind]
Vector 19 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 54 ALU
PARAM c[22] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..19],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[6];
MAD R1, vertex.normal.x, c[5], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[7], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
MUL R2.xyz, R0, c[15];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[13].y;
MUL R0, R0.xxyy, c[20];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[21].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[21].z;
MUL R1.xyz, R3.y, c[18];
MOV R0.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[21];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[18].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[18], R0;
DP3 R0.x, R1, c[16];
ADD R0.x, R0, c[16].w;
MUL R0.xyz, R0.x, c[16];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[17].x, R1;
DP4 R1.z, R0, c[11];
DP4 R1.x, R0, c[9];
DP4 R1.y, R0, c[10];
ADD result.texcoord[0].xyz, R1, -c[14];
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
END
# 54 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 12 [_Time]
Vector 13 [_LightPositionRange]
Matrix 8 [_Object2World]
Vector 14 [_Scale]
Vector 15 [_SquashPlaneNormal]
Float 16 [_SquashAmount]
Vector 17 [_Wind]
Vector 18 [_MainTex_ST]
"vs_3_0
; 57 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
def c19, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c20, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c21, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c22, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r1, v2.x, c4, r0
add r0.xyz, r1, c19.x
abs r0.w, v1
add r3.w, -r0, c19.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c11
dp3 r0.w, c19.y, r2
mad r1, v2.z, c6, r1
add r2, r1, c19.x
dp4 r2.y, r2, r2
mul r3.xyz, r0, c14
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c12.y
mul r0, r0.xxyy, c20
frc r0, r0
mad r0, r0, c19.z, c19.w
frc r0, r0
mad r0, r0, c21.x, c21.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c21.x, c21.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r0.xz, r0.xyyw, c22.x
mul r1.xyz, r2.y, c17
mov r0.w, c19.y
mul r1.xyz, v4.y, r1
mul r0.y, v4, c21.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c17.w, r3
mad r1.xyz, v4.x, c17, r0
dp3 r0.x, r1, c15
add r0.x, r0, c15.w
mul r0.xyz, r0.x, c15
add r1.xyz, -r0, r1
mad r0.xyz, r0, c16.x, r1
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add o1.xyz, r1, -c13
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mad o2.xy, v3, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 56 instructions, 4 temp regs, 0 temp arrays:
// ALU 51 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlgjcnbdleeohinamchkbcblaaojgnafcabaaaaaaieajaaaaadaaaaaa
cmaaaaaapeaaaaaageabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheogiaaaaaaadaaaaaa
aiaaaaaafaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaafmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcbiaiaaaaeaaaabaaagacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaaddccabaaaacaaaaaagiaaaaacaeaaaaaabaaaaaai
ccaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
icaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ecaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
ccaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaaaaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadcaaaaakdcaabaaaaaaaaaaaigaabaaaaaaaaaaa
fgafbaaaaaaaaaaaigbabaiaebaaaaaaacaaaaaaaaaaaaaiecaabaaaaaaaaaaa
dkbabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajdcaabaaaaaaaaaaa
kgakbaaaaaaaaaaaegaabaaaaaaaaaaaigbabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaabaaaaaa
agabbaaaaaaaaaaapgapbaaaaaaaaaaaapaaaaaibcaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaakaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
acaaaaaakgakbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaeaaaaaaafaaaaaadgaaaaagbcaabaaaacaaaaaa
dkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaacaaaaaadkiacaaaadaaaaaa
anaaaaaadgaaaaagecaabaaaacaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaak
icaabaaaaaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaaaaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaakbabaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaabkbabaaaafaaaaaabaaaaaah
bcaabaaaacaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaaaaaaaaipcaabaaa
acaaaaaaagafbaaaacaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdo
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialp
diaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaa
acaaaaaadcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaea
aaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaa
aaaaaaahdcaabaaaacaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaai
hcaabaaaadaaaaaafgafbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaaegacbaaaadaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaa
abaaaaaabkaabaaaacaaaaaabkbabaaaaeaaaaaadgaaaaafecaabaaaacaaaaaa
abeaaaaajkjjjjdodcaaaaajhcaabaaaabaaaaaaigaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgipcaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
agbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaai
icaabaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaal
hcaabaaaabaaaaaapgapbaiaebaaaaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaa
egaibaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaaaaaaaaegadbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhccabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaadcaaaaaldccabaaaacaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp float tmpvar_2;
  tmpvar_2 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = _glesNormal.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex + ((tmpvar_4 * glstate_matrix_invtrans_modelview0) * tmpvar_2));
  tmpvar_1.w = tmpvar_5.w;
  tmpvar_1.xyz = (tmpvar_5.xyz * _Scale.xyz);
  highp vec4 pos_6;
  pos_6.w = tmpvar_1.w;
  highp vec3 bend_7;
  vec4 v_8;
  v_8.x = _Object2World[0].w;
  v_8.y = _Object2World[1].w;
  v_8.z = _Object2World[2].w;
  v_8.w = _Object2World[3].w;
  highp float tmpvar_9;
  tmpvar_9 = (dot (v_8.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_1.xyz, vec3((_glesColor.y + tmpvar_9)));
  tmpvar_10.y = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11 = abs(((fract((((fract(((_Time.yy + tmpvar_10).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * tmpvar_11) * (3.0 - (2.0 * tmpvar_11)));
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_12.xz + tmpvar_12.yw);
  bend_7.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_3 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_2))).xz;
  bend_7.y = (_glesMultiTexCoord1.y * 0.3);
  pos_6.xyz = (tmpvar_1.xyz + (((tmpvar_13.xyx * bend_7) + ((_Wind.xyz * tmpvar_13.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_6.xyz = (pos_6.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = mix ((pos_6.xyz - ((dot (_SquashPlaneNormal.xyz, pos_6.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_6.xyz, vec3(_SquashAmount));
  tmpvar_1 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_14).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp float x_2;
  x_2 = (texture2D (_MainTex, xlv_TEXCOORD1).w - _Cutoff);
  if ((x_2 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.60581e+08) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 - (tmpvar_3.yzww * 0.00392157));
  tmpvar_1 = tmpvar_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp float tmpvar_2;
  tmpvar_2 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = _glesNormal.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex + ((tmpvar_4 * glstate_matrix_invtrans_modelview0) * tmpvar_2));
  tmpvar_1.w = tmpvar_5.w;
  tmpvar_1.xyz = (tmpvar_5.xyz * _Scale.xyz);
  highp vec4 pos_6;
  pos_6.w = tmpvar_1.w;
  highp vec3 bend_7;
  vec4 v_8;
  v_8.x = _Object2World[0].w;
  v_8.y = _Object2World[1].w;
  v_8.z = _Object2World[2].w;
  v_8.w = _Object2World[3].w;
  highp float tmpvar_9;
  tmpvar_9 = (dot (v_8.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_1.xyz, vec3((_glesColor.y + tmpvar_9)));
  tmpvar_10.y = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11 = abs(((fract((((fract(((_Time.yy + tmpvar_10).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * tmpvar_11) * (3.0 - (2.0 * tmpvar_11)));
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_12.xz + tmpvar_12.yw);
  bend_7.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_3 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_2))).xz;
  bend_7.y = (_glesMultiTexCoord1.y * 0.3);
  pos_6.xyz = (tmpvar_1.xyz + (((tmpvar_13.xyx * bend_7) + ((_Wind.xyz * tmpvar_13.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_6.xyz = (pos_6.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = mix ((pos_6.xyz - ((dot (_SquashPlaneNormal.xyz, pos_6.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_6.xyz, vec3(_SquashAmount));
  tmpvar_1 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_14).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec3 normal_2;
  normal_2.xy = ((texture2D (_BumpMap, xlv_TEXCOORD1).wy * 2.0) - 1.0);
  normal_2.z = sqrt((1.0 - clamp (dot (normal_2.xy, normal_2.xy), 0.0, 1.0)));
  lowp float x_3;
  x_3 = (texture2D (_MainTex, xlv_TEXCOORD1).w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_4;
  tmpvar_4 = fract((vec4(1.0, 255.0, 65025.0, 1.60581e+08) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 - (tmpvar_4.yzww * 0.00392157));
  tmpvar_1 = tmpvar_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec3 vec;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 647
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 648
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 651
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.vec = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 655
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.vec);
    xlv_TEXCOORD1 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec3 vec;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 647
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 206
highp vec4 EncodeFloatRGBA( in highp float v ) {
    highp vec4 kEncodeMul = vec4( 1.0, 255.0, 65025.0, 1.60581e+08);
    highp float kEncodeBit = 0.00392157;
    #line 210
    highp vec4 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc -= (enc.yzww * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 658
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 660
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 664
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 668
    xll_clip_f((o.Alpha - _Cutoff));
    return EncodeFloatRGBA( min( (length(IN.vec) * _LightPositionRange.w), 0.999));
}
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.vec = vec3(xlv_TEXCOORD0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_Time]
Vector 14 [unity_LightShadowBias]
Matrix 9 [_Object2World]
Vector 15 [_Scale]
Vector 16 [_SquashPlaneNormal]
Float 17 [_SquashAmount]
Vector 18 [_Wind]
Vector 19 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 55 ALU
PARAM c[22] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..19],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[6];
MAD R1, vertex.normal.x, c[5], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[7], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
MUL R2.xyz, R0, c[15];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[13].y;
MUL R0, R0.xxyy, c[20];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[21].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[21].z;
MUL R1.xyz, R3.y, c[18];
MOV R0.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[21];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[18].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[18], R0;
DP3 R0.x, R1, c[16];
ADD R0.x, R0, c[16].w;
MUL R0.xyz, R0.x, c[16];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[17].x, R1;
DP4 R1.y, R0, c[4];
DP4 R1.x, R0, c[3];
ADD R1.x, R1, c[14];
MAX R1.z, R1.x, -R1.y;
ADD R1.z, R1, -R1.x;
MAD result.position.z, R1, c[14].y, R1.x;
MOV result.position.w, R1.y;
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
END
# 55 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 12 [_Time]
Vector 13 [unity_LightShadowBias]
Matrix 8 [_Object2World]
Vector 14 [_Scale]
Vector 15 [_SquashPlaneNormal]
Float 16 [_SquashAmount]
Vector 17 [_Wind]
Vector 18 [_MainTex_ST]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
def c19, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c20, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c21, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c22, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r1, v2.x, c4, r0
add r0.xyz, r1, c19.x
abs r0.w, v1
add r3.w, -r0, c19.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c11
dp3 r0.w, c19.y, r2
mad r1, v2.z, c6, r1
add r2, r1, c19.x
dp4 r2.y, r2, r2
mul r3.xyz, r0, c14
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c12.y
mul r0, r0.xxyy, c20
frc r0, r0
mad r0, r0, c19.z, c19.w
frc r0, r0
mad r0, r0, c21.x, c21.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c21.x, c21.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r0.xz, r0.xyyw, c22.x
mul r1.xyz, r2.y, c17
mov r0.w, c19.y
mul r1.xyz, v4.y, r1
mul r0.y, v4, c21.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c17.w, r3
mad r1.xyz, v4.x, c17, r0
dp3 r0.x, r1, c15
add r0.x, r0, c15.w
mul r0.xyz, r0.x, c15
add r1.xyz, -r0, r1
mad r0.xyz, r0, c16.x, r1
dp4 r1.x, r0, c2
add r1.x, r1, c13
max r1.y, r1.x, c19.x
add r1.y, r1, -r1.x
mad r1.z, r1.y, c13.y, r1.x
dp4 r1.w, r0, c3
dp4 r1.x, r0, c0
dp4 r1.y, r0, c1
mov o0, r1
mov o1, r1
mad o2.xy, v3, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 96 used size, 8 vars
Vector 80 [unity_LightShadowBias] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 56 instructions, 4 temp regs, 0 temp arrays:
// ALU 50 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiogejeadeebobahgpnndghnogbekedbabaaaaaaeeajaaaaadaaaaaa
cmaaaaaapeaaaaaaemabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheofaaaaaaaacaaaaaa
aiaaaaaadiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaeeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcpaahaaaaeaaaabaapmabaaaafjaaaaae
egiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaaagaaaaaafjaaaaaeegiocaaaadaaaaaaapaaaaaafjaaaaae
egiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaaddccabaaaabaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakdcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaa
aaaaaaaaigbabaiaebaaaaaaacaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaia
mbaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaa
aaaaaaaaegaabaaaaaaaaaaaigbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
bkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaa
aaaaaaaapgapbaaaaaaaaaaaapaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaa
kgakbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaeaaaaaaafaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaacaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaa
aaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
aaaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaa
acaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaa
agafbaaaacaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalp
aaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaa
dcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaaj
pcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaa
dcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaea
diaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaah
dcaabaaaacaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaa
adaaaaaafgafbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaa
adaaaaaaegacbaaaadaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaa
bkaabaaaacaaaaaabkbabaaaaeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaa
jkjjjjdodcaaaaajhcaabaaaabaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaa
aaaaaaaaadaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaa
aeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaa
abaaaaaapgapbaiaebaaaaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
aaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaaaaaaaaai
ecaabaaaaaaaaaaackaabaaaaaaaaaaaakiacaaaacaaaaaaafaaaaaadgaaaaaf
lccabaaaaaaaaaaaegambaaaaaaaaaaadeaaaaahbcaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakeccabaaaaaaaaaaabkiacaaaacaaaaaa
afaaaaaaakaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (glstate_matrix_mvp * tmpvar_15);
  tmpvar_1.xyw = tmpvar_16.xyw;
  tmpvar_1.z = (tmpvar_16.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_16.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec4 diff_ibl_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD1);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture2D (_BumpMap, xlv_TEXCOORD1).xyz * 2.0) - 1.0);
  worldNormal_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureCube (_DiffCubeIBL, worldNormal_4);
  diff_ibl_3.w = tmpvar_8.w;
  diff_ibl_3.xyz = (tmpvar_8.xyz * tmpvar_8.w);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((diff_ibl_3.xyz * ExposureIBL.x) * tmpvar_6);
  tmpvar_2 = tmpvar_9;
  tmpvar_2 = (tmpvar_2 * tmpvar_1.w);
  lowp float x_10;
  x_10 = (tmpvar_5.w - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (glstate_matrix_mvp * tmpvar_15);
  tmpvar_1.xyw = tmpvar_16.xyw;
  tmpvar_1.z = (tmpvar_16.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_16.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec3 tmpvar_2;
  lowp vec4 diff_ibl_3;
  highp vec3 worldNormal_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD1);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5.xyz * _Color.xyz);
  lowp vec3 normal_7;
  normal_7.xy = ((texture2D (_BumpMap, xlv_TEXCOORD1).wy * 2.0) - 1.0);
  normal_7.z = sqrt((1.0 - clamp (dot (normal_7.xy, normal_7.xy), 0.0, 1.0)));
  worldNormal_4 = normal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = textureCube (_DiffCubeIBL, worldNormal_4);
  diff_ibl_3.w = tmpvar_8.w;
  diff_ibl_3.xyz = (tmpvar_8.xyz * tmpvar_8.w);
  highp vec3 tmpvar_9;
  tmpvar_9 = ((diff_ibl_3.xyz * ExposureIBL.x) * tmpvar_6);
  tmpvar_2 = tmpvar_9;
  tmpvar_2 = (tmpvar_2 * tmpvar_1.w);
  lowp float x_10;
  x_10 = (tmpvar_5.w - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 644
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 650
uniform highp vec4 _MainTex_ST;
#line 662
uniform lowp float _Cutoff;
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 651
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 654
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pos.z += unity_LightShadowBias.x;
    #line 658
    highp float clamped = max( o.pos.z, (o.pos.w * -1.0));
    o.pos.z = mix( o.pos.z, clamped, unity_LightShadowBias.y);
    return o;
}

out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 644
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 650
uniform highp vec4 _MainTex_ST;
#line 662
uniform lowp float _Cutoff;
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 640
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 663
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 666
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 670
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 674
    return vec4( 0.0);
}
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_Time]
Vector 14 [_LightPositionRange]
Matrix 9 [_Object2World]
Vector 15 [_Scale]
Vector 16 [_SquashPlaneNormal]
Float 17 [_SquashAmount]
Vector 18 [_Wind]
Vector 19 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 54 ALU
PARAM c[22] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..19],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[6];
MAD R1, vertex.normal.x, c[5], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[7], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
MUL R2.xyz, R0, c[15];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[13].y;
MUL R0, R0.xxyy, c[20];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[21].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[21].z;
MUL R1.xyz, R3.y, c[18];
MOV R0.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[21];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[18].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[18], R0;
DP3 R0.x, R1, c[16];
ADD R0.x, R0, c[16].w;
MUL R0.xyz, R0.x, c[16];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[17].x, R1;
DP4 R1.z, R0, c[11];
DP4 R1.x, R0, c[9];
DP4 R1.y, R0, c[10];
ADD result.texcoord[0].xyz, R1, -c[14];
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
END
# 54 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 12 [_Time]
Vector 13 [_LightPositionRange]
Matrix 8 [_Object2World]
Vector 14 [_Scale]
Vector 15 [_SquashPlaneNormal]
Float 16 [_SquashAmount]
Vector 17 [_Wind]
Vector 18 [_MainTex_ST]
"vs_3_0
; 57 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
def c19, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c20, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c21, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c22, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r1, v2.x, c4, r0
add r0.xyz, r1, c19.x
abs r0.w, v1
add r3.w, -r0, c19.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c11
dp3 r0.w, c19.y, r2
mad r1, v2.z, c6, r1
add r2, r1, c19.x
dp4 r2.y, r2, r2
mul r3.xyz, r0, c14
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c12.y
mul r0, r0.xxyy, c20
frc r0, r0
mad r0, r0, c19.z, c19.w
frc r0, r0
mad r0, r0, c21.x, c21.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c21.x, c21.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r0.xz, r0.xyyw, c22.x
mul r1.xyz, r2.y, c17
mov r0.w, c19.y
mul r1.xyz, v4.y, r1
mul r0.y, v4, c21.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c17.w, r3
mad r1.xyz, v4.x, c17, r0
dp3 r0.x, r1, c15
add r0.x, r0, c15.w
mul r0.xyz, r0.x, c15
add r1.xyz, -r0, r1
mad r0.xyz, r0, c16.x, r1
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add o1.xyz, r1, -c13
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mad o2.xy, v3, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 56 instructions, 4 temp regs, 0 temp arrays:
// ALU 51 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlgjcnbdleeohinamchkbcblaaojgnafcabaaaaaaieajaaaaadaaaaaa
cmaaaaaapeaaaaaageabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheogiaaaaaaadaaaaaa
aiaaaaaafaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaafmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcbiaiaaaaeaaaabaaagacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaaddccabaaaacaaaaaagiaaaaacaeaaaaaabaaaaaai
ccaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
icaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ecaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
ccaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaaaaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadcaaaaakdcaabaaaaaaaaaaaigaabaaaaaaaaaaa
fgafbaaaaaaaaaaaigbabaiaebaaaaaaacaaaaaaaaaaaaaiecaabaaaaaaaaaaa
dkbabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajdcaabaaaaaaaaaaa
kgakbaaaaaaaaaaaegaabaaaaaaaaaaaigbabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaabaaaaaa
agabbaaaaaaaaaaapgapbaaaaaaaaaaaapaaaaaibcaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaakaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
acaaaaaakgakbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaeaaaaaaafaaaaaadgaaaaagbcaabaaaacaaaaaa
dkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaacaaaaaadkiacaaaadaaaaaa
anaaaaaadgaaaaagecaabaaaacaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaak
icaabaaaaaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaaaaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaakbabaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaabkbabaaaafaaaaaabaaaaaah
bcaabaaaacaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaaaaaaaaipcaabaaa
acaaaaaaagafbaaaacaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdo
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialp
diaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaa
acaaaaaadcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaea
aaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaa
aaaaaaahdcaabaaaacaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaai
hcaabaaaadaaaaaafgafbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaaegacbaaaadaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaa
abaaaaaabkaabaaaacaaaaaabkbabaaaaeaaaaaadgaaaaafecaabaaaacaaaaaa
abeaaaaajkjjjjdodcaaaaajhcaabaaaabaaaaaaigaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgipcaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
agbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaai
icaabaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaal
hcaabaaaabaaaaaapgapbaiaebaaaaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaa
egaibaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaaaaaaaaegadbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhccabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaadcaaaaaldccabaaaacaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp float tmpvar_2;
  tmpvar_2 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = _glesNormal.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex + ((tmpvar_4 * glstate_matrix_invtrans_modelview0) * tmpvar_2));
  tmpvar_1.w = tmpvar_5.w;
  tmpvar_1.xyz = (tmpvar_5.xyz * _Scale.xyz);
  highp vec4 pos_6;
  pos_6.w = tmpvar_1.w;
  highp vec3 bend_7;
  vec4 v_8;
  v_8.x = _Object2World[0].w;
  v_8.y = _Object2World[1].w;
  v_8.z = _Object2World[2].w;
  v_8.w = _Object2World[3].w;
  highp float tmpvar_9;
  tmpvar_9 = (dot (v_8.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_1.xyz, vec3((_glesColor.y + tmpvar_9)));
  tmpvar_10.y = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11 = abs(((fract((((fract(((_Time.yy + tmpvar_10).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * tmpvar_11) * (3.0 - (2.0 * tmpvar_11)));
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_12.xz + tmpvar_12.yw);
  bend_7.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_3 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_2))).xz;
  bend_7.y = (_glesMultiTexCoord1.y * 0.3);
  pos_6.xyz = (tmpvar_1.xyz + (((tmpvar_13.xyx * bend_7) + ((_Wind.xyz * tmpvar_13.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_6.xyz = (pos_6.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = mix ((pos_6.xyz - ((dot (_SquashPlaneNormal.xyz, pos_6.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_6.xyz, vec3(_SquashAmount));
  tmpvar_1 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_14).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec4 diff_ibl_4;
  highp vec3 worldNormal_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD1);
  lowp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz * _Color.xyz);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((texture2D (_BumpMap, xlv_TEXCOORD1).xyz * 2.0) - 1.0);
  worldNormal_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureCube (_DiffCubeIBL, worldNormal_5);
  diff_ibl_4.w = tmpvar_9.w;
  diff_ibl_4.xyz = (tmpvar_9.xyz * tmpvar_9.w);
  highp vec3 tmpvar_10;
  tmpvar_10 = ((diff_ibl_4.xyz * ExposureIBL.x) * tmpvar_7);
  tmpvar_3 = tmpvar_10;
  tmpvar_3 = (tmpvar_3 * tmpvar_2.w);
  lowp float x_11;
  x_11 = (tmpvar_6.w - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_12;
  tmpvar_12 = fract((vec4(1.0, 255.0, 65025.0, 1.60581e+08) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 - (tmpvar_12.yzww * 0.00392157));
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp float tmpvar_2;
  tmpvar_2 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = _glesNormal.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex + ((tmpvar_4 * glstate_matrix_invtrans_modelview0) * tmpvar_2));
  tmpvar_1.w = tmpvar_5.w;
  tmpvar_1.xyz = (tmpvar_5.xyz * _Scale.xyz);
  highp vec4 pos_6;
  pos_6.w = tmpvar_1.w;
  highp vec3 bend_7;
  vec4 v_8;
  v_8.x = _Object2World[0].w;
  v_8.y = _Object2World[1].w;
  v_8.z = _Object2World[2].w;
  v_8.w = _Object2World[3].w;
  highp float tmpvar_9;
  tmpvar_9 = (dot (v_8.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_1.xyz, vec3((_glesColor.y + tmpvar_9)));
  tmpvar_10.y = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11 = abs(((fract((((fract(((_Time.yy + tmpvar_10).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * tmpvar_11) * (3.0 - (2.0 * tmpvar_11)));
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_12.xz + tmpvar_12.yw);
  bend_7.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_3 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_2))).xz;
  bend_7.y = (_glesMultiTexCoord1.y * 0.3);
  pos_6.xyz = (tmpvar_1.xyz + (((tmpvar_13.xyx * bend_7) + ((_Wind.xyz * tmpvar_13.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_6.xyz = (pos_6.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = mix ((pos_6.xyz - ((dot (_SquashPlaneNormal.xyz, pos_6.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_6.xyz, vec3(_SquashAmount));
  tmpvar_1 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_14).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec4 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec4 diff_ibl_4;
  highp vec3 worldNormal_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD1);
  lowp vec3 tmpvar_7;
  tmpvar_7 = (tmpvar_6.xyz * _Color.xyz);
  lowp vec3 normal_8;
  normal_8.xy = ((texture2D (_BumpMap, xlv_TEXCOORD1).wy * 2.0) - 1.0);
  normal_8.z = sqrt((1.0 - clamp (dot (normal_8.xy, normal_8.xy), 0.0, 1.0)));
  worldNormal_5 = normal_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = textureCube (_DiffCubeIBL, worldNormal_5);
  diff_ibl_4.w = tmpvar_9.w;
  diff_ibl_4.xyz = (tmpvar_9.xyz * tmpvar_9.w);
  highp vec3 tmpvar_10;
  tmpvar_10 = ((diff_ibl_4.xyz * ExposureIBL.x) * tmpvar_7);
  tmpvar_3 = tmpvar_10;
  tmpvar_3 = (tmpvar_3 * tmpvar_2.w);
  lowp float x_11;
  x_11 = (tmpvar_6.w - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_12;
  tmpvar_12 = fract((vec4(1.0, 255.0, 65025.0, 1.60581e+08) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_13;
  tmpvar_13 = (tmpvar_12 - (tmpvar_12.yzww * 0.00392157));
  tmpvar_1 = tmpvar_13;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 644
struct v2f_surf {
    highp vec4 pos;
    highp vec3 vec;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 651
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 652
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 655
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.vec = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 659
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.vec);
    xlv_TEXCOORD1 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 644
struct v2f_surf {
    highp vec4 pos;
    highp vec3 vec;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 628
#line 651
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 206
highp vec4 EncodeFloatRGBA( in highp float v ) {
    highp vec4 kEncodeMul = vec4( 1.0, 255.0, 65025.0, 1.60581e+08);
    highp float kEncodeBit = 0.00392157;
    #line 210
    highp vec4 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc -= (enc.yzww * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 640
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 662
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 664
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 668
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 672
    xll_clip_f((o.Alpha - _Cutoff));
    return EncodeFloatRGBA( min( (length(IN.vec) * _LightPositionRange.w), 0.999));
}
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.vec = vec3(xlv_TEXCOORD0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_Time]
Vector 14 [unity_LightShadowBias]
Matrix 9 [_Object2World]
Vector 15 [_Scale]
Vector 16 [_SquashPlaneNormal]
Float 17 [_SquashAmount]
Vector 18 [_Wind]
Vector 19 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 55 ALU
PARAM c[22] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..19],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[6];
MAD R1, vertex.normal.x, c[5], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[7], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
MUL R2.xyz, R0, c[15];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[13].y;
MUL R0, R0.xxyy, c[20];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[21].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[21].z;
MUL R1.xyz, R3.y, c[18];
MOV R0.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[21];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[18].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[18], R0;
DP3 R0.x, R1, c[16];
ADD R0.x, R0, c[16].w;
MUL R0.xyz, R0.x, c[16];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[17].x, R1;
DP4 R1.y, R0, c[4];
DP4 R1.x, R0, c[3];
ADD R1.x, R1, c[14];
MAX R1.z, R1.x, -R1.y;
ADD R1.z, R1, -R1.x;
MAD result.position.z, R1, c[14].y, R1.x;
MOV result.position.w, R1.y;
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
END
# 55 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 12 [_Time]
Vector 13 [unity_LightShadowBias]
Matrix 8 [_Object2World]
Vector 14 [_Scale]
Vector 15 [_SquashPlaneNormal]
Float 16 [_SquashAmount]
Vector 17 [_Wind]
Vector 18 [_MainTex_ST]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
def c19, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c20, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c21, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c22, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r1, v2.x, c4, r0
add r0.xyz, r1, c19.x
abs r0.w, v1
add r3.w, -r0, c19.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c11
dp3 r0.w, c19.y, r2
mad r1, v2.z, c6, r1
add r2, r1, c19.x
dp4 r2.y, r2, r2
mul r3.xyz, r0, c14
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c12.y
mul r0, r0.xxyy, c20
frc r0, r0
mad r0, r0, c19.z, c19.w
frc r0, r0
mad r0, r0, c21.x, c21.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c21.x, c21.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r0.xz, r0.xyyw, c22.x
mul r1.xyz, r2.y, c17
mov r0.w, c19.y
mul r1.xyz, v4.y, r1
mul r0.y, v4, c21.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c17.w, r3
mad r1.xyz, v4.x, c17, r0
dp3 r0.x, r1, c15
add r0.x, r0, c15.w
mul r0.xyz, r0.x, c15
add r1.xyz, -r0, r1
mad r0.xyz, r0, c16.x, r1
dp4 r1.x, r0, c2
add r1.x, r1, c13
max r1.y, r1.x, c19.x
add r1.y, r1, -r1.x
mad r1.z, r1.y, c13.y, r1.x
dp4 r1.w, r0, c3
dp4 r1.x, r0, c0
dp4 r1.y, r0, c1
mov o0, r1
mov o1, r1
mad o2.xy, v3, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 96 used size, 8 vars
Vector 80 [unity_LightShadowBias] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 56 instructions, 4 temp regs, 0 temp arrays:
// ALU 50 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedjiogejeadeebobahgpnndghnogbekedbabaaaaaaeeajaaaaadaaaaaa
cmaaaaaapeaaaaaaemabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheofaaaaaaaacaaaaaa
aiaaaaaadiaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaeeaaaaaa
abaaaaaaaaaaaaaaadaaaaaaabaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaa
feeffiedepepfceeaaklklklfdeieefcpaahaaaaeaaaabaapmabaaaafjaaaaae
egiocaaaaaaaaaaaajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaae
egiocaaaacaaaaaaagaaaaaafjaaaaaeegiocaaaadaaaaaaapaaaaaafjaaaaae
egiocaaaaeaaaaaaamaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaa
abaaaaaafpaaaaadhcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaad
dcbabaaaaeaaaaaafpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaa
abaaaaaagfaaaaaddccabaaaabaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaa
aaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaa
aaaaaaaaegaobaaaaaaaaaaaegaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaa
bkaabaaaaaaaaaaadcaaaaakdcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaa
aaaaaaaaigbabaiaebaaaaaaacaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaia
mbaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaa
aaaaaaaaegaabaaaaaaaaaaaigbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaa
bkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaa
aaaaaaaapgapbaaaaaaaaaaaapaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaa
egiacaaaadaaaaaaakaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaa
kgakbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaaeaaaaaaafaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaa
adaaaaaaamaaaaaadgaaaaagccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaa
dgaaaaagecaabaaaacaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaa
aaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaa
aaaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaah
icaabaaaaaaaaaaabkaabaaaacaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaa
acaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaa
agafbaaaacaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdobkaaaaaf
pcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaa
acaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalp
aaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaa
dcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialpdiaaaaaj
pcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaa
dcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaea
diaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaah
dcaabaaaacaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaa
adaaaaaafgafbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaa
adaaaaaaegacbaaaadaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaa
bkaabaaaacaaaaaabkbabaaaaeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaa
jkjjjjdodcaaaaajhcaabaaaabaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaa
egacbaaaadaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaa
aaaaaaaaadaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaa
aeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaa
aaaaaaaadkaabaaaaaaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaa
abaaaaaapgapbaiaebaaaaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaa
aaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaa
abaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaa
aaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaa
egiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaa
aaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaaaaaaaaaa
egiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaai
pcaabaaaaaaaaaaaegaobaaaaaaaaaaaegiocaaaadaaaaaaadaaaaaaaaaaaaai
ecaabaaaaaaaaaaackaabaaaaaaaaaaaakiacaaaacaaaaaaafaaaaaadgaaaaaf
lccabaaaaaaaaaaaegambaaaaaaaaaaadeaaaaahbcaabaaaaaaaaaaackaabaaa
aaaaaaaaabeaaaaaaaaaaaaaaaaaaaaibcaabaaaaaaaaaaackaabaiaebaaaaaa
aaaaaaaaakaabaaaaaaaaaaadcaaaaakeccabaaaaaaaaaaabkiacaaaacaaaaaa
afaaaaaaakaabaaaaaaaaaaackaabaaaaaaaaaaadcaaaaaldccabaaaabaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (glstate_matrix_mvp * tmpvar_15);
  tmpvar_1.xyw = tmpvar_16.xyw;
  tmpvar_1.z = (tmpvar_16.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_16.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
void main ()
{
  lowp float x_1;
  x_1 = (texture2D (_MainTex, xlv_TEXCOORD1).w - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 unity_LightShadowBias;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (glstate_matrix_mvp * tmpvar_15);
  tmpvar_1.xyw = tmpvar_16.xyw;
  tmpvar_1.z = (tmpvar_16.z + unity_LightShadowBias.x);
  tmpvar_1.z = mix (tmpvar_1.z, max (tmpvar_1.z, (tmpvar_16.w * -1.0)), unity_LightShadowBias.y);
  gl_Position = tmpvar_1;
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
uniform lowp float _Cutoff;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
void main ()
{
  lowp vec3 normal_1;
  normal_1.xy = ((texture2D (_BumpMap, xlv_TEXCOORD1).wy * 2.0) - 1.0);
  normal_1.z = sqrt((1.0 - clamp (dot (normal_1.xy, normal_1.xy), 0.0, 1.0)));
  lowp float x_2;
  x_2 = (texture2D (_MainTex, xlv_TEXCOORD1).w - _Cutoff);
  if ((x_2 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 646
uniform highp vec4 _MainTex_ST;
#line 658
uniform lowp float _Cutoff;
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 647
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 650
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    o.pos.z += unity_LightShadowBias.x;
    #line 654
    highp float clamped = max( o.pos.z, (o.pos.w * -1.0));
    o.pos.z = mix( o.pos.z, clamped, unity_LightShadowBias.y);
    return o;
}

out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD1 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 646
uniform highp vec4 _MainTex_ST;
#line 658
uniform lowp float _Cutoff;
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 659
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 662
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 666
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 670
    return vec4( 0.0);
}
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 13 [_Time]
Vector 14 [_LightPositionRange]
Matrix 9 [_Object2World]
Vector 15 [_Scale]
Vector 16 [_SquashPlaneNormal]
Float 17 [_SquashAmount]
Vector 18 [_Wind]
Vector 19 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 54 ALU
PARAM c[22] = { { 0, 1, 2, -0.5 },
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[9..19],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[6];
MAD R1, vertex.normal.x, c[5], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[7], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[12];
MUL R2.xyz, R0, c[15];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[13].y;
MUL R0, R0.xxyy, c[20];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[21].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[21].z;
MUL R1.xyz, R3.y, c[18];
MOV R0.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[21];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[18].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[18], R0;
DP3 R0.x, R1, c[16];
ADD R0.x, R0, c[16].w;
MUL R0.xyz, R0.x, c[16];
ADD R1.xyz, -R0, R1;
MAD R0.xyz, R0, c[17].x, R1;
DP4 R1.z, R0, c[11];
DP4 R1.x, R0, c[9];
DP4 R1.y, R0, c[10];
ADD result.texcoord[0].xyz, R1, -c[14];
DP4 result.position.w, R0, c[4];
DP4 result.position.z, R0, c[3];
DP4 result.position.y, R0, c[2];
DP4 result.position.x, R0, c[1];
MAD result.texcoord[1].xy, vertex.texcoord[0], c[19], c[19].zwzw;
END
# 54 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_mvp]
Matrix 4 [glstate_matrix_invtrans_modelview0]
Vector 12 [_Time]
Vector 13 [_LightPositionRange]
Matrix 8 [_Object2World]
Vector 14 [_Scale]
Vector 15 [_SquashPlaneNormal]
Float 16 [_SquashAmount]
Vector 17 [_Wind]
Vector 18 [_MainTex_ST]
"vs_3_0
; 57 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
def c19, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c20, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c21, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c22, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c5
mad r1, v2.x, c4, r0
add r0.xyz, r1, c19.x
abs r0.w, v1
add r3.w, -r0, c19.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c11
dp3 r0.w, c19.y, r2
mad r1, v2.z, c6, r1
add r2, r1, c19.x
dp4 r2.y, r2, r2
mul r3.xyz, r0, c14
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c12.y
mul r0, r0.xxyy, c20
frc r0, r0
mad r0, r0, c19.z, c19.w
frc r0, r0
mad r0, r0, c21.x, c21.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c21.x, c21.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r0.xz, r0.xyyw, c22.x
mul r1.xyz, r2.y, c17
mov r0.w, c19.y
mul r1.xyz, v4.y, r1
mul r0.y, v4, c21.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c17.w, r3
mad r1.xyz, v4.x, c17, r0
dp3 r0.x, r1, c15
add r0.x, r0, c15.w
mul r0.xyz, r0.x, c15
add r1.xyz, -r0, r1
mad r0.xyz, r0, c16.x, r1
dp4 r1.z, r0, c10
dp4 r1.x, r0, c8
dp4 r1.y, r0, c9
add o1.xyz, r1, -c13
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
mad o2.xy, v3, c18, c18.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityLighting" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 56 instructions, 4 temp regs, 0 temp arrays:
// ALU 51 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedlgjcnbdleeohinamchkbcblaaojgnafcabaaaaaaieajaaaaadaaaaaa
cmaaaaaapeaaaaaageabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheogiaaaaaaadaaaaaa
aiaaaaaafaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaafmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefcbiaiaaaaeaaaabaaagacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
acaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaaddccabaaaacaaaaaagiaaaaacaeaaaaaabaaaaaai
ccaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaajaaaaaabaaaaaai
icaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaalaaaaaabaaaaaai
bcaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaaiaaaaaabaaaaaai
ecaabaaaaaaaaaaaegbcbaaaacaaaaaaegiccaaaadaaaaaaakaaaaaabbaaaaah
ccaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaaaaaaaaaeeaaaaafccaabaaa
aaaaaaaabkaabaaaaaaaaaaadcaaaaakdcaabaaaaaaaaaaaigaabaaaaaaaaaaa
fgafbaaaaaaaaaaaigbabaiaebaaaaaaacaaaaaaaaaaaaaiecaabaaaaaaaaaaa
dkbabaiambaaaaaaabaaaaaaabeaaaaaaaaaiadpdcaaaaajdcaabaaaaaaaaaaa
kgakbaaaaaaaaaaaegaabaaaaaaaaaaaigbabaaaacaaaaaadiaaaaahicaabaaa
aaaaaaaabkbabaaaafaaaaaaabeaaaaamnmmmmdndiaaaaahfcaabaaaabaaaaaa
agabbaaaaaaaaaaapgapbaaaaaaaaaaaapaaaaaibcaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaaiaaaaaaapaaaaaiccaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaajaaaaaaapaaaaaiecaabaaaacaaaaaaegbabaaa
acaaaaaaegiacaaaadaaaaaaakaaaaaadcaaaaajhcaabaaaaaaaaaaaegacbaaa
acaaaaaakgakbaaaaaaaaaaaegbcbaaaaaaaaaaadiaaaaaihcaabaaaaaaaaaaa
egacbaaaaaaaaaaaegiccaaaaeaaaaaaafaaaaaadgaaaaagbcaabaaaacaaaaaa
dkiacaaaadaaaaaaamaaaaaadgaaaaagccaabaaaacaaaaaadkiacaaaadaaaaaa
anaaaaaadgaaaaagecaabaaaacaaaaaadkiacaaaadaaaaaaaoaaaaaabaaaaaak
icaabaaaaaaaaaaaegacbaaaacaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaaaaaaaaaaaahccaabaaaacaaaaaadkaabaaaaaaaaaaaakbabaaaafaaaaaa
aaaaaaahicaabaaaaaaaaaaabkaabaaaacaaaaaabkbabaaaafaaaaaabaaaaaah
bcaabaaaacaaaaaaegacbaaaaaaaaaaapgapbaaaaaaaaaaaaaaaaaaipcaabaaa
acaaaaaaagafbaaaacaaaaaafgifcaaaabaaaaaaaaaaaaaadiaaaaakpcaabaaa
acaaaaaaegaobaaaacaaaaaaaceaaaaamnmmpmdpamaceldpaaaamadomlkbefdo
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaaalpaaaaaalpaaaaaalpaaaaaalpbkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaialp
diaaaaajpcaabaaaadaaaaaaegaobaiaibaaaaaaacaaaaaaegaobaiaibaaaaaa
acaaaaaadcaaaabapcaabaaaacaaaaaaegaobaiambaaaaaaacaaaaaaaceaaaaa
aaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaeaeaaaaaeaeaaaaaeaea
aaaaeaeadiaaaaahpcaabaaaacaaaaaaegaobaaaacaaaaaaegaobaaaadaaaaaa
aaaaaaahdcaabaaaacaaaaaangafbaaaacaaaaaaigaabaaaacaaaaaadiaaaaai
hcaabaaaadaaaaaafgafbaaaacaaaaaaegiccaaaaaaaaaaaadaaaaaadiaaaaah
hcaabaaaadaaaaaaegacbaaaadaaaaaafgbfbaaaaeaaaaaadiaaaaahccaabaaa
abaaaaaabkaabaaaacaaaaaabkbabaaaaeaaaaaadgaaaaafecaabaaaacaaaaaa
abeaaaaajkjjjjdodcaaaaajhcaabaaaabaaaaaaigaabaaaacaaaaaaegacbaaa
abaaaaaaegacbaaaadaaaaaadcaaaaakhcaabaaaaaaaaaaaegacbaaaabaaaaaa
pgipcaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaa
agbabaaaaeaaaaaaegiccaaaaaaaaaaaadaaaaaaegacbaaaaaaaaaaabaaaaaai
icaabaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaai
icaabaaaaaaaaaaadkaabaaaaaaaaaaadkiacaaaaeaaaaaaakaaaaaadcaaaaal
hcaabaaaabaaaaaapgapbaiaebaaaaaaaaaaaaaaegiccaaaaeaaaaaaakaaaaaa
egacbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaia
ebaaaaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaagiacaaaaeaaaaaaalaaaaaa
egacbaaaaaaaaaaaegacbaaaabaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaaaaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaacaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipccabaaaaaaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaadaaaaaa
diaaaaaihcaabaaaabaaaaaafgafbaaaaaaaaaaaegiccaaaadaaaaaaanaaaaaa
dcaaaaaklcaabaaaaaaaaaaaegiicaaaadaaaaaaamaaaaaaagaabaaaaaaaaaaa
egaibaaaabaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaadaaaaaaaoaaaaaa
kgakbaaaaaaaaaaaegadbaaaaaaaaaaaaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegiccaaaadaaaaaaapaaaaaaaaaaaaajhccabaaaabaaaaaaegacbaaa
aaaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaadcaaaaaldccabaaaacaaaaaa
egbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaaaaaaaaaaaiaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp float tmpvar_2;
  tmpvar_2 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = _glesNormal.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex + ((tmpvar_4 * glstate_matrix_invtrans_modelview0) * tmpvar_2));
  tmpvar_1.w = tmpvar_5.w;
  tmpvar_1.xyz = (tmpvar_5.xyz * _Scale.xyz);
  highp vec4 pos_6;
  pos_6.w = tmpvar_1.w;
  highp vec3 bend_7;
  vec4 v_8;
  v_8.x = _Object2World[0].w;
  v_8.y = _Object2World[1].w;
  v_8.z = _Object2World[2].w;
  v_8.w = _Object2World[3].w;
  highp float tmpvar_9;
  tmpvar_9 = (dot (v_8.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_1.xyz, vec3((_glesColor.y + tmpvar_9)));
  tmpvar_10.y = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11 = abs(((fract((((fract(((_Time.yy + tmpvar_10).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * tmpvar_11) * (3.0 - (2.0 * tmpvar_11)));
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_12.xz + tmpvar_12.yw);
  bend_7.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_3 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_2))).xz;
  bend_7.y = (_glesMultiTexCoord1.y * 0.3);
  pos_6.xyz = (tmpvar_1.xyz + (((tmpvar_13.xyx * bend_7) + ((_Wind.xyz * tmpvar_13.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_6.xyz = (pos_6.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = mix ((pos_6.xyz - ((dot (_SquashPlaneNormal.xyz, pos_6.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_6.xyz, vec3(_SquashAmount));
  tmpvar_1 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_14).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp float x_2;
  x_2 = (texture2D (_MainTex, xlv_TEXCOORD1).w - _Cutoff);
  if ((x_2 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_3;
  tmpvar_3 = fract((vec4(1.0, 255.0, 65025.0, 1.60581e+08) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_4;
  tmpvar_4 = (tmpvar_3 - (tmpvar_3.yzww * 0.00392157));
  tmpvar_1 = tmpvar_4;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp float tmpvar_2;
  tmpvar_2 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp vec4 tmpvar_4;
  tmpvar_4.zw = vec2(0.0, 0.0);
  tmpvar_4.xy = _glesNormal.xy;
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex + ((tmpvar_4 * glstate_matrix_invtrans_modelview0) * tmpvar_2));
  tmpvar_1.w = tmpvar_5.w;
  tmpvar_1.xyz = (tmpvar_5.xyz * _Scale.xyz);
  highp vec4 pos_6;
  pos_6.w = tmpvar_1.w;
  highp vec3 bend_7;
  vec4 v_8;
  v_8.x = _Object2World[0].w;
  v_8.y = _Object2World[1].w;
  v_8.z = _Object2World[2].w;
  v_8.w = _Object2World[3].w;
  highp float tmpvar_9;
  tmpvar_9 = (dot (v_8.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_1.xyz, vec3((_glesColor.y + tmpvar_9)));
  tmpvar_10.y = tmpvar_9;
  highp vec4 tmpvar_11;
  tmpvar_11 = abs(((fract((((fract(((_Time.yy + tmpvar_10).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_12;
  tmpvar_12 = ((tmpvar_11 * tmpvar_11) * (3.0 - (2.0 * tmpvar_11)));
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_12.xz + tmpvar_12.yw);
  bend_7.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_3 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_2))).xz;
  bend_7.y = (_glesMultiTexCoord1.y * 0.3);
  pos_6.xyz = (tmpvar_1.xyz + (((tmpvar_13.xyx * bend_7) + ((_Wind.xyz * tmpvar_13.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_6.xyz = (pos_6.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = mix ((pos_6.xyz - ((dot (_SquashPlaneNormal.xyz, pos_6.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_6.xyz, vec3(_SquashAmount));
  tmpvar_1 = tmpvar_14;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_14).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  lowp vec3 normal_2;
  normal_2.xy = ((texture2D (_BumpMap, xlv_TEXCOORD1).wy * 2.0) - 1.0);
  normal_2.z = sqrt((1.0 - clamp (dot (normal_2.xy, normal_2.xy), 0.0, 1.0)));
  lowp float x_3;
  x_3 = (texture2D (_MainTex, xlv_TEXCOORD1).w - _Cutoff);
  if ((x_3 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_4;
  tmpvar_4 = fract((vec4(1.0, 255.0, 65025.0, 1.60581e+08) * min ((sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w), 0.999)));
  highp vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_4 - (tmpvar_4.yzww * 0.00392157));
  tmpvar_1 = tmpvar_5;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec3 vec;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 647
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 523
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 525
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 527
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 529
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 531
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 533
    return SmoothCurve( TriangleWave( x));
}
#line 535
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 537
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 541
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 545
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 549
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 514
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 517
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 521
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 487
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 491
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 561
void TreeVertLeaf( inout appdata_full v ) {
    #line 563
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 567
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 648
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 651
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.vec = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 655
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec2 xlv_TEXCOORD1;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval.vec);
    xlv_TEXCOORD1 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 585
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 618
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 640
struct v2f_surf {
    highp vec4 pos;
    highp vec3 vec;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 393
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 397
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 401
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 421
#line 469
#line 487
#line 501
#line 513
uniform highp vec4 _Wind;
#line 581
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 596
#line 612
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 616
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 627
#line 647
uniform highp vec4 _MainTex_ST;
uniform lowp float _Cutoff;
#line 206
highp vec4 EncodeFloatRGBA( in highp float v ) {
    highp vec4 kEncodeMul = vec4( 1.0, 255.0, 65025.0, 1.60581e+08);
    highp float kEncodeBit = 0.00392157;
    #line 210
    highp vec4 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc -= (enc.yzww * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 627
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 631
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 635
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 658
lowp vec4 frag_surf( in v2f_surf IN ) {
    #line 660
    Input surfIN;
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    #line 664
    o.Emission = vec3( 0.0);
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    #line 668
    xll_clip_f((o.Alpha - _Cutoff));
    return EncodeFloatRGBA( min( (length(IN.vec) * _LightPositionRange.w), 0.999));
}
in highp vec3 xlv_TEXCOORD0;
in highp vec2 xlv_TEXCOORD1;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.vec = vec3(xlv_TEXCOORD0);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD1);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 8
//   opengl - ALU: 4 to 11, TEX: 1 to 1
//   d3d9 - ALU: 5 to 11, TEX: 2 to 2
//   d3d11 - ALU: 2 to 9, TEX: 1 to 1, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Float 0 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"3.0-!!ARBfp1.0
# 4 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 0 } };
TEMP R0;
TEX R0.w, fragment.texcoord[1], texture[0], 2D;
SLT R0.x, R0.w, c[0];
MOV result.color, c[1].x;
KIL -R0.x;
END
# 4 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Float 0 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"ps_3_0
; 5 ALU, 2 TEX
dcl_2d s0
def c1, 0.00000000, 1.00000000, 0, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord1 v1.xy
texld r0.w, v1, s0
add_pp r0.x, r0.w, -c0
cmp r0.x, r0, c1, c1.y
mov_pp r0, -r0.x
rcp r1.x, v0.w
texkill r0.xyzw
mul oC0, v0.z, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
// 6 instructions, 1 temp regs, 0 temp arrays:
// ALU 2 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcadkkgjgmhiechmnniblpeedhgimnodcabaaaaaakiabaaaaadaaaaaa
cmaaaaaaieaaaaaaliaaaaaaejfdeheofaaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaeeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcoiaaaaaa
eaaaaaaadkaaaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaa
aaaaaaaadgaaaaaipccabaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Vector 0 [_LightPositionRange]
Float 1 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"3.0-!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[4] = { program.local[0..1],
		{ 1, 255, 65025, 1.6058138e+008 },
		{ 0.99900001, 0.0039215689 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[0], fragment.texcoord[0];
RSQ R0.x, R0.x;
RCP R0.x, R0.x;
MUL R0.x, R0, c[0].w;
MIN R0.x, R0, c[3];
MUL R1, R0.x, c[2];
TEX R0.w, fragment.texcoord[1], texture[0], 2D;
FRC R1, R1;
SLT R0.x, R0.w, c[1];
MAD result.color, -R1.yzww, c[3].y, R1;
KIL -R0.x;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Vector 0 [_LightPositionRange]
Float 1 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"ps_3_0
; 11 ALU, 2 TEX
dcl_2d s0
def c2, 0.00000000, 1.00000000, 0.99900001, 0.00392157
def c3, 1.00000000, 255.00000000, 65025.00000000, 160581376.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xy
dp3 r0.x, v0, v0
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0.x, c0.w
texld r0.w, v1, s0
add_pp r0.x, r0.w, -c1
min r0.y, r0, c2.z
mul r1, r0.y, c3
cmp r0.x, r0, c2, c2.y
mov_pp r0, -r0.x
frc r1, r1
texkill r0.xyzw
mad oC0, -r1.yzww, c2.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
SetTexture 0 [_MainTex] 2D 0
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgofbjdildjcadnfkgohkjppdongcnldoabaaaaaajiacaaaaadaaaaaa
cmaaaaaajmaaaaaanaaaaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaafmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmaabaaaaeaaaaaaahaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacabaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaabaaaaaaddaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
hhlohpdpdiaaaaakpcaabaaaaaaaaaaaagaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaahpedaaabhoehhacebjenbkaaaaafpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaanpccabaaaaaaaaaaajgapbaiaebaaaaaaaaaaaaaaaceaaaaaibiaiadl
ibiaiadlibiaiadlibiaiadlegaobaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Float 0 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"3.0-!!ARBfp1.0
# 4 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 0 } };
TEMP R0;
TEX R0.w, fragment.texcoord[1], texture[0], 2D;
SLT R0.x, R0.w, c[0];
MOV result.color, c[1].x;
KIL -R0.x;
END
# 4 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Float 0 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"ps_3_0
; 5 ALU, 2 TEX
dcl_2d s0
def c1, 0.00000000, 1.00000000, 0, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord1 v1.xy
texld r0.w, v1, s0
add_pp r0.x, r0.w, -c0
cmp r0.x, r0, c1, c1.y
mov_pp r0, -r0.x
rcp r1.x, v0.w
texkill r0.xyzw
mul oC0, v0.z, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
// 6 instructions, 1 temp regs, 0 temp arrays:
// ALU 2 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcadkkgjgmhiechmnniblpeedhgimnodcabaaaaaakiabaaaaadaaaaaa
cmaaaaaaieaaaaaaliaaaaaaejfdeheofaaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaeeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcoiaaaaaa
eaaaaaaadkaaaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaa
aaaaaaaadgaaaaaipccabaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Vector 0 [_LightPositionRange]
Float 1 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"3.0-!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[4] = { program.local[0..1],
		{ 1, 255, 65025, 1.6058138e+008 },
		{ 0.99900001, 0.0039215689 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[0], fragment.texcoord[0];
RSQ R0.x, R0.x;
RCP R0.x, R0.x;
MUL R0.x, R0, c[0].w;
MIN R0.x, R0, c[3];
MUL R1, R0.x, c[2];
TEX R0.w, fragment.texcoord[1], texture[0], 2D;
FRC R1, R1;
SLT R0.x, R0.w, c[1];
MAD result.color, -R1.yzww, c[3].y, R1;
KIL -R0.x;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Vector 0 [_LightPositionRange]
Float 1 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"ps_3_0
; 11 ALU, 2 TEX
dcl_2d s0
def c2, 0.00000000, 1.00000000, 0.99900001, 0.00392157
def c3, 1.00000000, 255.00000000, 65025.00000000, 160581376.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xy
dp3 r0.x, v0, v0
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0.x, c0.w
texld r0.w, v1, s0
add_pp r0.x, r0.w, -c1
min r0.y, r0, c2.z
mul r1, r0.y, c3
cmp r0.x, r0, c2, c2.y
mov_pp r0, -r0.x
frc r1, r1
texkill r0.xyzw
mad oC0, -r1.yzww, c2.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
SetTexture 0 [_MainTex] 2D 0
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgofbjdildjcadnfkgohkjppdongcnldoabaaaaaajiacaaaaadaaaaaa
cmaaaaaajmaaaaaanaaaaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaafmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmaabaaaaeaaaaaaahaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacabaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaabaaaaaaddaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
hhlohpdpdiaaaaakpcaabaaaaaaaaaaaagaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaahpedaaabhoehhacebjenbkaaaaafpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaanpccabaaaaaaaaaaajgapbaiaebaaaaaaaaaaaaaaaceaaaaaibiaiadl
ibiaiadlibiaiadlibiaiadlegaobaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Float 0 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"3.0-!!ARBfp1.0
# 4 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 0 } };
TEMP R0;
TEX R0.w, fragment.texcoord[1], texture[0], 2D;
SLT R0.x, R0.w, c[0];
MOV result.color, c[1].x;
KIL -R0.x;
END
# 4 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
Float 0 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"ps_3_0
; 5 ALU, 2 TEX
dcl_2d s0
def c1, 0.00000000, 1.00000000, 0, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord1 v1.xy
texld r0.w, v1, s0
add_pp r0.x, r0.w, -c0
cmp r0.x, r0, c1, c1.y
mov_pp r0, -r0.x
rcp r1.x, v0.w
texkill r0.xyzw
mul oC0, v0.z, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
// 6 instructions, 1 temp regs, 0 temp arrays:
// ALU 2 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcadkkgjgmhiechmnniblpeedhgimnodcabaaaaaakiabaaaaadaaaaaa
cmaaaaaaieaaaaaaliaaaaaaejfdeheofaaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaeeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcoiaaaaaa
eaaaaaaadkaaaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaa
aaaaaaaadgaaaaaipccabaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Vector 0 [_LightPositionRange]
Float 1 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"3.0-!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[4] = { program.local[0..1],
		{ 1, 255, 65025, 1.6058138e+008 },
		{ 0.99900001, 0.0039215689 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[0], fragment.texcoord[0];
RSQ R0.x, R0.x;
RCP R0.x, R0.x;
MUL R0.x, R0, c[0].w;
MIN R0.x, R0, c[3];
MUL R1, R0.x, c[2];
TEX R0.w, fragment.texcoord[1], texture[0], 2D;
FRC R1, R1;
SLT R0.x, R0.w, c[1];
MAD result.color, -R1.yzww, c[3].y, R1;
KIL -R0.x;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
Vector 0 [_LightPositionRange]
Float 1 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"ps_3_0
; 11 ALU, 2 TEX
dcl_2d s0
def c2, 0.00000000, 1.00000000, 0.99900001, 0.00392157
def c3, 1.00000000, 255.00000000, 65025.00000000, 160581376.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xy
dp3 r0.x, v0, v0
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0.x, c0.w
texld r0.w, v1, s0
add_pp r0.x, r0.w, -c1
min r0.y, r0, c2.z
mul r1, r0.y, c3
cmp r0.x, r0, c2, c2.y
mov_pp r0, -r0.x
frc r1, r1
texkill r0.xyzw
mad oC0, -r1.yzww, c2.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
SetTexture 0 [_MainTex] 2D 0
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgofbjdildjcadnfkgohkjppdongcnldoabaaaaaajiacaaaaadaaaaaa
cmaaaaaajmaaaaaanaaaaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaafmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmaabaaaaeaaaaaaahaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacabaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaabaaaaaaddaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
hhlohpdpdiaaaaakpcaabaaaaaaaaaaaagaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaahpedaaabhoehhacebjenbkaaaaafpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaanpccabaaaaaaaaaaajgapbaiaebaaaaaaaaaaaaaaaceaaaaaibiaiadl
ibiaiadlibiaiadlibiaiadlegaobaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Float 0 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"3.0-!!ARBfp1.0
# 4 ALU, 1 TEX
PARAM c[2] = { program.local[0],
		{ 0 } };
TEMP R0;
TEX R0.w, fragment.texcoord[1], texture[0], 2D;
SLT R0.x, R0.w, c[0];
MOV result.color, c[1].x;
KIL -R0.x;
END
# 4 instructions, 1 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
Float 0 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"ps_3_0
; 5 ALU, 2 TEX
dcl_2d s0
def c1, 0.00000000, 1.00000000, 0, 0
dcl_texcoord0 v0.xyzw
dcl_texcoord1 v1.xy
texld r0.w, v1, s0
add_pp r0.x, r0.w, -c0
cmp r0.x, r0, c1, c1.y
mov_pp r0, -r0.x
rcp r1.x, v0.w
texkill r0.xyzw
mul oC0, v0.z, r1.x
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
BindCB "$Globals" 0
SetTexture 0 [_MainTex] 2D 0
// 6 instructions, 1 temp regs, 0 temp arrays:
// ALU 2 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedcadkkgjgmhiechmnniblpeedhgimnodcabaaaaaakiabaaaaadaaaaaa
cmaaaaaaieaaaaaaliaaaaaaejfdeheofaaaaaaaacaaaaaaaiaaaaaadiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaeeaaaaaaabaaaaaaaaaaaaaa
adaaaaaaabaaaaaaadadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklepfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaaaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcoiaaaaaa
eaaaaaaadkaaaaaafjaaaaaeegiocaaaaaaaaaaaakaaaaaafkaaaaadaagabaaa
aaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaaddcbabaaaabaaaaaa
gfaaaaadpccabaaaaaaaaaaagiaaaaacabaaaaaaefaaaaajpcaabaaaaaaaaaaa
egbabaaaabaaaaaaeghobaaaaaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaa
aaaaaaaadgaaaaaipccabaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Vector 0 [_LightPositionRange]
Float 1 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"3.0-!!ARBfp1.0
# 11 ALU, 1 TEX
PARAM c[4] = { program.local[0..1],
		{ 1, 255, 65025, 1.6058138e+008 },
		{ 0.99900001, 0.0039215689 } };
TEMP R0;
TEMP R1;
DP3 R0.x, fragment.texcoord[0], fragment.texcoord[0];
RSQ R0.x, R0.x;
RCP R0.x, R0.x;
MUL R0.x, R0, c[0].w;
MIN R0.x, R0, c[3];
MUL R1, R0.x, c[2];
TEX R0.w, fragment.texcoord[1], texture[0], 2D;
FRC R1, R1;
SLT R0.x, R0.w, c[1];
MAD result.color, -R1.yzww, c[3].y, R1;
KIL -R0.x;
END
# 11 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
Vector 0 [_LightPositionRange]
Float 1 [_Cutoff]
SetTexture 0 [_MainTex] 2D
"ps_3_0
; 11 ALU, 2 TEX
dcl_2d s0
def c2, 0.00000000, 1.00000000, 0.99900001, 0.00392157
def c3, 1.00000000, 255.00000000, 65025.00000000, 160581376.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xy
dp3 r0.x, v0, v0
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0.x, c0.w
texld r0.w, v1, s0
add_pp r0.x, r0.w, -c1
min r0.y, r0, c2.z
mul r1, r0.y, c3
cmp r0.x, r0, c2, c2.y
mov_pp r0, -r0.x
frc r1, r1
texkill r0.xyzw
mad oC0, -r1.yzww, c2.w, r1
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityLighting" 720 // 32 used size, 17 vars
Vector 16 [_LightPositionRange] 4
BindCB "$Globals" 0
BindCB "UnityLighting" 1
SetTexture 0 [_MainTex] 2D 0
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 1 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedgofbjdildjcadnfkgohkjppdongcnldoabaaaaaajiacaaaaadaaaaaa
cmaaaaaajmaaaaaanaaaaaaaejfdeheogiaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaafmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcmaabaaaaeaaaaaaahaaaaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaacaaaaaa
fkaaaaadaagabaaaaaaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaagcbaaaad
hcbabaaaabaaaaaagcbaaaaddcbabaaaacaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacabaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaacaaaaaaeghobaaa
aaaaaaaaaagabaaaaaaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaa
akiacaiaebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaa
aaaaaaaaabeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegbcbaaaabaaaaaaegbcbaaaabaaaaaaelaaaaafbcaabaaaaaaaaaaa
akaabaaaaaaaaaaadiaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaadkiacaaa
abaaaaaaabaaaaaaddaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaa
hhlohpdpdiaaaaakpcaabaaaaaaaaaaaagaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaahpedaaabhoehhacebjenbkaaaaafpcaabaaaaaaaaaaaegaobaaaaaaaaaaa
dcaaaaanpccabaaaaaaaaaaajgapbaiaebaaaaaaaaaaaaaaaceaaaaaibiaiadl
ibiaiadlibiaiadlibiaiadlegaobaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_CUBE" }
"!!GLES3"
}

}
	}
	Pass {
		Name "ShadowCollector"
		Tags { "LightMode" = "ShadowCollector" }
		Fog {Mode Off}
		ZWrite On ZTest LEqual
Program "vp" {
// Vertex combos: 16
//   opengl - ALU: 70 to 70
//   d3d9 - ALU: 73 to 73
//   d3d11 - ALU: 71 to 71, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec4 diff_ibl_7;
  highp vec3 worldNormal_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9.xyz * _Color.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD5).xyz * 2.0) - 1.0);
  worldNormal_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_DiffCubeIBL, worldNormal_8);
  diff_ibl_7.xyz = tmpvar_12.xyz;
  diff_ibl_7.w = (tmpvar_12.w * ((tmpvar_12.w * ((tmpvar_12.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_7.xyz = (tmpvar_12.xyz * diff_ibl_7.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((diff_ibl_7.xyz * ExposureIBL.x) * tmpvar_10);
  tmpvar_6 = tmpvar_13;
  tmpvar_6 = (tmpvar_6 * tmpvar_5.w);
  lowp float x_14;
  x_14 = (tmpvar_9.w - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_15;
  tmpvar_15 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_16;
  tmpvar_16 = vec4(tmpvar_15);
  zNear_4 = tmpvar_16;
  bvec4 tmpvar_17;
  tmpvar_17 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_18;
  tmpvar_18 = vec4(tmpvar_17);
  zFar_3 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (zNear_4 * zFar_3);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((((xlv_TEXCOORD0 * tmpvar_19.x) + (xlv_TEXCOORD1 * tmpvar_19.y)) + (xlv_TEXCOORD2 * tmpvar_19.z)) + (xlv_TEXCOORD3 * tmpvar_19.w));
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ShadowMapTexture, tmpvar_21.xy);
  highp float tmpvar_23;
  if ((tmpvar_22.x < tmpvar_21.z)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  res_2.x = clamp ((tmpvar_23 + tmpvar_20), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_24.y = tmpvar_25.y;
  enc_24.x = (tmpvar_25.x - (tmpvar_25.y * 0.00392157));
  res_2.zw = enc_24;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec4 diff_ibl_7;
  highp vec3 worldNormal_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9.xyz * _Color.xyz);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD5).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  worldNormal_8 = normal_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_DiffCubeIBL, worldNormal_8);
  diff_ibl_7.xyz = tmpvar_12.xyz;
  diff_ibl_7.w = (tmpvar_12.w * ((tmpvar_12.w * ((tmpvar_12.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_7.xyz = (tmpvar_12.xyz * diff_ibl_7.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((diff_ibl_7.xyz * ExposureIBL.x) * tmpvar_10);
  tmpvar_6 = tmpvar_13;
  tmpvar_6 = (tmpvar_6 * tmpvar_5.w);
  lowp float x_14;
  x_14 = (tmpvar_9.w - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_15;
  tmpvar_15 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_16;
  tmpvar_16 = vec4(tmpvar_15);
  zNear_4 = tmpvar_16;
  bvec4 tmpvar_17;
  tmpvar_17 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_18;
  tmpvar_18 = vec4(tmpvar_17);
  zFar_3 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (zNear_4 * zFar_3);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((((xlv_TEXCOORD0 * tmpvar_19.x) + (xlv_TEXCOORD1 * tmpvar_19.y)) + (xlv_TEXCOORD2 * tmpvar_19.z)) + (xlv_TEXCOORD3 * tmpvar_19.w));
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ShadowMapTexture, tmpvar_21.xy);
  highp float tmpvar_23;
  if ((tmpvar_22.x < tmpvar_21.z)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  res_2.x = clamp ((tmpvar_23 + tmpvar_20), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_24.y = tmpvar_25.y;
  enc_24.x = (tmpvar_25.x - (tmpvar_25.y * 0.00392157));
  res_2.zw = enc_24;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 77 instructions, 4 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkncpodgpbmbfhpjgkellhmbikedhaljpabaaaaaaamanaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefceaalaaaaeaaaabaanaacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
biaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
dcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaaaaaaaaaaigbabaiaebaaaaaa
acaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
igbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaaaaaaaaaapgapbaaaaaaaaaaa
apaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaakgakbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaeaaaaaa
afaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaacaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaacaaaaaa
dkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
acaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaacaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkbabaaa
aeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaa
abaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaaaaaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaapgapbaiaebaaaaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaadaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaajaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaakaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaabaaaaaaegiccaaa
acaaaaaaalaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaamaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabaaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaabdaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
acaaaaaabfaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaabeaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabgaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaacaaaaaabhaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafhccabaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadgaaaaagiccabaaaafaaaaaaakaabaiaebaaaaaaaaaaaaaadcaaaaal
dccabaaaagaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 zFar_4;
  highp vec4 zNear_5;
  lowp vec4 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec4 diff_ibl_8;
  highp vec3 worldNormal_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10.xyz * _Color.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD5).xyz * 2.0) - 1.0);
  worldNormal_9 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_9);
  diff_ibl_8.xyz = tmpvar_13.xyz;
  diff_ibl_8.w = (tmpvar_13.w * ((tmpvar_13.w * ((tmpvar_13.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_8.xyz = (tmpvar_13.xyz * diff_ibl_8.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_8.xyz * ExposureIBL.x) * tmpvar_11);
  tmpvar_7 = tmpvar_14;
  tmpvar_7 = (tmpvar_7 * tmpvar_6.w);
  lowp float x_15;
  x_15 = (tmpvar_10.w - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_16;
  tmpvar_16 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_17;
  tmpvar_17 = vec4(tmpvar_16);
  zNear_5 = tmpvar_17;
  bvec4 tmpvar_18;
  tmpvar_18 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_19;
  tmpvar_19 = vec4(tmpvar_18);
  zFar_4 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (zNear_5 * zFar_4);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((((xlv_TEXCOORD0 * tmpvar_20.x) + (xlv_TEXCOORD1 * tmpvar_20.y)) + (xlv_TEXCOORD2 * tmpvar_20.z)) + (xlv_TEXCOORD3 * tmpvar_20.w));
  lowp float tmpvar_22;
  tmpvar_22 = shadow2DEXT (_ShadowMapTexture, tmpvar_21.xyz);
  shadow_3 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_23;
  res_2.x = clamp ((shadow_3 + clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_24.y = tmpvar_25.y;
  enc_24.x = (tmpvar_25.x - (tmpvar_25.y * 0.00392157));
  res_2.zw = enc_24;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 646
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 629
#line 657
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 524
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 526
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 528
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 530
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 532
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 534
    return SmoothCurve( TriangleWave( x));
}
#line 536
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 538
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 542
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 546
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 550
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 515
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 518
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 522
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 488
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 492
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 562
void TreeVertLeaf( inout appdata_full v ) {
    #line 564
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 568
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 658
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 661
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    highp vec4 wpos = (_Object2World * v.vertex);
    #line 665
    o._WorldPosViewZ.xyz = vec3( wpos);
    o._WorldPosViewZ.w = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord0 = (unity_World2Shadow[0] * wpos).xyz;
    o._ShadowCoord1 = (unity_World2Shadow[1] * wpos).xyz;
    #line 669
    o._ShadowCoord2 = (unity_World2Shadow[2] * wpos).xyz;
    o._ShadowCoord3 = (unity_World2Shadow[3] * wpos).xyz;
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval._ShadowCoord0);
    xlv_TEXCOORD1 = vec3(xl_retval._ShadowCoord1);
    xlv_TEXCOORD2 = vec3(xl_retval._ShadowCoord2);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord3);
    xlv_TEXCOORD4 = vec4(xl_retval._WorldPosViewZ);
    xlv_TEXCOORD5 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 646
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 629
#line 657
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 220
highp vec2 EncodeFloatRG( in highp float v ) {
    highp vec2 kEncodeMul = vec2( 1.0, 255.0);
    highp float kEncodeBit = 0.00392157;
    #line 224
    highp vec2 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc.x -= (enc.y * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 629
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 633
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 637
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 641
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 674
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 677
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 681
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 685
    highp vec4 viewZ = vec4( IN._WorldPosViewZ.w);
    highp vec4 zNear = vec4(greaterThanEqual( viewZ, _LightSplitsNear));
    highp vec4 zFar = vec4(lessThan( viewZ, _LightSplitsFar));
    highp vec4 cascadeWeights = (zNear * zFar);
    #line 689
    highp float shadowFade = xll_saturate_f(((IN._WorldPosViewZ.w * _LightShadowData.z) + _LightShadowData.w));
    highp vec4 coord = vec4( ((((IN._ShadowCoord0 * cascadeWeights.x) + (IN._ShadowCoord1 * cascadeWeights.y)) + (IN._ShadowCoord2 * cascadeWeights.z)) + (IN._ShadowCoord3 * cascadeWeights.w)), 1.0);
    mediump float shadow = xll_shadow2D( _ShadowMapTexture, coord.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 693
    highp vec4 res;
    res.x = xll_saturate_f((shadow + shadowFade));
    res.y = 1.0;
    res.zw = EncodeFloatRG( (1.0 - (IN._WorldPosViewZ.w * _ProjectionParams.w)));
    #line 697
    return res;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3(xlv_TEXCOORD0);
    xlt_IN._ShadowCoord1 = vec3(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord2 = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord3 = vec3(xlv_TEXCOORD3);
    xlt_IN._WorldPosViewZ = vec4(xlv_TEXCOORD4);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD5).xyz * 2.0) - 1.0);
  worldNormal_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_11.xyz;
  diff_ibl_6.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_11.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_12;
  tmpvar_5 = (tmpvar_5 * tmpvar_4.w);
  lowp float x_13;
  x_13 = (tmpvar_8.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = dot (tmpvar_14, tmpvar_14);
  tmpvar_18.y = dot (tmpvar_15, tmpvar_15);
  tmpvar_18.z = dot (tmpvar_16, tmpvar_16);
  tmpvar_18.w = dot (tmpvar_17, tmpvar_17);
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (tmpvar_18, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_20;
  tmpvar_20 = vec4(tmpvar_19);
  cascadeWeights_3 = tmpvar_20;
  cascadeWeights_3.yzw = clamp ((cascadeWeights_3.yzw - cascadeWeights_3.xyz), 0.0, 1.0);
  highp vec3 p_21;
  p_21 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_22;
  tmpvar_22 = clamp (((sqrt(dot (p_21, p_21)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_3.x) + (xlv_TEXCOORD1 * cascadeWeights_3.y)) + (xlv_TEXCOORD2 * cascadeWeights_3.z)) + (xlv_TEXCOORD3 * cascadeWeights_3.w));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ShadowMapTexture, tmpvar_23.xy);
  highp float tmpvar_25;
  if ((tmpvar_24.x < tmpvar_23.z)) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  res_2.x = clamp ((tmpvar_25 + tmpvar_22), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_26.y = tmpvar_27.y;
  enc_26.x = (tmpvar_27.x - (tmpvar_27.y * 0.00392157));
  res_2.zw = enc_26;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD5).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_7 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.xyz = tmpvar_11.xyz;
  diff_ibl_6.w = (tmpvar_11.w * ((tmpvar_11.w * ((tmpvar_11.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_6.xyz = (tmpvar_11.xyz * diff_ibl_6.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_12;
  tmpvar_5 = (tmpvar_5 * tmpvar_4.w);
  lowp float x_13;
  x_13 = (tmpvar_8.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = dot (tmpvar_14, tmpvar_14);
  tmpvar_18.y = dot (tmpvar_15, tmpvar_15);
  tmpvar_18.z = dot (tmpvar_16, tmpvar_16);
  tmpvar_18.w = dot (tmpvar_17, tmpvar_17);
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (tmpvar_18, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_20;
  tmpvar_20 = vec4(tmpvar_19);
  cascadeWeights_3 = tmpvar_20;
  cascadeWeights_3.yzw = clamp ((cascadeWeights_3.yzw - cascadeWeights_3.xyz), 0.0, 1.0);
  highp vec3 p_21;
  p_21 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_22;
  tmpvar_22 = clamp (((sqrt(dot (p_21, p_21)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_3.x) + (xlv_TEXCOORD1 * cascadeWeights_3.y)) + (xlv_TEXCOORD2 * cascadeWeights_3.z)) + (xlv_TEXCOORD3 * cascadeWeights_3.w));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ShadowMapTexture, tmpvar_23.xy);
  highp float tmpvar_25;
  if ((tmpvar_24.x < tmpvar_23.z)) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  res_2.x = clamp ((tmpvar_25 + tmpvar_22), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_26.y = tmpvar_27.y;
  enc_26.x = (tmpvar_27.x - (tmpvar_27.y * 0.00392157));
  res_2.zw = enc_26;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 77 instructions, 4 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkncpodgpbmbfhpjgkellhmbikedhaljpabaaaaaaamanaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefceaalaaaaeaaaabaanaacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
biaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
dcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaaaaaaaaaaigbabaiaebaaaaaa
acaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
igbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaaaaaaaaaapgapbaaaaaaaaaaa
apaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaakgakbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaeaaaaaa
afaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaacaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaacaaaaaa
dkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
acaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaacaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkbabaaa
aeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaa
abaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaaaaaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaapgapbaiaebaaaaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaadaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaajaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaakaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaabaaaaaaegiccaaa
acaaaaaaalaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaamaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabaaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaabdaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
acaaaaaabfaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaabeaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabgaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaacaaaaaabhaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafhccabaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadgaaaaagiccabaaaafaaaaaaakaabaiaebaaaaaaaaaaaaaadcaaaaal
dccabaaaagaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 cascadeWeights_4;
  lowp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec4 diff_ibl_7;
  highp vec3 worldNormal_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9.xyz * _Color.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD5).xyz * 2.0) - 1.0);
  worldNormal_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_DiffCubeIBL, worldNormal_8);
  diff_ibl_7.xyz = tmpvar_12.xyz;
  diff_ibl_7.w = (tmpvar_12.w * ((tmpvar_12.w * ((tmpvar_12.w * 0.305306) + 0.682171)) + 0.0125229));
  diff_ibl_7.xyz = (tmpvar_12.xyz * diff_ibl_7.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((diff_ibl_7.xyz * ExposureIBL.x) * tmpvar_10);
  tmpvar_6 = tmpvar_13;
  tmpvar_6 = (tmpvar_6 * tmpvar_5.w);
  lowp float x_14;
  x_14 = (tmpvar_9.w - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_15, tmpvar_15);
  tmpvar_19.y = dot (tmpvar_16, tmpvar_16);
  tmpvar_19.z = dot (tmpvar_17, tmpvar_17);
  tmpvar_19.w = dot (tmpvar_18, tmpvar_18);
  bvec4 tmpvar_20;
  tmpvar_20 = lessThan (tmpvar_19, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_21;
  tmpvar_21 = vec4(tmpvar_20);
  cascadeWeights_4 = tmpvar_21;
  cascadeWeights_4.yzw = clamp ((cascadeWeights_4.yzw - cascadeWeights_4.xyz), 0.0, 1.0);
  highp vec3 p_22;
  p_22 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_4.x) + (xlv_TEXCOORD1 * cascadeWeights_4.y)) + (xlv_TEXCOORD2 * cascadeWeights_4.z)) + (xlv_TEXCOORD3 * cascadeWeights_4.w));
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DEXT (_ShadowMapTexture, tmpvar_23.xyz);
  shadow_3 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_25;
  res_2.x = clamp ((shadow_3 + clamp (((sqrt(dot (p_22, p_22)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_26.y = tmpvar_27.y;
  enc_26.x = (tmpvar_27.x - (tmpvar_27.y * 0.00392157));
  res_2.zw = enc_26;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 646
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 629
#line 657
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 524
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 526
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 528
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 530
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 532
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 534
    return SmoothCurve( TriangleWave( x));
}
#line 536
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 538
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 542
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 546
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 550
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 515
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 518
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 522
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 488
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 492
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 562
void TreeVertLeaf( inout appdata_full v ) {
    #line 564
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 568
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 658
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 661
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    highp vec4 wpos = (_Object2World * v.vertex);
    #line 665
    o._WorldPosViewZ.xyz = vec3( wpos);
    o._WorldPosViewZ.w = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord0 = (unity_World2Shadow[0] * wpos).xyz;
    o._ShadowCoord1 = (unity_World2Shadow[1] * wpos).xyz;
    #line 669
    o._ShadowCoord2 = (unity_World2Shadow[2] * wpos).xyz;
    o._ShadowCoord3 = (unity_World2Shadow[3] * wpos).xyz;
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval._ShadowCoord0);
    xlv_TEXCOORD1 = vec3(xl_retval._ShadowCoord1);
    xlv_TEXCOORD2 = vec3(xl_retval._ShadowCoord2);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord3);
    xlv_TEXCOORD4 = vec4(xl_retval._WorldPosViewZ);
    xlv_TEXCOORD5 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 646
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 629
#line 657
uniform highp vec4 _MainTex_ST;
#line 673
uniform lowp float _Cutoff;
#line 220
highp vec2 EncodeFloatRG( in highp float v ) {
    highp vec2 kEncodeMul = vec2( 1.0, 255.0);
    highp float kEncodeBit = 0.00392157;
    #line 224
    highp vec2 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc.x -= (enc.y * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 629
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 633
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 637
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 641
    diff_ibl.w *= ((diff_ibl.w * ((diff_ibl.w * 0.305306) + 0.682171)) + 0.0125229);
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 674
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 677
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 681
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 685
    highp vec3 fromCenter0 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[0].xyz);
    highp vec3 fromCenter1 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[1].xyz);
    highp vec3 fromCenter2 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[2].xyz);
    highp vec3 fromCenter3 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[3].xyz);
    #line 689
    highp vec4 distances2 = vec4( dot( fromCenter0, fromCenter0), dot( fromCenter1, fromCenter1), dot( fromCenter2, fromCenter2), dot( fromCenter3, fromCenter3));
    highp vec4 cascadeWeights = vec4(lessThan( distances2, unity_ShadowSplitSqRadii));
    cascadeWeights.yzw = xll_saturate_vf3((cascadeWeights.yzw - cascadeWeights.xyz));
    highp float sphereDist = distance( IN._WorldPosViewZ.xyz, unity_ShadowFadeCenterAndType.xyz);
    #line 693
    highp float shadowFade = xll_saturate_f(((sphereDist * _LightShadowData.z) + _LightShadowData.w));
    highp vec4 coord = vec4( ((((IN._ShadowCoord0 * cascadeWeights.x) + (IN._ShadowCoord1 * cascadeWeights.y)) + (IN._ShadowCoord2 * cascadeWeights.z)) + (IN._ShadowCoord3 * cascadeWeights.w)), 1.0);
    mediump float shadow = xll_shadow2D( _ShadowMapTexture, coord.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 697
    highp vec4 res;
    res.x = xll_saturate_f((shadow + shadowFade));
    res.y = 1.0;
    res.zw = EncodeFloatRG( (1.0 - (IN._WorldPosViewZ.w * _ProjectionParams.w)));
    #line 701
    return res;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3(xlv_TEXCOORD0);
    xlt_IN._ShadowCoord1 = vec3(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord2 = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord3 = vec3(xlv_TEXCOORD3);
    xlt_IN._WorldPosViewZ = vec4(xlv_TEXCOORD4);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp float x_5;
  x_5 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_6;
  tmpvar_6 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_7;
  tmpvar_7 = vec4(tmpvar_6);
  zNear_4 = tmpvar_7;
  bvec4 tmpvar_8;
  tmpvar_8 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_9;
  tmpvar_9 = vec4(tmpvar_8);
  zFar_3 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (zNear_4 * zFar_3);
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = ((((xlv_TEXCOORD0 * tmpvar_10.x) + (xlv_TEXCOORD1 * tmpvar_10.y)) + (xlv_TEXCOORD2 * tmpvar_10.z)) + (xlv_TEXCOORD3 * tmpvar_10.w));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ShadowMapTexture, tmpvar_12.xy);
  highp float tmpvar_14;
  if ((tmpvar_13.x < tmpvar_12.z)) {
    tmpvar_14 = _LightShadowData.x;
  } else {
    tmpvar_14 = 1.0;
  };
  res_2.x = clamp ((tmpvar_14 + tmpvar_11), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_15.y = tmpvar_16.y;
  enc_15.x = (tmpvar_16.x - (tmpvar_16.y * 0.00392157));
  res_2.zw = enc_15;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD5).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (dot (normal_5.xy, normal_5.xy), 0.0, 1.0)));
  lowp float x_6;
  x_6 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_7;
  tmpvar_7 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_8;
  tmpvar_8 = vec4(tmpvar_7);
  zNear_4 = tmpvar_8;
  bvec4 tmpvar_9;
  tmpvar_9 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_10;
  tmpvar_10 = vec4(tmpvar_9);
  zFar_3 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (zNear_4 * zFar_3);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = ((((xlv_TEXCOORD0 * tmpvar_11.x) + (xlv_TEXCOORD1 * tmpvar_11.y)) + (xlv_TEXCOORD2 * tmpvar_11.z)) + (xlv_TEXCOORD3 * tmpvar_11.w));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ShadowMapTexture, tmpvar_13.xy);
  highp float tmpvar_15;
  if ((tmpvar_14.x < tmpvar_13.z)) {
    tmpvar_15 = _LightShadowData.x;
  } else {
    tmpvar_15 = 1.0;
  };
  res_2.x = clamp ((tmpvar_15 + tmpvar_12), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_16;
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_16.y = tmpvar_17.y;
  enc_16.x = (tmpvar_17.x - (tmpvar_17.y * 0.00392157));
  res_2.zw = enc_16;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 77 instructions, 4 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkncpodgpbmbfhpjgkellhmbikedhaljpabaaaaaaamanaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefceaalaaaaeaaaabaanaacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
biaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
dcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaaaaaaaaaaigbabaiaebaaaaaa
acaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
igbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaaaaaaaaaapgapbaaaaaaaaaaa
apaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaakgakbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaeaaaaaa
afaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaacaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaacaaaaaa
dkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
acaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaacaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkbabaaa
aeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaa
abaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaaaaaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaapgapbaiaebaaaaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaadaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaajaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaakaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaabaaaaaaegiccaaa
acaaaaaaalaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaamaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabaaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaabdaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
acaaaaaabfaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaabeaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabgaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaacaaaaaabhaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafhccabaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadgaaaaagiccabaaaafaaaaaaakaabaiaebaaaaaaaaaaaaaadcaaaaal
dccabaaaagaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 zFar_4;
  highp vec4 zNear_5;
  lowp float x_6;
  x_6 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_7;
  tmpvar_7 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_8;
  tmpvar_8 = vec4(tmpvar_7);
  zNear_5 = tmpvar_8;
  bvec4 tmpvar_9;
  tmpvar_9 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_10;
  tmpvar_10 = vec4(tmpvar_9);
  zFar_4 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (zNear_5 * zFar_4);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = ((((xlv_TEXCOORD0 * tmpvar_11.x) + (xlv_TEXCOORD1 * tmpvar_11.y)) + (xlv_TEXCOORD2 * tmpvar_11.z)) + (xlv_TEXCOORD3 * tmpvar_11.w));
  lowp float tmpvar_13;
  tmpvar_13 = shadow2DEXT (_ShadowMapTexture, tmpvar_12.xyz);
  shadow_3 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_14;
  res_2.x = clamp ((shadow_3 + clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_15.y = tmpvar_16.y;
  enc_15.x = (tmpvar_16.x - (tmpvar_16.y * 0.00392157));
  res_2.zw = enc_15;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 524
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 526
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 528
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 530
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 532
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 534
    return SmoothCurve( TriangleWave( x));
}
#line 536
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 538
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 542
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 546
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 550
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 515
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 518
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 522
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 488
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 492
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 562
void TreeVertLeaf( inout appdata_full v ) {
    #line 564
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 568
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 653
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 656
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    highp vec4 wpos = (_Object2World * v.vertex);
    #line 660
    o._WorldPosViewZ.xyz = vec3( wpos);
    o._WorldPosViewZ.w = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord0 = (unity_World2Shadow[0] * wpos).xyz;
    o._ShadowCoord1 = (unity_World2Shadow[1] * wpos).xyz;
    #line 664
    o._ShadowCoord2 = (unity_World2Shadow[2] * wpos).xyz;
    o._ShadowCoord3 = (unity_World2Shadow[3] * wpos).xyz;
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval._ShadowCoord0);
    xlv_TEXCOORD1 = vec3(xl_retval._ShadowCoord1);
    xlv_TEXCOORD2 = vec3(xl_retval._ShadowCoord2);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord3);
    xlv_TEXCOORD4 = vec4(xl_retval._WorldPosViewZ);
    xlv_TEXCOORD5 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 220
highp vec2 EncodeFloatRG( in highp float v ) {
    highp vec2 kEncodeMul = vec2( 1.0, 255.0);
    highp float kEncodeBit = 0.00392157;
    #line 224
    highp vec2 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc.x -= (enc.y * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    highp vec4 viewZ = vec4( IN._WorldPosViewZ.w);
    highp vec4 zNear = vec4(greaterThanEqual( viewZ, _LightSplitsNear));
    highp vec4 zFar = vec4(lessThan( viewZ, _LightSplitsFar));
    highp vec4 cascadeWeights = (zNear * zFar);
    #line 684
    highp float shadowFade = xll_saturate_f(((IN._WorldPosViewZ.w * _LightShadowData.z) + _LightShadowData.w));
    highp vec4 coord = vec4( ((((IN._ShadowCoord0 * cascadeWeights.x) + (IN._ShadowCoord1 * cascadeWeights.y)) + (IN._ShadowCoord2 * cascadeWeights.z)) + (IN._ShadowCoord3 * cascadeWeights.w)), 1.0);
    mediump float shadow = xll_shadow2D( _ShadowMapTexture, coord.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 688
    highp vec4 res;
    res.x = xll_saturate_f((shadow + shadowFade));
    res.y = 1.0;
    res.zw = EncodeFloatRG( (1.0 - (IN._WorldPosViewZ.w * _ProjectionParams.w)));
    #line 692
    return res;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3(xlv_TEXCOORD0);
    xlt_IN._ShadowCoord1 = vec3(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord2 = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord3 = vec3(xlv_TEXCOORD3);
    xlt_IN._WorldPosViewZ = vec4(xlv_TEXCOORD4);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp float x_4;
  x_4 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_5;
  tmpvar_5 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.x = dot (tmpvar_5, tmpvar_5);
  tmpvar_9.y = dot (tmpvar_6, tmpvar_6);
  tmpvar_9.z = dot (tmpvar_7, tmpvar_7);
  tmpvar_9.w = dot (tmpvar_8, tmpvar_8);
  bvec4 tmpvar_10;
  tmpvar_10 = lessThan (tmpvar_9, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_11;
  tmpvar_11 = vec4(tmpvar_10);
  cascadeWeights_3 = tmpvar_11;
  cascadeWeights_3.yzw = clamp ((cascadeWeights_3.yzw - cascadeWeights_3.xyz), 0.0, 1.0);
  highp vec3 p_12;
  p_12 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((sqrt(dot (p_12, p_12)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_3.x) + (xlv_TEXCOORD1 * cascadeWeights_3.y)) + (xlv_TEXCOORD2 * cascadeWeights_3.z)) + (xlv_TEXCOORD3 * cascadeWeights_3.w));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_14.xy);
  highp float tmpvar_16;
  if ((tmpvar_15.x < tmpvar_14.z)) {
    tmpvar_16 = _LightShadowData.x;
  } else {
    tmpvar_16 = 1.0;
  };
  res_2.x = clamp ((tmpvar_16 + tmpvar_13), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_17.y = tmpvar_18.y;
  enc_17.x = (tmpvar_18.x - (tmpvar_18.y * 0.00392157));
  res_2.zw = enc_17;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp vec3 normal_4;
  normal_4.xy = ((texture2D (_BumpMap, xlv_TEXCOORD5).wy * 2.0) - 1.0);
  normal_4.z = sqrt((1.0 - clamp (dot (normal_4.xy, normal_4.xy), 0.0, 1.0)));
  lowp float x_5;
  x_5 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_6, tmpvar_6);
  tmpvar_10.y = dot (tmpvar_7, tmpvar_7);
  tmpvar_10.z = dot (tmpvar_8, tmpvar_8);
  tmpvar_10.w = dot (tmpvar_9, tmpvar_9);
  bvec4 tmpvar_11;
  tmpvar_11 = lessThan (tmpvar_10, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_12;
  tmpvar_12 = vec4(tmpvar_11);
  cascadeWeights_3 = tmpvar_12;
  cascadeWeights_3.yzw = clamp ((cascadeWeights_3.yzw - cascadeWeights_3.xyz), 0.0, 1.0);
  highp vec3 p_13;
  p_13 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((sqrt(dot (p_13, p_13)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_3.x) + (xlv_TEXCOORD1 * cascadeWeights_3.y)) + (xlv_TEXCOORD2 * cascadeWeights_3.z)) + (xlv_TEXCOORD3 * cascadeWeights_3.w));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ShadowMapTexture, tmpvar_15.xy);
  highp float tmpvar_17;
  if ((tmpvar_16.x < tmpvar_15.z)) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  res_2.x = clamp ((tmpvar_17 + tmpvar_14), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_18.y = tmpvar_19.y;
  enc_18.x = (tmpvar_19.x - (tmpvar_19.y * 0.00392157));
  res_2.zw = enc_18;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 77 instructions, 4 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkncpodgpbmbfhpjgkellhmbikedhaljpabaaaaaaamanaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefceaalaaaaeaaaabaanaacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
biaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
dcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaaaaaaaaaaigbabaiaebaaaaaa
acaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
igbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaaaaaaaaaapgapbaaaaaaaaaaa
apaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaakgakbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaeaaaaaa
afaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaacaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaacaaaaaa
dkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
acaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaacaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkbabaaa
aeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaa
abaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaaaaaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaapgapbaiaebaaaaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaadaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaajaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaakaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaabaaaaaaegiccaaa
acaaaaaaalaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaamaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabaaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaabdaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
acaaaaaabfaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaabeaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabgaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaacaaaaaabhaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafhccabaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadgaaaaagiccabaaaafaaaaaaakaabaiaebaaaaaaaaaaaaaadcaaaaal
dccabaaaagaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 cascadeWeights_4;
  lowp float x_5;
  x_5 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_6, tmpvar_6);
  tmpvar_10.y = dot (tmpvar_7, tmpvar_7);
  tmpvar_10.z = dot (tmpvar_8, tmpvar_8);
  tmpvar_10.w = dot (tmpvar_9, tmpvar_9);
  bvec4 tmpvar_11;
  tmpvar_11 = lessThan (tmpvar_10, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_12;
  tmpvar_12 = vec4(tmpvar_11);
  cascadeWeights_4 = tmpvar_12;
  cascadeWeights_4.yzw = clamp ((cascadeWeights_4.yzw - cascadeWeights_4.xyz), 0.0, 1.0);
  highp vec3 p_13;
  p_13 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_4.x) + (xlv_TEXCOORD1 * cascadeWeights_4.y)) + (xlv_TEXCOORD2 * cascadeWeights_4.z)) + (xlv_TEXCOORD3 * cascadeWeights_4.w));
  lowp float tmpvar_15;
  tmpvar_15 = shadow2DEXT (_ShadowMapTexture, tmpvar_14.xyz);
  shadow_3 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_16;
  res_2.x = clamp ((shadow_3 + clamp (((sqrt(dot (p_13, p_13)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_17.y = tmpvar_18.y;
  enc_17.x = (tmpvar_18.x - (tmpvar_18.y * 0.00392157));
  res_2.zw = enc_17;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 524
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 526
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 528
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 530
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 532
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 534
    return SmoothCurve( TriangleWave( x));
}
#line 536
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 538
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 542
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 546
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 550
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 515
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 518
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 522
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 488
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 492
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 562
void TreeVertLeaf( inout appdata_full v ) {
    #line 564
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 568
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 653
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 656
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    highp vec4 wpos = (_Object2World * v.vertex);
    #line 660
    o._WorldPosViewZ.xyz = vec3( wpos);
    o._WorldPosViewZ.w = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord0 = (unity_World2Shadow[0] * wpos).xyz;
    o._ShadowCoord1 = (unity_World2Shadow[1] * wpos).xyz;
    #line 664
    o._ShadowCoord2 = (unity_World2Shadow[2] * wpos).xyz;
    o._ShadowCoord3 = (unity_World2Shadow[3] * wpos).xyz;
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval._ShadowCoord0);
    xlv_TEXCOORD1 = vec3(xl_retval._ShadowCoord1);
    xlv_TEXCOORD2 = vec3(xl_retval._ShadowCoord2);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord3);
    xlv_TEXCOORD4 = vec4(xl_retval._WorldPosViewZ);
    xlv_TEXCOORD5 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 220
highp vec2 EncodeFloatRG( in highp float v ) {
    highp vec2 kEncodeMul = vec2( 1.0, 255.0);
    highp float kEncodeBit = 0.00392157;
    #line 224
    highp vec2 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc.x -= (enc.y * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    highp vec3 fromCenter0 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[0].xyz);
    highp vec3 fromCenter1 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[1].xyz);
    highp vec3 fromCenter2 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[2].xyz);
    highp vec3 fromCenter3 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[3].xyz);
    #line 684
    highp vec4 distances2 = vec4( dot( fromCenter0, fromCenter0), dot( fromCenter1, fromCenter1), dot( fromCenter2, fromCenter2), dot( fromCenter3, fromCenter3));
    highp vec4 cascadeWeights = vec4(lessThan( distances2, unity_ShadowSplitSqRadii));
    cascadeWeights.yzw = xll_saturate_vf3((cascadeWeights.yzw - cascadeWeights.xyz));
    highp float sphereDist = distance( IN._WorldPosViewZ.xyz, unity_ShadowFadeCenterAndType.xyz);
    #line 688
    highp float shadowFade = xll_saturate_f(((sphereDist * _LightShadowData.z) + _LightShadowData.w));
    highp vec4 coord = vec4( ((((IN._ShadowCoord0 * cascadeWeights.x) + (IN._ShadowCoord1 * cascadeWeights.y)) + (IN._ShadowCoord2 * cascadeWeights.z)) + (IN._ShadowCoord3 * cascadeWeights.w)), 1.0);
    mediump float shadow = xll_shadow2D( _ShadowMapTexture, coord.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 692
    highp vec4 res;
    res.x = xll_saturate_f((shadow + shadowFade));
    res.y = 1.0;
    res.zw = EncodeFloatRG( (1.0 - (IN._WorldPosViewZ.w * _ProjectionParams.w)));
    #line 696
    return res;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3(xlv_TEXCOORD0);
    xlt_IN._ShadowCoord1 = vec3(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord2 = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord3 = vec3(xlv_TEXCOORD3);
    xlt_IN._WorldPosViewZ = vec4(xlv_TEXCOORD4);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec4 diff_ibl_7;
  highp vec3 worldNormal_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9.xyz * _Color.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD5).xyz * 2.0) - 1.0);
  worldNormal_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_DiffCubeIBL, worldNormal_8);
  diff_ibl_7.w = tmpvar_12.w;
  diff_ibl_7.xyz = (tmpvar_12.xyz * tmpvar_12.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((diff_ibl_7.xyz * ExposureIBL.x) * tmpvar_10);
  tmpvar_6 = tmpvar_13;
  tmpvar_6 = (tmpvar_6 * tmpvar_5.w);
  lowp float x_14;
  x_14 = (tmpvar_9.w - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_15;
  tmpvar_15 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_16;
  tmpvar_16 = vec4(tmpvar_15);
  zNear_4 = tmpvar_16;
  bvec4 tmpvar_17;
  tmpvar_17 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_18;
  tmpvar_18 = vec4(tmpvar_17);
  zFar_3 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (zNear_4 * zFar_3);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((((xlv_TEXCOORD0 * tmpvar_19.x) + (xlv_TEXCOORD1 * tmpvar_19.y)) + (xlv_TEXCOORD2 * tmpvar_19.z)) + (xlv_TEXCOORD3 * tmpvar_19.w));
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ShadowMapTexture, tmpvar_21.xy);
  highp float tmpvar_23;
  if ((tmpvar_22.x < tmpvar_21.z)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  res_2.x = clamp ((tmpvar_23 + tmpvar_20), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_24.y = tmpvar_25.y;
  enc_24.x = (tmpvar_25.x - (tmpvar_25.y * 0.00392157));
  res_2.zw = enc_24;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec4 diff_ibl_7;
  highp vec3 worldNormal_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9.xyz * _Color.xyz);
  lowp vec3 normal_11;
  normal_11.xy = ((texture2D (_BumpMap, xlv_TEXCOORD5).wy * 2.0) - 1.0);
  normal_11.z = sqrt((1.0 - clamp (dot (normal_11.xy, normal_11.xy), 0.0, 1.0)));
  worldNormal_8 = normal_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_DiffCubeIBL, worldNormal_8);
  diff_ibl_7.w = tmpvar_12.w;
  diff_ibl_7.xyz = (tmpvar_12.xyz * tmpvar_12.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((diff_ibl_7.xyz * ExposureIBL.x) * tmpvar_10);
  tmpvar_6 = tmpvar_13;
  tmpvar_6 = (tmpvar_6 * tmpvar_5.w);
  lowp float x_14;
  x_14 = (tmpvar_9.w - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_15;
  tmpvar_15 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_16;
  tmpvar_16 = vec4(tmpvar_15);
  zNear_4 = tmpvar_16;
  bvec4 tmpvar_17;
  tmpvar_17 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_18;
  tmpvar_18 = vec4(tmpvar_17);
  zFar_3 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (zNear_4 * zFar_3);
  highp float tmpvar_20;
  tmpvar_20 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((((xlv_TEXCOORD0 * tmpvar_19.x) + (xlv_TEXCOORD1 * tmpvar_19.y)) + (xlv_TEXCOORD2 * tmpvar_19.z)) + (xlv_TEXCOORD3 * tmpvar_19.w));
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_ShadowMapTexture, tmpvar_21.xy);
  highp float tmpvar_23;
  if ((tmpvar_22.x < tmpvar_21.z)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  res_2.x = clamp ((tmpvar_23 + tmpvar_20), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_24.y = tmpvar_25.y;
  enc_24.x = (tmpvar_25.x - (tmpvar_25.y * 0.00392157));
  res_2.zw = enc_24;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 77 instructions, 4 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkncpodgpbmbfhpjgkellhmbikedhaljpabaaaaaaamanaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefceaalaaaaeaaaabaanaacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
biaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
dcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaaaaaaaaaaigbabaiaebaaaaaa
acaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
igbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaaaaaaaaaapgapbaaaaaaaaaaa
apaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaakgakbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaeaaaaaa
afaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaacaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaacaaaaaa
dkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
acaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaacaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkbabaaa
aeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaa
abaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaaaaaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaapgapbaiaebaaaaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaadaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaajaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaakaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaabaaaaaaegiccaaa
acaaaaaaalaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaamaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabaaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaabdaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
acaaaaaabfaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaabeaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabgaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaacaaaaaabhaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafhccabaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadgaaaaagiccabaaaafaaaaaaakaabaiaebaaaaaaaaaaaaaadcaaaaal
dccabaaaagaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 zFar_4;
  highp vec4 zNear_5;
  lowp vec4 tmpvar_6;
  lowp vec3 tmpvar_7;
  lowp vec4 diff_ibl_8;
  highp vec3 worldNormal_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10.xyz * _Color.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD5).xyz * 2.0) - 1.0);
  worldNormal_9 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = textureCube (_DiffCubeIBL, worldNormal_9);
  diff_ibl_8.w = tmpvar_13.w;
  diff_ibl_8.xyz = (tmpvar_13.xyz * tmpvar_13.w);
  highp vec3 tmpvar_14;
  tmpvar_14 = ((diff_ibl_8.xyz * ExposureIBL.x) * tmpvar_11);
  tmpvar_7 = tmpvar_14;
  tmpvar_7 = (tmpvar_7 * tmpvar_6.w);
  lowp float x_15;
  x_15 = (tmpvar_10.w - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_16;
  tmpvar_16 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_17;
  tmpvar_17 = vec4(tmpvar_16);
  zNear_5 = tmpvar_17;
  bvec4 tmpvar_18;
  tmpvar_18 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_19;
  tmpvar_19 = vec4(tmpvar_18);
  zFar_4 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (zNear_5 * zFar_4);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((((xlv_TEXCOORD0 * tmpvar_20.x) + (xlv_TEXCOORD1 * tmpvar_20.y)) + (xlv_TEXCOORD2 * tmpvar_20.z)) + (xlv_TEXCOORD3 * tmpvar_20.w));
  lowp float tmpvar_22;
  tmpvar_22 = shadow2DEXT (_ShadowMapTexture, tmpvar_21.xyz);
  shadow_3 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_23;
  res_2.x = clamp ((shadow_3 + clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_24;
  highp vec2 tmpvar_25;
  tmpvar_25 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_24.y = tmpvar_25.y;
  enc_24.x = (tmpvar_25.x - (tmpvar_25.y * 0.00392157));
  res_2.zw = enc_24;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 629
#line 656
uniform highp vec4 _MainTex_ST;
#line 672
uniform lowp float _Cutoff;
#line 524
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 526
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 528
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 530
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 532
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 534
    return SmoothCurve( TriangleWave( x));
}
#line 536
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 538
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 542
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 546
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 550
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 515
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 518
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 522
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 488
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 492
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 562
void TreeVertLeaf( inout appdata_full v ) {
    #line 564
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 568
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 657
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 660
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    highp vec4 wpos = (_Object2World * v.vertex);
    #line 664
    o._WorldPosViewZ.xyz = vec3( wpos);
    o._WorldPosViewZ.w = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord0 = (unity_World2Shadow[0] * wpos).xyz;
    o._ShadowCoord1 = (unity_World2Shadow[1] * wpos).xyz;
    #line 668
    o._ShadowCoord2 = (unity_World2Shadow[2] * wpos).xyz;
    o._ShadowCoord3 = (unity_World2Shadow[3] * wpos).xyz;
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval._ShadowCoord0);
    xlv_TEXCOORD1 = vec3(xl_retval._ShadowCoord1);
    xlv_TEXCOORD2 = vec3(xl_retval._ShadowCoord2);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord3);
    xlv_TEXCOORD4 = vec4(xl_retval._WorldPosViewZ);
    xlv_TEXCOORD5 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 629
#line 656
uniform highp vec4 _MainTex_ST;
#line 672
uniform lowp float _Cutoff;
#line 220
highp vec2 EncodeFloatRG( in highp float v ) {
    highp vec2 kEncodeMul = vec2( 1.0, 255.0);
    highp float kEncodeBit = 0.00392157;
    #line 224
    highp vec2 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc.x -= (enc.y * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 629
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 633
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 637
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 641
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 673
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 676
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 680
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 684
    highp vec4 viewZ = vec4( IN._WorldPosViewZ.w);
    highp vec4 zNear = vec4(greaterThanEqual( viewZ, _LightSplitsNear));
    highp vec4 zFar = vec4(lessThan( viewZ, _LightSplitsFar));
    highp vec4 cascadeWeights = (zNear * zFar);
    #line 688
    highp float shadowFade = xll_saturate_f(((IN._WorldPosViewZ.w * _LightShadowData.z) + _LightShadowData.w));
    highp vec4 coord = vec4( ((((IN._ShadowCoord0 * cascadeWeights.x) + (IN._ShadowCoord1 * cascadeWeights.y)) + (IN._ShadowCoord2 * cascadeWeights.z)) + (IN._ShadowCoord3 * cascadeWeights.w)), 1.0);
    mediump float shadow = xll_shadow2D( _ShadowMapTexture, coord.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 692
    highp vec4 res;
    res.x = xll_saturate_f((shadow + shadowFade));
    res.y = 1.0;
    res.zw = EncodeFloatRG( (1.0 - (IN._WorldPosViewZ.w * _ProjectionParams.w)));
    #line 696
    return res;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3(xlv_TEXCOORD0);
    xlt_IN._ShadowCoord1 = vec3(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord2 = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord3 = vec3(xlv_TEXCOORD3);
    xlt_IN._WorldPosViewZ = vec4(xlv_TEXCOORD4);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD5).xyz * 2.0) - 1.0);
  worldNormal_7 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_11.w;
  diff_ibl_6.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_12;
  tmpvar_5 = (tmpvar_5 * tmpvar_4.w);
  lowp float x_13;
  x_13 = (tmpvar_8.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = dot (tmpvar_14, tmpvar_14);
  tmpvar_18.y = dot (tmpvar_15, tmpvar_15);
  tmpvar_18.z = dot (tmpvar_16, tmpvar_16);
  tmpvar_18.w = dot (tmpvar_17, tmpvar_17);
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (tmpvar_18, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_20;
  tmpvar_20 = vec4(tmpvar_19);
  cascadeWeights_3 = tmpvar_20;
  cascadeWeights_3.yzw = clamp ((cascadeWeights_3.yzw - cascadeWeights_3.xyz), 0.0, 1.0);
  highp vec3 p_21;
  p_21 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_22;
  tmpvar_22 = clamp (((sqrt(dot (p_21, p_21)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_3.x) + (xlv_TEXCOORD1 * cascadeWeights_3.y)) + (xlv_TEXCOORD2 * cascadeWeights_3.z)) + (xlv_TEXCOORD3 * cascadeWeights_3.w));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ShadowMapTexture, tmpvar_23.xy);
  highp float tmpvar_25;
  if ((tmpvar_24.x < tmpvar_23.z)) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  res_2.x = clamp ((tmpvar_25 + tmpvar_22), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_26.y = tmpvar_27.y;
  enc_26.x = (tmpvar_27.x - (tmpvar_27.y * 0.00392157));
  res_2.zw = enc_26;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp vec4 tmpvar_4;
  lowp vec3 tmpvar_5;
  lowp vec4 diff_ibl_6;
  highp vec3 worldNormal_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_9;
  tmpvar_9 = (tmpvar_8.xyz * _Color.xyz);
  lowp vec3 normal_10;
  normal_10.xy = ((texture2D (_BumpMap, xlv_TEXCOORD5).wy * 2.0) - 1.0);
  normal_10.z = sqrt((1.0 - clamp (dot (normal_10.xy, normal_10.xy), 0.0, 1.0)));
  worldNormal_7 = normal_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = textureCube (_DiffCubeIBL, worldNormal_7);
  diff_ibl_6.w = tmpvar_11.w;
  diff_ibl_6.xyz = (tmpvar_11.xyz * tmpvar_11.w);
  highp vec3 tmpvar_12;
  tmpvar_12 = ((diff_ibl_6.xyz * ExposureIBL.x) * tmpvar_9);
  tmpvar_5 = tmpvar_12;
  tmpvar_5 = (tmpvar_5 * tmpvar_4.w);
  lowp float x_13;
  x_13 = (tmpvar_8.w - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.x = dot (tmpvar_14, tmpvar_14);
  tmpvar_18.y = dot (tmpvar_15, tmpvar_15);
  tmpvar_18.z = dot (tmpvar_16, tmpvar_16);
  tmpvar_18.w = dot (tmpvar_17, tmpvar_17);
  bvec4 tmpvar_19;
  tmpvar_19 = lessThan (tmpvar_18, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_20;
  tmpvar_20 = vec4(tmpvar_19);
  cascadeWeights_3 = tmpvar_20;
  cascadeWeights_3.yzw = clamp ((cascadeWeights_3.yzw - cascadeWeights_3.xyz), 0.0, 1.0);
  highp vec3 p_21;
  p_21 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_22;
  tmpvar_22 = clamp (((sqrt(dot (p_21, p_21)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_3.x) + (xlv_TEXCOORD1 * cascadeWeights_3.y)) + (xlv_TEXCOORD2 * cascadeWeights_3.z)) + (xlv_TEXCOORD3 * cascadeWeights_3.w));
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_ShadowMapTexture, tmpvar_23.xy);
  highp float tmpvar_25;
  if ((tmpvar_24.x < tmpvar_23.z)) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  res_2.x = clamp ((tmpvar_25 + tmpvar_22), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_26.y = tmpvar_27.y;
  enc_26.x = (tmpvar_27.x - (tmpvar_27.y * 0.00392157));
  res_2.zw = enc_26;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 77 instructions, 4 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkncpodgpbmbfhpjgkellhmbikedhaljpabaaaaaaamanaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefceaalaaaaeaaaabaanaacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
biaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
dcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaaaaaaaaaaigbabaiaebaaaaaa
acaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
igbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaaaaaaaaaapgapbaaaaaaaaaaa
apaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaakgakbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaeaaaaaa
afaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaacaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaacaaaaaa
dkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
acaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaacaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkbabaaa
aeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaa
abaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaaaaaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaapgapbaiaebaaaaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaadaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaajaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaakaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaabaaaaaaegiccaaa
acaaaaaaalaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaamaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabaaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaabdaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
acaaaaaabfaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaabeaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabgaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaacaaaaaabhaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafhccabaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadgaaaaagiccabaaaafaaaaaaakaabaiaebaaaaaaaaaaaaaadcaaaaal
dccabaaaagaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform highp vec4 ExposureIBL;
uniform samplerCube _DiffCubeIBL;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 cascadeWeights_4;
  lowp vec4 tmpvar_5;
  lowp vec3 tmpvar_6;
  lowp vec4 diff_ibl_7;
  highp vec3 worldNormal_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD5);
  lowp vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_9.xyz * _Color.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD5).xyz * 2.0) - 1.0);
  worldNormal_8 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = textureCube (_DiffCubeIBL, worldNormal_8);
  diff_ibl_7.w = tmpvar_12.w;
  diff_ibl_7.xyz = (tmpvar_12.xyz * tmpvar_12.w);
  highp vec3 tmpvar_13;
  tmpvar_13 = ((diff_ibl_7.xyz * ExposureIBL.x) * tmpvar_10);
  tmpvar_6 = tmpvar_13;
  tmpvar_6 = (tmpvar_6 * tmpvar_5.w);
  lowp float x_14;
  x_14 = (tmpvar_9.w - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_19;
  tmpvar_19.x = dot (tmpvar_15, tmpvar_15);
  tmpvar_19.y = dot (tmpvar_16, tmpvar_16);
  tmpvar_19.z = dot (tmpvar_17, tmpvar_17);
  tmpvar_19.w = dot (tmpvar_18, tmpvar_18);
  bvec4 tmpvar_20;
  tmpvar_20 = lessThan (tmpvar_19, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_21;
  tmpvar_21 = vec4(tmpvar_20);
  cascadeWeights_4 = tmpvar_21;
  cascadeWeights_4.yzw = clamp ((cascadeWeights_4.yzw - cascadeWeights_4.xyz), 0.0, 1.0);
  highp vec3 p_22;
  p_22 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_4.x) + (xlv_TEXCOORD1 * cascadeWeights_4.y)) + (xlv_TEXCOORD2 * cascadeWeights_4.z)) + (xlv_TEXCOORD3 * cascadeWeights_4.w));
  lowp float tmpvar_24;
  tmpvar_24 = shadow2DEXT (_ShadowMapTexture, tmpvar_23.xyz);
  shadow_3 = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_25;
  res_2.x = clamp ((shadow_3 + clamp (((sqrt(dot (p_22, p_22)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_26;
  highp vec2 tmpvar_27;
  tmpvar_27 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_26.y = tmpvar_27.y;
  enc_26.x = (tmpvar_27.x - (tmpvar_27.y * 0.00392157));
  res_2.zw = enc_26;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 629
#line 656
uniform highp vec4 _MainTex_ST;
#line 672
uniform lowp float _Cutoff;
#line 524
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 526
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 528
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 530
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 532
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 534
    return SmoothCurve( TriangleWave( x));
}
#line 536
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 538
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 542
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 546
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 550
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 515
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 518
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 522
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 488
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 492
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 562
void TreeVertLeaf( inout appdata_full v ) {
    #line 564
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 568
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 657
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 660
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    highp vec4 wpos = (_Object2World * v.vertex);
    #line 664
    o._WorldPosViewZ.xyz = vec3( wpos);
    o._WorldPosViewZ.w = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord0 = (unity_World2Shadow[0] * wpos).xyz;
    o._ShadowCoord1 = (unity_World2Shadow[1] * wpos).xyz;
    #line 668
    o._ShadowCoord2 = (unity_World2Shadow[2] * wpos).xyz;
    o._ShadowCoord3 = (unity_World2Shadow[3] * wpos).xyz;
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval._ShadowCoord0);
    xlv_TEXCOORD1 = vec3(xl_retval._ShadowCoord1);
    xlv_TEXCOORD2 = vec3(xl_retval._ShadowCoord2);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord3);
    xlv_TEXCOORD4 = vec4(xl_retval._WorldPosViewZ);
    xlv_TEXCOORD5 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 620
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 645
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform samplerCube _DiffCubeIBL;
uniform highp vec4 ExposureIBL;
#line 629
#line 656
uniform highp vec4 _MainTex_ST;
#line 672
uniform lowp float _Cutoff;
#line 220
highp vec2 EncodeFloatRG( in highp float v ) {
    highp vec2 kEncodeMul = vec2( 1.0, 255.0);
    highp float kEncodeBit = 0.00392157;
    #line 224
    highp vec2 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc.x -= (enc.y * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 629
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 633
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 637
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    lowp vec4 diff_ibl = texture( _DiffCubeIBL, worldNormal);
    #line 641
    diff_ibl.xyz = (diff_ibl.xyz * diff_ibl.w);
    o.Emission = ((diff_ibl.xyz * ExposureIBL.x) * o.Albedo);
    o.Emission *= IN.color.w;
}
#line 673
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 676
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 680
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 684
    highp vec3 fromCenter0 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[0].xyz);
    highp vec3 fromCenter1 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[1].xyz);
    highp vec3 fromCenter2 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[2].xyz);
    highp vec3 fromCenter3 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[3].xyz);
    #line 688
    highp vec4 distances2 = vec4( dot( fromCenter0, fromCenter0), dot( fromCenter1, fromCenter1), dot( fromCenter2, fromCenter2), dot( fromCenter3, fromCenter3));
    highp vec4 cascadeWeights = vec4(lessThan( distances2, unity_ShadowSplitSqRadii));
    cascadeWeights.yzw = xll_saturate_vf3((cascadeWeights.yzw - cascadeWeights.xyz));
    highp float sphereDist = distance( IN._WorldPosViewZ.xyz, unity_ShadowFadeCenterAndType.xyz);
    #line 692
    highp float shadowFade = xll_saturate_f(((sphereDist * _LightShadowData.z) + _LightShadowData.w));
    highp vec4 coord = vec4( ((((IN._ShadowCoord0 * cascadeWeights.x) + (IN._ShadowCoord1 * cascadeWeights.y)) + (IN._ShadowCoord2 * cascadeWeights.z)) + (IN._ShadowCoord3 * cascadeWeights.w)), 1.0);
    mediump float shadow = xll_shadow2D( _ShadowMapTexture, coord.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 696
    highp vec4 res;
    res.x = xll_saturate_f((shadow + shadowFade));
    res.y = 1.0;
    res.zw = EncodeFloatRG( (1.0 - (IN._WorldPosViewZ.w * _ProjectionParams.w)));
    #line 700
    return res;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3(xlv_TEXCOORD0);
    xlt_IN._ShadowCoord1 = vec3(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord2 = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord3 = vec3(xlv_TEXCOORD3);
    xlt_IN._WorldPosViewZ = vec4(xlv_TEXCOORD4);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp float x_5;
  x_5 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_6;
  tmpvar_6 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_7;
  tmpvar_7 = vec4(tmpvar_6);
  zNear_4 = tmpvar_7;
  bvec4 tmpvar_8;
  tmpvar_8 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_9;
  tmpvar_9 = vec4(tmpvar_8);
  zFar_3 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (zNear_4 * zFar_3);
  highp float tmpvar_11;
  tmpvar_11 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = ((((xlv_TEXCOORD0 * tmpvar_10.x) + (xlv_TEXCOORD1 * tmpvar_10.y)) + (xlv_TEXCOORD2 * tmpvar_10.z)) + (xlv_TEXCOORD3 * tmpvar_10.w));
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ShadowMapTexture, tmpvar_12.xy);
  highp float tmpvar_14;
  if ((tmpvar_13.x < tmpvar_12.z)) {
    tmpvar_14 = _LightShadowData.x;
  } else {
    tmpvar_14 = 1.0;
  };
  res_2.x = clamp ((tmpvar_14 + tmpvar_11), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_15.y = tmpvar_16.y;
  enc_15.x = (tmpvar_16.x - (tmpvar_16.y * 0.00392157));
  res_2.zw = enc_15;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 zFar_3;
  highp vec4 zNear_4;
  lowp vec3 normal_5;
  normal_5.xy = ((texture2D (_BumpMap, xlv_TEXCOORD5).wy * 2.0) - 1.0);
  normal_5.z = sqrt((1.0 - clamp (dot (normal_5.xy, normal_5.xy), 0.0, 1.0)));
  lowp float x_6;
  x_6 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_7;
  tmpvar_7 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_8;
  tmpvar_8 = vec4(tmpvar_7);
  zNear_4 = tmpvar_8;
  bvec4 tmpvar_9;
  tmpvar_9 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_10;
  tmpvar_10 = vec4(tmpvar_9);
  zFar_3 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (zNear_4 * zFar_3);
  highp float tmpvar_12;
  tmpvar_12 = clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = ((((xlv_TEXCOORD0 * tmpvar_11.x) + (xlv_TEXCOORD1 * tmpvar_11.y)) + (xlv_TEXCOORD2 * tmpvar_11.z)) + (xlv_TEXCOORD3 * tmpvar_11.w));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ShadowMapTexture, tmpvar_13.xy);
  highp float tmpvar_15;
  if ((tmpvar_14.x < tmpvar_13.z)) {
    tmpvar_15 = _LightShadowData.x;
  } else {
    tmpvar_15 = 1.0;
  };
  res_2.x = clamp ((tmpvar_15 + tmpvar_12), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_16;
  highp vec2 tmpvar_17;
  tmpvar_17 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_16.y = tmpvar_17.y;
  enc_16.x = (tmpvar_17.x - (tmpvar_17.y * 0.00392157));
  res_2.zw = enc_16;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 77 instructions, 4 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkncpodgpbmbfhpjgkellhmbikedhaljpabaaaaaaamanaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefceaalaaaaeaaaabaanaacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
biaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
dcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaaaaaaaaaaigbabaiaebaaaaaa
acaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
igbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaaaaaaaaaapgapbaaaaaaaaaaa
apaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaakgakbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaeaaaaaa
afaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaacaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaacaaaaaa
dkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
acaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaacaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkbabaaa
aeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaa
abaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaaaaaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaapgapbaiaebaaaaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaadaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaajaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaakaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaabaaaaaaegiccaaa
acaaaaaaalaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaamaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabaaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaabdaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
acaaaaaabfaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaabeaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabgaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaacaaaaaabhaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafhccabaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadgaaaaagiccabaaaafaaaaaaakaabaiaebaaaaaaaaaaaaaadcaaaaal
dccabaaaagaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightSplitsFar;
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 zFar_4;
  highp vec4 zNear_5;
  lowp float x_6;
  x_6 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  bvec4 tmpvar_7;
  tmpvar_7 = greaterThanEqual (xlv_TEXCOORD4.wwww, _LightSplitsNear);
  lowp vec4 tmpvar_8;
  tmpvar_8 = vec4(tmpvar_7);
  zNear_5 = tmpvar_8;
  bvec4 tmpvar_9;
  tmpvar_9 = lessThan (xlv_TEXCOORD4.wwww, _LightSplitsFar);
  lowp vec4 tmpvar_10;
  tmpvar_10 = vec4(tmpvar_9);
  zFar_4 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = (zNear_5 * zFar_4);
  highp vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = ((((xlv_TEXCOORD0 * tmpvar_11.x) + (xlv_TEXCOORD1 * tmpvar_11.y)) + (xlv_TEXCOORD2 * tmpvar_11.z)) + (xlv_TEXCOORD3 * tmpvar_11.w));
  lowp float tmpvar_13;
  tmpvar_13 = shadow2DEXT (_ShadowMapTexture, tmpvar_12.xyz);
  shadow_3 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_14;
  res_2.x = clamp ((shadow_3 + clamp (((xlv_TEXCOORD4.w * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_15;
  highp vec2 tmpvar_16;
  tmpvar_16 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_15.y = tmpvar_16.y;
  enc_15.x = (tmpvar_16.x - (tmpvar_16.y * 0.00392157));
  res_2.zw = enc_15;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 524
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 526
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 528
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 530
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 532
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 534
    return SmoothCurve( TriangleWave( x));
}
#line 536
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 538
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 542
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 546
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 550
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 515
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 518
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 522
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 488
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 492
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 562
void TreeVertLeaf( inout appdata_full v ) {
    #line 564
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 568
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 653
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 656
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    highp vec4 wpos = (_Object2World * v.vertex);
    #line 660
    o._WorldPosViewZ.xyz = vec3( wpos);
    o._WorldPosViewZ.w = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord0 = (unity_World2Shadow[0] * wpos).xyz;
    o._ShadowCoord1 = (unity_World2Shadow[1] * wpos).xyz;
    #line 664
    o._ShadowCoord2 = (unity_World2Shadow[2] * wpos).xyz;
    o._ShadowCoord3 = (unity_World2Shadow[3] * wpos).xyz;
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval._ShadowCoord0);
    xlv_TEXCOORD1 = vec3(xl_retval._ShadowCoord1);
    xlv_TEXCOORD2 = vec3(xl_retval._ShadowCoord2);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord3);
    xlv_TEXCOORD4 = vec4(xl_retval._WorldPosViewZ);
    xlv_TEXCOORD5 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 220
highp vec2 EncodeFloatRG( in highp float v ) {
    highp vec2 kEncodeMul = vec2( 1.0, 255.0);
    highp float kEncodeBit = 0.00392157;
    #line 224
    highp vec2 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc.x -= (enc.y * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    highp vec4 viewZ = vec4( IN._WorldPosViewZ.w);
    highp vec4 zNear = vec4(greaterThanEqual( viewZ, _LightSplitsNear));
    highp vec4 zFar = vec4(lessThan( viewZ, _LightSplitsFar));
    highp vec4 cascadeWeights = (zNear * zFar);
    #line 684
    highp float shadowFade = xll_saturate_f(((IN._WorldPosViewZ.w * _LightShadowData.z) + _LightShadowData.w));
    highp vec4 coord = vec4( ((((IN._ShadowCoord0 * cascadeWeights.x) + (IN._ShadowCoord1 * cascadeWeights.y)) + (IN._ShadowCoord2 * cascadeWeights.z)) + (IN._ShadowCoord3 * cascadeWeights.w)), 1.0);
    mediump float shadow = xll_shadow2D( _ShadowMapTexture, coord.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 688
    highp vec4 res;
    res.x = xll_saturate_f((shadow + shadowFade));
    res.y = 1.0;
    res.zw = EncodeFloatRG( (1.0 - (IN._WorldPosViewZ.w * _ProjectionParams.w)));
    #line 692
    return res;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3(xlv_TEXCOORD0);
    xlt_IN._ShadowCoord1 = vec3(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord2 = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord3 = vec3(xlv_TEXCOORD3);
    xlt_IN._WorldPosViewZ = vec4(xlv_TEXCOORD4);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp float x_4;
  x_4 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_4 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_5;
  tmpvar_5 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_9;
  tmpvar_9.x = dot (tmpvar_5, tmpvar_5);
  tmpvar_9.y = dot (tmpvar_6, tmpvar_6);
  tmpvar_9.z = dot (tmpvar_7, tmpvar_7);
  tmpvar_9.w = dot (tmpvar_8, tmpvar_8);
  bvec4 tmpvar_10;
  tmpvar_10 = lessThan (tmpvar_9, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_11;
  tmpvar_11 = vec4(tmpvar_10);
  cascadeWeights_3 = tmpvar_11;
  cascadeWeights_3.yzw = clamp ((cascadeWeights_3.yzw - cascadeWeights_3.xyz), 0.0, 1.0);
  highp vec3 p_12;
  p_12 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_13;
  tmpvar_13 = clamp (((sqrt(dot (p_12, p_12)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_3.x) + (xlv_TEXCOORD1 * cascadeWeights_3.y)) + (xlv_TEXCOORD2 * cascadeWeights_3.z)) + (xlv_TEXCOORD3 * cascadeWeights_3.w));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_ShadowMapTexture, tmpvar_14.xy);
  highp float tmpvar_16;
  if ((tmpvar_15.x < tmpvar_14.z)) {
    tmpvar_16 = _LightShadowData.x;
  } else {
    tmpvar_16 = 1.0;
  };
  res_2.x = clamp ((tmpvar_16 + tmpvar_13), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_17.y = tmpvar_18.y;
  enc_17.x = (tmpvar_18.x - (tmpvar_18.y * 0.00392157));
  res_2.zw = enc_17;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  highp vec4 cascadeWeights_3;
  lowp vec3 normal_4;
  normal_4.xy = ((texture2D (_BumpMap, xlv_TEXCOORD5).wy * 2.0) - 1.0);
  normal_4.z = sqrt((1.0 - clamp (dot (normal_4.xy, normal_4.xy), 0.0, 1.0)));
  lowp float x_5;
  x_5 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_6, tmpvar_6);
  tmpvar_10.y = dot (tmpvar_7, tmpvar_7);
  tmpvar_10.z = dot (tmpvar_8, tmpvar_8);
  tmpvar_10.w = dot (tmpvar_9, tmpvar_9);
  bvec4 tmpvar_11;
  tmpvar_11 = lessThan (tmpvar_10, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_12;
  tmpvar_12 = vec4(tmpvar_11);
  cascadeWeights_3 = tmpvar_12;
  cascadeWeights_3.yzw = clamp ((cascadeWeights_3.yzw - cascadeWeights_3.xyz), 0.0, 1.0);
  highp vec3 p_13;
  p_13 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp float tmpvar_14;
  tmpvar_14 = clamp (((sqrt(dot (p_13, p_13)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_3.x) + (xlv_TEXCOORD1 * cascadeWeights_3.y)) + (xlv_TEXCOORD2 * cascadeWeights_3.z)) + (xlv_TEXCOORD3 * cascadeWeights_3.w));
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ShadowMapTexture, tmpvar_15.xy);
  highp float tmpvar_17;
  if ((tmpvar_16.x < tmpvar_15.z)) {
    tmpvar_17 = _LightShadowData.x;
  } else {
    tmpvar_17 = 1.0;
  };
  res_2.x = clamp ((tmpvar_17 + tmpvar_14), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_18;
  highp vec2 tmpvar_19;
  tmpvar_19 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_18.y = tmpvar_19.y;
  enc_18.x = (tmpvar_19.x - (tmpvar_19.y * 0.00392157));
  res_2.zw = enc_18;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" ATTR14
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Vector 33 [_Time]
Matrix 13 [unity_World2Shadow0]
Matrix 17 [unity_World2Shadow1]
Matrix 21 [unity_World2Shadow2]
Matrix 25 [unity_World2Shadow3]
Matrix 29 [_Object2World]
Vector 34 [_Scale]
Vector 35 [_SquashPlaneNormal]
Float 36 [_SquashAmount]
Vector 37 [_Wind]
Vector 38 [_MainTex_ST]
"3.0-!!ARBvp1.0
# 70 ALU
PARAM c[41] = { { 0, 1, 2, -0.5 },
		state.matrix.modelview[0],
		state.matrix.mvp,
		state.matrix.modelview[0].invtrans,
		program.local[13..38],
		{ 1.975, 0.79299998, 0.375, 0.193 },
		{ 3, 0.30000001, 0.1 } };
TEMP R0;
TEMP R1;
TEMP R2;
TEMP R3;
MUL R0, vertex.normal.y, c[10];
MAD R1, vertex.normal.x, c[9], R0;
ADD R0.xyz, R1, c[0].x;
ABS R2.x, vertex.attrib[14].w;
ADD R2.w, -R2.x, c[0].y;
MAD R0.xyz, R0, R2.w, vertex.position;
MAD R1, vertex.normal.z, c[11], R1;
ADD R3, R1, c[0].x;
DP4 R3.y, R3, R3;
MOV R0.w, c[0].y;
DP3 R0.w, R0.w, c[32];
MUL R2.xyz, R0, c[34];
ADD R0.w, vertex.color.x, R0;
ADD R0.x, vertex.color.y, R0.w;
MOV R0.y, R0.w;
DP3 R0.x, R2, R0.x;
ADD R0.xy, R0, c[33].y;
MUL R0, R0.xxyy, c[39];
FRC R0, R0;
MAD R0, R0, c[0].z, c[0].w;
FRC R0, R0;
MAD R0, R0, c[0].z, -c[0].y;
ABS R0, R0;
MUL R1, -R0, c[0].z;
ADD R1, R1, c[40].x;
MUL R0, R0, R0;
MUL R0, R0, R1;
RSQ R3.y, R3.y;
MAD R1.xy, R3.y, R3.xzzw, -vertex.normal.xzzw;
ADD R3.xy, R0.xzzw, R0.ywzw;
MAD R0.xy, R2.w, R1, vertex.normal.xzzw;
MUL R0.xy, vertex.color.y, R0;
MUL R0.xz, R0.xyyw, c[40].z;
MUL R1.xyz, R3.y, c[37];
MOV R2.w, c[0].y;
MUL R1.xyz, vertex.texcoord[1].y, R1;
MUL R0.y, vertex.texcoord[1], c[40];
MAD R0.xyz, R3.xyxw, R0, R1;
MAD R0.xyz, R0, c[37].w, R2;
MAD R1.xyz, vertex.texcoord[1].x, c[37], R0;
DP3 R0.x, R1, c[35];
ADD R0.x, R0, c[35].w;
MUL R0.xyz, R0.x, c[35];
ADD R1.xyz, -R0, R1;
MAD R2.xyz, R0, c[36].x, R1;
DP4 R0.w, R2, c[3];
DP4 R1.w, R2, c[32];
DP4 R0.z, R2, c[31];
DP4 R0.x, R2, c[29];
DP4 R0.y, R2, c[30];
MOV R1.xyz, R0;
MOV R0.w, -R0;
DP4 result.texcoord[0].z, R1, c[15];
DP4 result.texcoord[0].y, R1, c[14];
DP4 result.texcoord[0].x, R1, c[13];
DP4 result.texcoord[1].z, R1, c[19];
DP4 result.texcoord[1].y, R1, c[18];
DP4 result.texcoord[1].x, R1, c[17];
DP4 result.texcoord[2].z, R1, c[23];
DP4 result.texcoord[2].y, R1, c[22];
DP4 result.texcoord[2].x, R1, c[21];
DP4 result.texcoord[3].z, R1, c[27];
DP4 result.texcoord[3].y, R1, c[26];
DP4 result.texcoord[3].x, R1, c[25];
MOV result.texcoord[4], R0;
DP4 result.position.w, R2, c[8];
DP4 result.position.z, R2, c[7];
DP4 result.position.y, R2, c[6];
DP4 result.position.x, R2, c[5];
MAD result.texcoord[5].xy, vertex.texcoord[0], c[38], c[38].zwzw;
END
# 70 instructions, 4 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
Matrix 0 [glstate_matrix_modelview0]
Matrix 4 [glstate_matrix_mvp]
Matrix 8 [glstate_matrix_invtrans_modelview0]
Vector 32 [_Time]
Matrix 12 [unity_World2Shadow0]
Matrix 16 [unity_World2Shadow1]
Matrix 20 [unity_World2Shadow2]
Matrix 24 [unity_World2Shadow3]
Matrix 28 [_Object2World]
Vector 33 [_Scale]
Vector 34 [_SquashPlaneNormal]
Float 35 [_SquashAmount]
Vector 36 [_Wind]
Vector 37 [_MainTex_ST]
"vs_3_0
; 73 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
def c38, 0.00000000, 1.00000000, 2.00000000, -0.50000000
def c39, 1.97500002, 0.79299998, 0.37500000, 0.19300000
def c40, 2.00000000, -1.00000000, 3.00000000, 0.30000001
def c41, 0.10000000, 0, 0, 0
dcl_position0 v0
dcl_tangent0 v1
dcl_normal0 v2
dcl_texcoord0 v3
dcl_texcoord1 v4
dcl_color0 v5
mul r0, v2.y, c9
mad r1, v2.x, c8, r0
add r0.xyz, r1, c38.x
abs r0.w, v1
add r3.w, -r0, c38.y
mad r0.xyz, r0, r3.w, v0
mov r2.xyz, c31
dp3 r0.w, c38.y, r2
mad r1, v2.z, c10, r1
add r2, r1, c38.x
dp4 r2.y, r2, r2
mov r2.w, c38.y
mul r3.xyz, r0, c33
add r0.w, v5.x, r0
add r0.x, v5.y, r0.w
mov r0.y, r0.w
dp3 r0.x, r3, r0.x
add r0.xy, r0, c32.y
mul r0, r0.xxyy, c39
frc r0, r0
mad r0, r0, c38.z, c38.w
frc r0, r0
mad r0, r0, c40.x, c40.y
abs r0, r0
mul r1, r0, r0
mad r0, -r0, c40.x, c40.z
mul r0, r1, r0
rsq r2.y, r2.y
mad r1.xy, r2.y, r2.xzzw, -v2.xzzw
add r2.xy, r0.xzzw, r0.ywzw
mad r0.xy, r3.w, r1, v2.xzzw
mul r0.xy, v5.y, r0
mul r1.xyz, r2.y, c36
mul r0.xz, r0.xyyw, c41.x
mul r1.xyz, v4.y, r1
mul r0.y, v4, c40.w
mad r0.xyz, r2.xyxw, r0, r1
mad r0.xyz, r0, c36.w, r3
mad r1.xyz, v4.x, c36, r0
dp3 r0.x, r1, c34
add r0.x, r0, c34.w
mul r0.xyz, r0.x, c34
add r1.xyz, -r0, r1
mad r2.xyz, r0, c35.x, r1
dp4 r0.w, r2, c2
dp4 r1.w, r2, c31
dp4 r0.z, r2, c30
dp4 r0.x, r2, c28
dp4 r0.y, r2, c29
mov r1.xyz, r0
mov r0.w, -r0
dp4 o1.z, r1, c14
dp4 o1.y, r1, c13
dp4 o1.x, r1, c12
dp4 o2.z, r1, c18
dp4 o2.y, r1, c17
dp4 o2.x, r1, c16
dp4 o3.z, r1, c22
dp4 o3.y, r1, c21
dp4 o3.x, r1, c20
dp4 o4.z, r1, c26
dp4 o4.y, r1, c25
dp4 o4.x, r1, c24
mov o5, r0
dp4 o0.w, r2, c7
dp4 o0.z, r2, c6
dp4 o0.y, r2, c5
dp4 o0.x, r2, c4
mad o6.xy, v3, c37, c37.zwzw
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Bind "vertex" Vertex
Bind "tangent" TexCoord2
Bind "normal" Normal
Bind "texcoord" TexCoord0
Bind "texcoord1" TexCoord1
Bind "color" Color
ConstBuffer "$Globals" 160 // 144 used size, 12 vars
Vector 48 [_Wind] 4
Vector 128 [_MainTex_ST] 4
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
ConstBuffer "UnityShadows" 416 // 384 used size, 8 vars
Matrix 128 [unity_World2Shadow0] 4
Matrix 192 [unity_World2Shadow1] 4
Matrix 256 [unity_World2Shadow2] 4
Matrix 320 [unity_World2Shadow3] 4
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 64 [glstate_matrix_modelview0] 4
Matrix 128 [glstate_matrix_invtrans_modelview0] 4
Matrix 192 [_Object2World] 4
ConstBuffer "UnityTerrain" 256 // 180 used size, 14 vars
Vector 80 [_Scale] 4
Vector 160 [_SquashPlaneNormal] 4
Float 176 [_SquashAmount]
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
BindCB "UnityPerDraw" 3
BindCB "UnityTerrain" 4
// 77 instructions, 4 temp regs, 0 temp arrays:
// ALU 71 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedkncpodgpbmbfhpjgkellhmbikedhaljpabaaaaaaamanaaaaadaaaaaa
cmaaaaaapeaaaaaameabaaaaejfdeheomaaaaaaaagaaaaaaaiaaaaaajiaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapahaaaakbaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaapaiaaaakjaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaadaaaaaaapadaaaalaaaaaaa
abaaaaaaaaaaaaaaadaaaaaaaeaaaaaaapadaaaaljaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapadaaaafaepfdejfeejepeoaafeebeoehefeofeaaeoepfc
enebemaafeeffiedepepfceeaaedepemepfcaaklepfdeheomiaaaaaaahaaaaaa
aiaaaaaalaaaaaaaaaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaalmaaaaaaabaaaaaaaaaaaaaa
adaaaaaaacaaaaaaahaiaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaa
ahaiaaaalmaaaaaaadaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahaiaaaalmaaaaaa
aeaaaaaaaaaaaaaaadaaaaaaafaaaaaaapaaaaaalmaaaaaaafaaaaaaaaaaaaaa
adaaaaaaagaaaaaaadamaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfcee
aaklklklfdeieefceaalaaaaeaaaabaanaacaaaafjaaaaaeegiocaaaaaaaaaaa
ajaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafjaaaaaeegiocaaaacaaaaaa
biaaaaaafjaaaaaeegiocaaaadaaaaaabaaaaaaafjaaaaaeegiocaaaaeaaaaaa
amaaaaaafpaaaaadhcbabaaaaaaaaaaafpaaaaadicbabaaaabaaaaaafpaaaaad
hcbabaaaacaaaaaafpaaaaaddcbabaaaadaaaaaafpaaaaaddcbabaaaaeaaaaaa
fpaaaaaddcbabaaaafaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaad
hccabaaaabaaaaaagfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaa
gfaaaaadhccabaaaaeaaaaaagfaaaaadpccabaaaafaaaaaagfaaaaaddccabaaa
agaaaaaagiaaaaacaeaaaaaabaaaaaaiccaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaajaaaaaabaaaaaaiicaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaalaaaaaabaaaaaaibcaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaaiaaaaaabaaaaaaiecaabaaaaaaaaaaaegbcbaaaacaaaaaa
egiccaaaadaaaaaaakaaaaaabbaaaaahccaabaaaaaaaaaaaegaobaaaaaaaaaaa
egaobaaaaaaaaaaaeeaaaaafccaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
dcaabaaaaaaaaaaaigaabaaaaaaaaaaafgafbaaaaaaaaaaaigbabaiaebaaaaaa
acaaaaaaaaaaaaaiecaabaaaaaaaaaaadkbabaiambaaaaaaabaaaaaaabeaaaaa
aaaaiadpdcaaaaajdcaabaaaaaaaaaaakgakbaaaaaaaaaaaegaabaaaaaaaaaaa
igbabaaaacaaaaaadiaaaaahicaabaaaaaaaaaaabkbabaaaafaaaaaaabeaaaaa
mnmmmmdndiaaaaahfcaabaaaabaaaaaaagabbaaaaaaaaaaapgapbaaaaaaaaaaa
apaaaaaibcaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaaiaaaaaa
apaaaaaiccaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaajaaaaaa
apaaaaaiecaabaaaacaaaaaaegbabaaaacaaaaaaegiacaaaadaaaaaaakaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegacbaaaacaaaaaakgakbaaaaaaaaaaaegbcbaaa
aaaaaaaadiaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegiccaaaaeaaaaaa
afaaaaaadgaaaaagbcaabaaaacaaaaaadkiacaaaadaaaaaaamaaaaaadgaaaaag
ccaabaaaacaaaaaadkiacaaaadaaaaaaanaaaaaadgaaaaagecaabaaaacaaaaaa
dkiacaaaadaaaaaaaoaaaaaabaaaaaakicaabaaaaaaaaaaaegacbaaaacaaaaaa
aceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaaaaaaaaaaaahccaabaaaacaaaaaa
dkaabaaaaaaaaaaaakbabaaaafaaaaaaaaaaaaahicaabaaaaaaaaaaabkaabaaa
acaaaaaabkbabaaaafaaaaaabaaaaaahbcaabaaaacaaaaaaegacbaaaaaaaaaaa
pgapbaaaaaaaaaaaaaaaaaaipcaabaaaacaaaaaaagafbaaaacaaaaaafgifcaaa
abaaaaaaaaaaaaaadiaaaaakpcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaa
mnmmpmdpamaceldpaaaamadomlkbefdobkaaaaafpcaabaaaacaaaaaaegaobaaa
acaaaaaadcaaaaappcaabaaaacaaaaaaegaobaaaacaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaeaaceaaaaaaaaaaalpaaaaaalpaaaaaalpaaaaaalp
bkaaaaafpcaabaaaacaaaaaaegaobaaaacaaaaaadcaaaaappcaabaaaacaaaaaa
egaobaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaeaaceaaaaa
aaaaialpaaaaialpaaaaialpaaaaialpdiaaaaajpcaabaaaadaaaaaaegaobaia
ibaaaaaaacaaaaaaegaobaiaibaaaaaaacaaaaaadcaaaabapcaabaaaacaaaaaa
egaobaiambaaaaaaacaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaea
aceaaaaaaaaaeaeaaaaaeaeaaaaaeaeaaaaaeaeadiaaaaahpcaabaaaacaaaaaa
egaobaaaacaaaaaaegaobaaaadaaaaaaaaaaaaahdcaabaaaacaaaaaangafbaaa
acaaaaaaigaabaaaacaaaaaadiaaaaaihcaabaaaadaaaaaafgafbaaaacaaaaaa
egiccaaaaaaaaaaaadaaaaaadiaaaaahhcaabaaaadaaaaaaegacbaaaadaaaaaa
fgbfbaaaaeaaaaaadiaaaaahccaabaaaabaaaaaabkaabaaaacaaaaaabkbabaaa
aeaaaaaadgaaaaafecaabaaaacaaaaaaabeaaaaajkjjjjdodcaaaaajhcaabaaa
abaaaaaaigaabaaaacaaaaaaegacbaaaabaaaaaaegacbaaaadaaaaaadcaaaaak
hcaabaaaaaaaaaaaegacbaaaabaaaaaapgipcaaaaaaaaaaaadaaaaaaegacbaaa
aaaaaaaadcaaaaakhcaabaaaaaaaaaaaagbabaaaaeaaaaaaegiccaaaaaaaaaaa
adaaaaaaegacbaaaaaaaaaaabaaaaaaiicaabaaaaaaaaaaaegiccaaaaeaaaaaa
akaaaaaaegacbaaaaaaaaaaaaaaaaaaiicaabaaaaaaaaaaadkaabaaaaaaaaaaa
dkiacaaaaeaaaaaaakaaaaaadcaaaaalhcaabaaaabaaaaaapgapbaiaebaaaaaa
aaaaaaaaegiccaaaaeaaaaaaakaaaaaaegacbaaaaaaaaaaaaaaaaaaihcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaiaebaaaaaaabaaaaaadcaaaaakhcaabaaa
aaaaaaaaagiacaaaaeaaaaaaalaaaaaaegacbaaaaaaaaaaaegacbaaaabaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaadaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaadaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaaaaaaaaaipccabaaaaaaaaaaaegaobaaa
abaaaaaaegiocaaaadaaaaaaadaaaaaadiaaaaaipcaabaaaabaaaaaafgafbaaa
aaaaaaaaegiocaaaadaaaaaaanaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaa
adaaaaaaamaaaaaaagaabaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpcaabaaa
abaaaaaaegiocaaaadaaaaaaaoaaaaaakgakbaaaaaaaaaaaegaobaaaabaaaaaa
aaaaaaaipcaabaaaabaaaaaaegaobaaaabaaaaaaegiocaaaadaaaaaaapaaaaaa
diaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaajaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaiaaaaaaagaabaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaakaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaaabaaaaaaegiccaaa
acaaaaaaalaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaa
acaaaaaafgafbaaaabaaaaaaegiccaaaacaaaaaaanaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaaamaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaaaoaaaaaakgakbaaaabaaaaaa
egacbaaaacaaaaaadcaaaaakhccabaaaacaaaaaaegiccaaaacaaaaaaapaaaaaa
pgapbaaaabaaaaaaegacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaa
abaaaaaaegiccaaaacaaaaaabbaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabaaaaaaaagaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaa
acaaaaaaegiccaaaacaaaaaabcaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaa
dcaaaaakhccabaaaadaaaaaaegiccaaaacaaaaaabdaaaaaapgapbaaaabaaaaaa
egacbaaaacaaaaaadiaaaaaihcaabaaaacaaaaaafgafbaaaabaaaaaaegiccaaa
acaaaaaabfaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaaacaaaaaabeaaaaaa
agaabaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhcaabaaaacaaaaaaegiccaaa
acaaaaaabgaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaadcaaaaakhccabaaa
aeaaaaaaegiccaaaacaaaaaabhaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaa
dgaaaaafhccabaaaafaaaaaaegacbaaaabaaaaaadiaaaaaiccaabaaaaaaaaaaa
bkaabaaaaaaaaaaackiacaaaadaaaaaaafaaaaaadcaaaaakbcaabaaaaaaaaaaa
ckiacaaaadaaaaaaaeaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaadcaaaaak
bcaabaaaaaaaaaaackiacaaaadaaaaaaagaaaaaackaabaaaaaaaaaaaakaabaaa
aaaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaaaaaaaaaaackiacaaaadaaaaaa
ahaaaaaadgaaaaagiccabaaaafaaaaaaakaabaiaebaaaaaaaaaaaaaadcaaaaal
dccabaaaagaaaaaaegbabaaaadaaaaaaegiacaaaaaaaaaaaaiaaaaaaogikcaaa
aaaaaaaaaiaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _Wind;
uniform highp float _SquashAmount;
uniform highp vec4 _SquashPlaneNormal;
uniform highp vec4 _Scale;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _Time;
attribute vec4 _glesTANGENT;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord0;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec4 tmpvar_2;
  highp float tmpvar_3;
  tmpvar_3 = (1.0 - abs(_glesTANGENT.w));
  highp vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = _glesNormal;
  highp vec4 tmpvar_5;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = _glesNormal.xy;
  highp vec4 tmpvar_6;
  tmpvar_6 = (_glesVertex + ((tmpvar_5 * glstate_matrix_invtrans_modelview0) * tmpvar_3));
  tmpvar_2.w = tmpvar_6.w;
  tmpvar_2.xyz = (tmpvar_6.xyz * _Scale.xyz);
  highp vec4 pos_7;
  pos_7.w = tmpvar_2.w;
  highp vec3 bend_8;
  vec4 v_9;
  v_9.x = _Object2World[0].w;
  v_9.y = _Object2World[1].w;
  v_9.z = _Object2World[2].w;
  v_9.w = _Object2World[3].w;
  highp float tmpvar_10;
  tmpvar_10 = (dot (v_9.xyz, vec3(1.0, 1.0, 1.0)) + _glesColor.x);
  highp vec2 tmpvar_11;
  tmpvar_11.x = dot (tmpvar_2.xyz, vec3((_glesColor.y + tmpvar_10)));
  tmpvar_11.y = tmpvar_10;
  highp vec4 tmpvar_12;
  tmpvar_12 = abs(((fract((((fract(((_Time.yy + tmpvar_11).xxyy * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0) + 0.5)) * 2.0) - 1.0));
  highp vec4 tmpvar_13;
  tmpvar_13 = ((tmpvar_12 * tmpvar_12) * (3.0 - (2.0 * tmpvar_12)));
  highp vec2 tmpvar_14;
  tmpvar_14 = (tmpvar_13.xz + tmpvar_13.yw);
  bend_8.xz = ((_glesColor.y * 0.1) * mix (_glesNormal, normalize((tmpvar_4 * glstate_matrix_invtrans_modelview0)).xyz, vec3(tmpvar_3))).xz;
  bend_8.y = (_glesMultiTexCoord1.y * 0.3);
  pos_7.xyz = (tmpvar_2.xyz + (((tmpvar_14.xyx * bend_8) + ((_Wind.xyz * tmpvar_14.y) * _glesMultiTexCoord1.y)) * _Wind.w));
  pos_7.xyz = (pos_7.xyz + (_glesMultiTexCoord1.x * _Wind.xyz));
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = mix ((pos_7.xyz - ((dot (_SquashPlaneNormal.xyz, pos_7.xyz) + _SquashPlaneNormal.w) * _SquashPlaneNormal.xyz)), pos_7.xyz, vec3(_SquashAmount));
  tmpvar_2 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_Object2World * tmpvar_15);
  tmpvar_1.xyz = tmpvar_16.xyz;
  tmpvar_1.w = -((glstate_matrix_modelview0 * tmpvar_15).z);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = (unity_World2Shadow[0] * tmpvar_16).xyz;
  xlv_TEXCOORD1 = (unity_World2Shadow[1] * tmpvar_16).xyz;
  xlv_TEXCOORD2 = (unity_World2Shadow[2] * tmpvar_16).xyz;
  xlv_TEXCOORD3 = (unity_World2Shadow[3] * tmpvar_16).xyz;
  xlv_TEXCOORD4 = tmpvar_1;
  xlv_TEXCOORD5 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shadow_samplers : enable
varying highp vec2 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp vec4 _LightShadowData;
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 _ProjectionParams;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 res_2;
  mediump float shadow_3;
  highp vec4 cascadeWeights_4;
  lowp float x_5;
  x_5 = (texture2D (_MainTex, xlv_TEXCOORD5).w - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  highp vec3 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[0].xyz);
  highp vec3 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[1].xyz);
  highp vec3 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[2].xyz);
  highp vec3 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xyz - unity_ShadowSplitSpheres[3].xyz);
  highp vec4 tmpvar_10;
  tmpvar_10.x = dot (tmpvar_6, tmpvar_6);
  tmpvar_10.y = dot (tmpvar_7, tmpvar_7);
  tmpvar_10.z = dot (tmpvar_8, tmpvar_8);
  tmpvar_10.w = dot (tmpvar_9, tmpvar_9);
  bvec4 tmpvar_11;
  tmpvar_11 = lessThan (tmpvar_10, unity_ShadowSplitSqRadii);
  lowp vec4 tmpvar_12;
  tmpvar_12 = vec4(tmpvar_11);
  cascadeWeights_4 = tmpvar_12;
  cascadeWeights_4.yzw = clamp ((cascadeWeights_4.yzw - cascadeWeights_4.xyz), 0.0, 1.0);
  highp vec3 p_13;
  p_13 = (xlv_TEXCOORD4.xyz - unity_ShadowFadeCenterAndType.xyz);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = ((((xlv_TEXCOORD0 * cascadeWeights_4.x) + (xlv_TEXCOORD1 * cascadeWeights_4.y)) + (xlv_TEXCOORD2 * cascadeWeights_4.z)) + (xlv_TEXCOORD3 * cascadeWeights_4.w));
  lowp float tmpvar_15;
  tmpvar_15 = shadow2DEXT (_ShadowMapTexture, tmpvar_14.xyz);
  shadow_3 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_LightShadowData.x + (shadow_3 * (1.0 - _LightShadowData.x)));
  shadow_3 = tmpvar_16;
  res_2.x = clamp ((shadow_3 + clamp (((sqrt(dot (p_13, p_13)) * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0)), 0.0, 1.0);
  res_2.y = 1.0;
  highp vec2 enc_17;
  highp vec2 tmpvar_18;
  tmpvar_18 = fract((vec2(1.0, 255.0) * (1.0 - (xlv_TEXCOORD4.w * _ProjectionParams.w))));
  enc_17.y = tmpvar_18.y;
  enc_17.x = (tmpvar_18.x - (tmpvar_18.y * 0.00392157));
  res_2.zw = enc_17;
  tmpvar_1 = res_2;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal _glesNormal
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;
#define gl_MultiTexCoord1 _glesMultiTexCoord1
in vec4 _glesMultiTexCoord1;
#define TANGENT _glesTANGENT
in vec4 _glesTANGENT;
vec2 xll_matrixindex_mf2x2_i (mat2 m, int i) { vec2 v; v.x=m[0][i]; v.y=m[1][i]; return v; }
vec3 xll_matrixindex_mf3x3_i (mat3 m, int i) { vec3 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; return v; }
vec4 xll_matrixindex_mf4x4_i (mat4 m, int i) { vec4 v; v.x=m[0][i]; v.y=m[1][i]; v.z=m[2][i]; v.w=m[3][i]; return v; }
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 524
highp vec4 SmoothCurve( in highp vec4 x ) {
    #line 526
    return ((x * x) * (3.0 - (2.0 * x)));
}
#line 528
highp vec4 TriangleWave( in highp vec4 x ) {
    #line 530
    return abs(((fract((x + 0.5)) * 2.0) - 1.0));
}
#line 532
highp vec4 SmoothTriangleWave( in highp vec4 x ) {
    #line 534
    return SmoothCurve( TriangleWave( x));
}
#line 536
highp vec4 AnimateVertex( in highp vec4 pos, in highp vec3 normal, in highp vec4 animParams ) {
    #line 538
    highp float fDetailAmp = 0.1;
    highp float fBranchAmp = 0.3;
    highp float fObjPhase = dot( xll_matrixindex_mf4x4_i (_Object2World, 3).xyz, vec3( 1.0));
    highp float fBranchPhase = (fObjPhase + animParams.x);
    #line 542
    highp float fVtxPhase = dot( pos.xyz, vec3( (animParams.y + fBranchPhase)));
    highp vec2 vWavesIn = (_Time.yy + vec2( fVtxPhase, fBranchPhase));
    highp vec4 vWaves = ((fract((vWavesIn.xxyy * vec4( 1.975, 0.793, 0.375, 0.193))) * 2.0) - 1.0);
    vWaves = SmoothTriangleWave( vWaves);
    #line 546
    highp vec2 vWavesSum = (vWaves.xz + vWaves.yw);
    highp vec3 bend = ((animParams.y * fDetailAmp) * normal.xyz);
    bend.y = (animParams.w * fBranchAmp);
    pos.xyz += (((vWavesSum.xyx * bend) + ((_Wind.xyz * vWavesSum.y) * animParams.w)) * _Wind.w);
    #line 550
    pos.xyz += (animParams.z * _Wind.xyz);
    return pos;
}
#line 515
void ExpandBillboard( in highp mat4 mat, inout highp vec4 pos, inout highp vec3 normal, inout highp vec4 tangent ) {
    highp float isBillboard = (1.0 - abs(tangent.w));
    #line 518
    highp vec3 norb = vec3( normalize((vec4( normal, 0.0) * mat)));
    highp vec3 tanb = vec3( normalize((vec4( tangent.xyz, 0.0) * mat)));
    pos += ((vec4( normal.xy, 0.0, 0.0) * mat) * isBillboard);
    normal = mix( normal, norb, vec3( isBillboard));
    #line 522
    tangent = mix( tangent, vec4( tanb, -1.0), vec4( isBillboard));
}
#line 488
highp vec4 Squash( in highp vec4 pos ) {
    highp vec3 planeNormal = _SquashPlaneNormal.xyz;
    highp vec3 projectedVertex = (pos.xyz - ((dot( planeNormal, vec3( pos)) + _SquashPlaneNormal.w) * planeNormal));
    #line 492
    pos = vec4( mix( projectedVertex, pos.xyz, vec3( _SquashAmount)), 1.0);
    return pos;
}
#line 562
void TreeVertLeaf( inout appdata_full v ) {
    #line 564
    ExpandBillboard( glstate_matrix_invtrans_modelview0, v.vertex, v.normal, v.tangent);
    v.vertex.xyz *= _Scale.xyz;
    v.vertex = AnimateVertex( v.vertex, v.normal, vec4( v.color.xy, v.texcoord1.xy));
    v.vertex = Squash( v.vertex);
    #line 568
    v.color = vec4( 1.0, 1.0, 1.0, v.color.w);
    v.normal = normalize(v.normal);
    v.tangent.xyz = normalize(v.tangent.xyz);
}
#line 653
v2f_surf vert_surf( in appdata_full v ) {
    v2f_surf o;
    #line 656
    TreeVertLeaf( v);
    o.pack0.xy = ((v.texcoord.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
    o.pos = (glstate_matrix_mvp * v.vertex);
    highp vec4 wpos = (_Object2World * v.vertex);
    #line 660
    o._WorldPosViewZ.xyz = vec3( wpos);
    o._WorldPosViewZ.w = (-(glstate_matrix_modelview0 * v.vertex).z);
    o._ShadowCoord0 = (unity_World2Shadow[0] * wpos).xyz;
    o._ShadowCoord1 = (unity_World2Shadow[1] * wpos).xyz;
    #line 664
    o._ShadowCoord2 = (unity_World2Shadow[2] * wpos).xyz;
    o._ShadowCoord3 = (unity_World2Shadow[3] * wpos).xyz;
    return o;
}

out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec2 xlv_TEXCOORD5;
void main() {
    v2f_surf xl_retval;
    appdata_full xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.tangent = vec4(TANGENT);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xlt_v.texcoord1 = vec4(gl_MultiTexCoord1);
    xlt_v.color = vec4(gl_Color);
    xl_retval = vert_surf( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = vec3(xl_retval._ShadowCoord0);
    xlv_TEXCOORD1 = vec3(xl_retval._ShadowCoord1);
    xlv_TEXCOORD2 = vec3(xl_retval._ShadowCoord2);
    xlv_TEXCOORD3 = vec3(xl_retval._ShadowCoord3);
    xlv_TEXCOORD4 = vec4(xl_retval._WorldPosViewZ);
    xlv_TEXCOORD5 = vec2(xl_retval.pack0);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 316
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 67
struct appdata_full {
    highp vec4 vertex;
    highp vec4 tangent;
    highp vec3 normal;
    highp vec4 texcoord;
    highp vec4 texcoord1;
    lowp vec4 color;
};
#line 586
struct LeafSurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    lowp float Translucency;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 619
struct Input {
    highp vec2 uv_MainTex;
    lowp vec4 color;
    highp vec3 viewDir;
    highp vec3 worldNormal;
    highp vec3 worldRefl;
};
#line 641
struct v2f_surf {
    highp vec4 pos;
    highp vec3 _ShadowCoord0;
    highp vec3 _ShadowCoord1;
    highp vec3 _ShadowCoord2;
    highp vec3 _ShadowCoord3;
    highp vec4 _WorldPosViewZ;
    highp vec2 pack0;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
#line 326
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 339
#line 347
#line 361
uniform lowp vec4 _WavingTint;
uniform highp vec4 _WaveAndDistance;
#line 394
uniform highp vec4 _CameraPosition;
uniform highp vec3 _CameraRight;
uniform highp vec3 _CameraUp;
uniform highp vec4 _Scale;
uniform highp mat4 _TerrainEngineBendTree;
#line 398
uniform highp vec4 _SquashPlaneNormal;
uniform highp float _SquashAmount;
uniform highp vec3 _TreeBillboardCameraRight;
uniform highp vec4 _TreeBillboardCameraUp;
#line 402
uniform highp vec4 _TreeBillboardCameraFront;
uniform highp vec4 _TreeBillboardCameraPos;
uniform highp vec4 _TreeBillboardDistances;
#line 422
#line 470
#line 488
#line 502
#line 514
uniform highp vec4 _Wind;
#line 582
uniform lowp vec4 _Color;
uniform lowp vec3 _TranslucencyColor;
uniform lowp float _TranslucencyViewDependency;
uniform mediump float _ShadowStrength;
#line 597
#line 613
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _GlossMap;
uniform sampler2D _TranslucencyMap;
#line 617
uniform mediump float _Shininess;
uniform highp vec4 ExposureIBL;
#line 628
#line 652
uniform highp vec4 _MainTex_ST;
#line 668
uniform lowp float _Cutoff;
#line 220
highp vec2 EncodeFloatRG( in highp float v ) {
    highp vec2 kEncodeMul = vec2( 1.0, 255.0);
    highp float kEncodeBit = 0.00392157;
    #line 224
    highp vec2 enc = (kEncodeMul * v);
    enc = fract(enc);
    enc.x -= (enc.y * kEncodeBit);
    return enc;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 628
void surf( in Input IN, inout LeafSurfaceOutput o ) {
    lowp vec4 c = texture( _MainTex, IN.uv_MainTex);
    o.Albedo = (c.xyz * _Color.xyz);
    #line 632
    o.Translucency = float( texture( _TranslucencyMap, IN.uv_MainTex).xyz);
    o.Gloss = texture( _GlossMap, IN.uv_MainTex).w;
    o.Alpha = c.w;
    o.Specular = _Shininess;
    #line 636
    o.Normal = UnpackNormal( texture( _BumpMap, IN.uv_MainTex));
    o.Emission = vec3( 0.0);
    highp vec3 worldNormal = o.Normal;
    o.Emission *= IN.color.w;
}
#line 669
lowp vec4 frag_surf( in v2f_surf IN ) {
    Input surfIN;
    #line 672
    surfIN.uv_MainTex = IN.pack0.xy;
    LeafSurfaceOutput o;
    o.Albedo = vec3( 0.0);
    o.Emission = vec3( 0.0);
    #line 676
    o.Specular = 0.0;
    o.Alpha = 0.0;
    surf( surfIN, o);
    xll_clip_f((o.Alpha - _Cutoff));
    #line 680
    highp vec3 fromCenter0 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[0].xyz);
    highp vec3 fromCenter1 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[1].xyz);
    highp vec3 fromCenter2 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[2].xyz);
    highp vec3 fromCenter3 = (IN._WorldPosViewZ.xyz - unity_ShadowSplitSpheres[3].xyz);
    #line 684
    highp vec4 distances2 = vec4( dot( fromCenter0, fromCenter0), dot( fromCenter1, fromCenter1), dot( fromCenter2, fromCenter2), dot( fromCenter3, fromCenter3));
    highp vec4 cascadeWeights = vec4(lessThan( distances2, unity_ShadowSplitSqRadii));
    cascadeWeights.yzw = xll_saturate_vf3((cascadeWeights.yzw - cascadeWeights.xyz));
    highp float sphereDist = distance( IN._WorldPosViewZ.xyz, unity_ShadowFadeCenterAndType.xyz);
    #line 688
    highp float shadowFade = xll_saturate_f(((sphereDist * _LightShadowData.z) + _LightShadowData.w));
    highp vec4 coord = vec4( ((((IN._ShadowCoord0 * cascadeWeights.x) + (IN._ShadowCoord1 * cascadeWeights.y)) + (IN._ShadowCoord2 * cascadeWeights.z)) + (IN._ShadowCoord3 * cascadeWeights.w)), 1.0);
    mediump float shadow = xll_shadow2D( _ShadowMapTexture, coord.xyz);
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    #line 692
    highp vec4 res;
    res.x = xll_saturate_f((shadow + shadowFade));
    res.y = 1.0;
    res.zw = EncodeFloatRG( (1.0 - (IN._WorldPosViewZ.w * _ProjectionParams.w)));
    #line 696
    return res;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec2 xlv_TEXCOORD5;
void main() {
    lowp vec4 xl_retval;
    v2f_surf xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN._ShadowCoord0 = vec3(xlv_TEXCOORD0);
    xlt_IN._ShadowCoord1 = vec3(xlv_TEXCOORD1);
    xlt_IN._ShadowCoord2 = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord3 = vec3(xlv_TEXCOORD3);
    xlt_IN._WorldPosViewZ = vec4(xlv_TEXCOORD4);
    xlt_IN.pack0 = vec2(xlv_TEXCOORD5);
    xl_retval = frag_surf( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 16
//   opengl - ALU: 24 to 35, TEX: 2 to 2
//   d3d9 - ALU: 25 to 35, TEX: 3 to 3
//   d3d11 - ALU: 19 to 29, TEX: 1 to 1, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 24 ALU, 2 TEX
PARAM c[6] = { program.local[0..4],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
SLT R1, fragment.texcoord[4].w, c[2];
SGE R0, fragment.texcoord[4].w, c[1];
MUL R0, R0, R1;
MUL R1.xyz, R0.y, fragment.texcoord[1];
MAD R1.xyz, R0.x, fragment.texcoord[0], R1;
MAD R0.xyz, R0.z, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.w, R0;
TEX R0.x, R0, texture[2], 2D;
ADD R0.x, R0, -R0.z;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[4];
MOV R0.y, c[5].x;
CMP R0.y, R0.x, c[3].x, R0;
MAD_SAT R0.z, fragment.texcoord[4].w, c[3], c[3].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[5];
MUL R0.xy, R0.x, c[5];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[5].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[5].x;
END
# 24 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 25 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c5, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyzw
dcl_texcoord5 v5.xy
add r1, v4.w, -c2
add r0, v4.w, -c1
cmp r1, r1, c5.x, c5.y
cmp r0, r0, c5.y, c5.x
mul r0, r0, r1
mul r1.xyz, r0.y, v1
mad r1.xyz, r0.x, v0, r1
mad r0.xyz, r0.z, v2, r1
mad r0.xyz, v3, r0.w, r0
texld r0.x, r0, s2
add r0.x, r0, -r0.z
mov r0.y, c3.x
cmp r0.x, r0, c5.y, r0.y
mad_sat r0.z, v4.w, c3, c3.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c5
mul r1.xy, r0.y, c5.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c4
cmp r0.x, r0, c5, c5.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c5.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c5
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
"!!GLES"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 24 ALU, 2 TEX
OPTION ARB_fragment_program_shadow;
PARAM c[6] = { program.local[0..4],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
SLT R1, fragment.texcoord[4].w, c[2];
SGE R0, fragment.texcoord[4].w, c[1];
MUL R0, R0, R1;
MUL R1.xyz, R0.y, fragment.texcoord[1];
MAD R1.xyz, R0.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.z, fragment.texcoord[2], R1;
MAD R1.xyz, fragment.texcoord[3], R0.w, R1;
MOV R0.x, c[5];
ADD R0.y, R0.x, -c[3].x;
TEX R0.x, R1, texture[2], SHADOW2D;
MAD R0.y, R0.x, R0, c[3].x;
MAD_SAT R0.z, fragment.texcoord[4].w, c[3], c[3].w;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[4];
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[5];
MUL R0.xy, R0.x, c[5];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[5].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[5].x;
END
# 24 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 25 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c5, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyzw
dcl_texcoord5 v5.xy
add r1, v4.w, -c2
add r0, v4.w, -c1
cmp r1, r1, c5.x, c5.y
cmp r0, r0, c5.y, c5.x
mul r0, r0, r1
mul r1.xyz, r0.y, v1
mad r1.xyz, r0.x, v0, r1
mad r0.xyz, r0.z, v2, r1
mad r0.xyz, v3, r0.w, r0
texld r0.x, r0, s2
mov r0.w, c3.x
add r0.y, c5, -r0.w
mad r0.x, r0, r0.y, c3
mad_sat r0.z, v4.w, c3, c3.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c5
mul r1.xy, r0.y, c5.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c4
cmp r0.x, r0, c5, c5.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c5.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 96 [_LightSplitsNear] 4
Vector 112 [_LightSplitsFar] 4
Vector 384 [_LightShadowData] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_ShadowMapTexture] 2D 0
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 2 uint
// TEX 1 (0 load, 1 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddidlcfpheciclkcepkpdhphbgnfgiodiabaaaaaaceafaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomadaaaaeaaaaaaaplaaaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabjaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadicbabaaa
afaaaaaagcbaaaaddcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaagaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaabnaaaaaipcaabaaaaaaaaaaa
pgbpbaaaafaaaaaaegiocaaaacaaaaaaagaaaaaaabaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdbaaaaai
pcaabaaaabaaaaaapgbpbaaaafaaaaaaegiocaaaacaaaaaaahaaaaaaabaaaaak
pcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaafgafbaaaaaaaaaaaegbcbaaaacaaaaaadcaaaaaj
hcaabaaaabaaaaaaegbcbaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegbcbaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaegbcbaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaehaaaaalbcaabaaaaaaaaaaaegaabaaaaaaaaaaaaghabaaa
abaaaaaaaagabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
akiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaa
dccaaaalccaabaaaaaaaaaaadkbabaaaafaaaaaackiacaaaacaaaaaabiaaaaaa
dkiacaaaacaaaaaabiaaaaaaaacaaaahbccabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaalbcaabaaaaaaaaaaadkbabaiaebaaaaaaafaaaaaa
dkiacaaaabaaaaaaafaaaaaaabeaaaaaaaaaiadpdiaaaaakdcaabaaaaaaaaaaa
agaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaahpedaaaaaaaaaaaaaaaabkaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakeccabaaaaaaaaaaabkaabaia
ebaaaaaaaaaaaaaaabeaaaaaibiaiadlakaabaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaabkaabaaaaaaaaaaadgaaaaafcccabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 35 ALU, 2 TEX
PARAM c[10] = { program.local[0..8],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
TEMP R2;
ADD R0.xyz, fragment.texcoord[4], -c[1];
ADD R2.xyz, fragment.texcoord[4], -c[4];
DP3 R0.x, R0, R0;
ADD R1.xyz, fragment.texcoord[4], -c[2];
DP3 R0.y, R1, R1;
ADD R1.xyz, fragment.texcoord[4], -c[3];
DP3 R0.w, R2, R2;
DP3 R0.z, R1, R1;
SLT R2, R0, c[5];
ADD_SAT R0.xyz, R2.yzww, -R2;
MUL R1.xyz, R0.x, fragment.texcoord[1];
MAD R1.xyz, R2.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.y, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.z, R1;
TEX R0.x, R0, texture[2], 2D;
ADD R0.y, R0.x, -R0.z;
ADD R1.xyz, -fragment.texcoord[4], c[7];
DP3 R0.w, R1, R1;
RSQ R0.z, R0.w;
MOV R0.x, c[9];
CMP R0.y, R0, c[6].x, R0.x;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[8];
RCP R0.z, R0.z;
MAD_SAT R0.z, R0, c[6], c[6].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[9];
MUL R0.xy, R0.x, c[9];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[9].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[9].x;
END
# 35 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 35 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c9, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
add r0.xyz, v4, -c1
add r2.xyz, v4, -c4
dp3 r0.x, r0, r0
add r1.xyz, v4, -c2
dp3 r0.y, r1, r1
add r1.xyz, v4, -c3
dp3 r0.w, r2, r2
dp3 r0.z, r1, r1
add r0, r0, -c5
cmp r1, r0, c9.x, c9.y
add_sat r2.xyz, r1.yzww, -r1
mul r0.xyz, r2.x, v1
mad r0.xyz, r1.x, v0, r0
add r1.xyz, -v4, c7
mad r0.xyz, r2.y, v2, r0
mad r0.xyz, v3, r2.z, r0
texld r0.x, r0, s2
dp3 r0.w, r1, r1
rsq r0.y, r0.w
add r0.x, r0, -r0.z
rcp r0.z, r0.y
mov r0.y, c6.x
cmp r0.x, r0, c9.y, r0.y
mad_sat r0.z, r0, c6, c6.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c9
mul r1.xy, r0.y, c9.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c8
cmp r0.x, r0, c9, c9.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c9.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c9
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 35 ALU, 2 TEX
OPTION ARB_fragment_program_shadow;
PARAM c[10] = { program.local[0..8],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
TEMP R2;
ADD R0.xyz, fragment.texcoord[4], -c[1];
ADD R2.xyz, fragment.texcoord[4], -c[4];
DP3 R0.x, R0, R0;
ADD R1.xyz, fragment.texcoord[4], -c[2];
DP3 R0.y, R1, R1;
ADD R1.xyz, fragment.texcoord[4], -c[3];
DP3 R0.w, R2, R2;
DP3 R0.z, R1, R1;
SLT R2, R0, c[5];
ADD_SAT R0.xyz, R2.yzww, -R2;
MUL R1.xyz, R0.x, fragment.texcoord[1];
MAD R1.xyz, R2.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.y, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.z, R1;
TEX R0.x, R0, texture[2], SHADOW2D;
ADD R1.xyz, -fragment.texcoord[4], c[7];
DP3 R0.z, R1, R1;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[8];
MOV R0.y, c[9].x;
RSQ R0.z, R0.z;
ADD R0.y, R0, -c[6].x;
MAD R0.y, R0.x, R0, c[6].x;
RCP R0.z, R0.z;
MAD_SAT R0.z, R0, c[6], c[6].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[9];
MUL R0.xy, R0.x, c[9];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[9].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[9].x;
END
# 35 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 35 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c9, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
add r0.xyz, v4, -c1
add r2.xyz, v4, -c4
dp3 r0.x, r0, r0
add r1.xyz, v4, -c2
dp3 r0.y, r1, r1
add r1.xyz, v4, -c3
dp3 r0.w, r2, r2
dp3 r0.z, r1, r1
add r0, r0, -c5
cmp r1, r0, c9.x, c9.y
add_sat r2.xyz, r1.yzww, -r1
mul r0.xyz, r2.x, v1
mad r0.xyz, r1.x, v0, r0
add r1.xyz, -v4, c7
mad r0.xyz, r2.y, v2, r0
mad r0.xyz, v3, r2.z, r0
texld r0.x, r0, s2
dp3 r0.w, r1, r1
rsq r0.z, r0.w
mov r0.y, c6.x
add r0.y, c9, -r0
mad r0.x, r0, r0.y, c6
rcp r0.z, r0.z
mad_sat r0.z, r0, c6, c6.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c9
mul r1.xy, r0.y, c9.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c8
cmp r0.x, r0, c9, c9.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c9.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c9
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 0 [unity_ShadowSplitSpheres0] 4
Vector 16 [unity_ShadowSplitSpheres1] 4
Vector 32 [unity_ShadowSplitSpheres2] 4
Vector 48 [unity_ShadowSplitSpheres3] 4
Vector 64 [unity_ShadowSplitSqRadii] 4
Vector 384 [_LightShadowData] 4
Vector 400 [unity_ShadowFadeCenterAndType] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_ShadowMapTexture] 2D 0
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 28 float, 0 int, 1 uint
// TEX 1 (0 load, 1 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednineicacbnpppeohfmioolodlpkoakndabaaaaaajeagaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfmafaaaaeaaaaaaafhabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagcbaaaaddcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaagaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahccaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaacaaaaaabaaaaaahecaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaadaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaadbaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaacaaaaaaaeaaaaaadhaaaaaphcaabaaaabaaaaaa
egacbaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaaaceaaaaa
aaaaaaiaaaaaaaiaaaaaaaiaaaaaaaaaabaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaahocaabaaa
aaaaaaaaagajbaaaabaaaaaafgaobaaaaaaaaaaadeaaaaakocaabaaaaaaaaaaa
fgaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegbcbaaaacaaaaaadcaaaaajhcaabaaa
abaaaaaaegbcbaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegbcbaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegbcbaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaehaaaaalbcaabaaaaaaaaaaaegaabaaaaaaaaaaaaghabaaaabaaaaaa
aagabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaaakiacaia
ebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaaaaaaaaaj
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaiaebaaaaaaacaaaaaabjaaaaaa
baaaaaahccaabaaaaaaaaaaajgahbaaaaaaaaaaajgahbaaaaaaaaaaaelaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadccaaaalccaabaaaaaaaaaaabkaabaaa
aaaaaaaackiacaaaacaaaaaabiaaaaaadkiacaaaacaaaaaabiaaaaaaaacaaaah
bccabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaalbcaabaaa
aaaaaaaadkbabaiaebaaaaaaafaaaaaadkiacaaaabaaaaaaafaaaaaaabeaaaaa
aaaaiadpdiaaaaakdcaabaaaaaaaaaaaagaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaahpedaaaaaaaaaaaaaaaabkaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
dcaaaaakeccabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaabeaaaaaibiaiadl
akaabaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaf
cccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 24 ALU, 2 TEX
PARAM c[6] = { program.local[0..4],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
SLT R1, fragment.texcoord[4].w, c[2];
SGE R0, fragment.texcoord[4].w, c[1];
MUL R0, R0, R1;
MUL R1.xyz, R0.y, fragment.texcoord[1];
MAD R1.xyz, R0.x, fragment.texcoord[0], R1;
MAD R0.xyz, R0.z, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.w, R0;
TEX R0.x, R0, texture[2], 2D;
ADD R0.x, R0, -R0.z;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[4];
MOV R0.y, c[5].x;
CMP R0.y, R0.x, c[3].x, R0;
MAD_SAT R0.z, fragment.texcoord[4].w, c[3], c[3].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[5];
MUL R0.xy, R0.x, c[5];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[5].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[5].x;
END
# 24 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 25 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c5, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyzw
dcl_texcoord5 v5.xy
add r1, v4.w, -c2
add r0, v4.w, -c1
cmp r1, r1, c5.x, c5.y
cmp r0, r0, c5.y, c5.x
mul r0, r0, r1
mul r1.xyz, r0.y, v1
mad r1.xyz, r0.x, v0, r1
mad r0.xyz, r0.z, v2, r1
mad r0.xyz, v3, r0.w, r0
texld r0.x, r0, s2
add r0.x, r0, -r0.z
mov r0.y, c3.x
cmp r0.x, r0, c5.y, r0.y
mad_sat r0.z, v4.w, c3, c3.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c5
mul r1.xy, r0.y, c5.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c4
cmp r0.x, r0, c5, c5.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c5.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c5
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
"!!GLES"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 24 ALU, 2 TEX
OPTION ARB_fragment_program_shadow;
PARAM c[6] = { program.local[0..4],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
SLT R1, fragment.texcoord[4].w, c[2];
SGE R0, fragment.texcoord[4].w, c[1];
MUL R0, R0, R1;
MUL R1.xyz, R0.y, fragment.texcoord[1];
MAD R1.xyz, R0.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.z, fragment.texcoord[2], R1;
MAD R1.xyz, fragment.texcoord[3], R0.w, R1;
MOV R0.x, c[5];
ADD R0.y, R0.x, -c[3].x;
TEX R0.x, R1, texture[2], SHADOW2D;
MAD R0.y, R0.x, R0, c[3].x;
MAD_SAT R0.z, fragment.texcoord[4].w, c[3], c[3].w;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[4];
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[5];
MUL R0.xy, R0.x, c[5];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[5].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[5].x;
END
# 24 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 25 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c5, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyzw
dcl_texcoord5 v5.xy
add r1, v4.w, -c2
add r0, v4.w, -c1
cmp r1, r1, c5.x, c5.y
cmp r0, r0, c5.y, c5.x
mul r0, r0, r1
mul r1.xyz, r0.y, v1
mad r1.xyz, r0.x, v0, r1
mad r0.xyz, r0.z, v2, r1
mad r0.xyz, v3, r0.w, r0
texld r0.x, r0, s2
mov r0.w, c3.x
add r0.y, c5, -r0.w
mad r0.x, r0, r0.y, c3
mad_sat r0.z, v4.w, c3, c3.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c5
mul r1.xy, r0.y, c5.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c4
cmp r0.x, r0, c5, c5.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c5.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 96 [_LightSplitsNear] 4
Vector 112 [_LightSplitsFar] 4
Vector 384 [_LightShadowData] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_ShadowMapTexture] 2D 0
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 2 uint
// TEX 1 (0 load, 1 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddidlcfpheciclkcepkpdhphbgnfgiodiabaaaaaaceafaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomadaaaaeaaaaaaaplaaaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabjaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadicbabaaa
afaaaaaagcbaaaaddcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaagaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaabnaaaaaipcaabaaaaaaaaaaa
pgbpbaaaafaaaaaaegiocaaaacaaaaaaagaaaaaaabaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdbaaaaai
pcaabaaaabaaaaaapgbpbaaaafaaaaaaegiocaaaacaaaaaaahaaaaaaabaaaaak
pcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaafgafbaaaaaaaaaaaegbcbaaaacaaaaaadcaaaaaj
hcaabaaaabaaaaaaegbcbaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegbcbaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaegbcbaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaehaaaaalbcaabaaaaaaaaaaaegaabaaaaaaaaaaaaghabaaa
abaaaaaaaagabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
akiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaa
dccaaaalccaabaaaaaaaaaaadkbabaaaafaaaaaackiacaaaacaaaaaabiaaaaaa
dkiacaaaacaaaaaabiaaaaaaaacaaaahbccabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaalbcaabaaaaaaaaaaadkbabaiaebaaaaaaafaaaaaa
dkiacaaaabaaaaaaafaaaaaaabeaaaaaaaaaiadpdiaaaaakdcaabaaaaaaaaaaa
agaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaahpedaaaaaaaaaaaaaaaabkaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakeccabaaaaaaaaaaabkaabaia
ebaaaaaaaaaaaaaaabeaaaaaibiaiadlakaabaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaabkaabaaaaaaaaaaadgaaaaafcccabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 35 ALU, 2 TEX
PARAM c[10] = { program.local[0..8],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
TEMP R2;
ADD R0.xyz, fragment.texcoord[4], -c[1];
ADD R2.xyz, fragment.texcoord[4], -c[4];
DP3 R0.x, R0, R0;
ADD R1.xyz, fragment.texcoord[4], -c[2];
DP3 R0.y, R1, R1;
ADD R1.xyz, fragment.texcoord[4], -c[3];
DP3 R0.w, R2, R2;
DP3 R0.z, R1, R1;
SLT R2, R0, c[5];
ADD_SAT R0.xyz, R2.yzww, -R2;
MUL R1.xyz, R0.x, fragment.texcoord[1];
MAD R1.xyz, R2.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.y, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.z, R1;
TEX R0.x, R0, texture[2], 2D;
ADD R0.y, R0.x, -R0.z;
ADD R1.xyz, -fragment.texcoord[4], c[7];
DP3 R0.w, R1, R1;
RSQ R0.z, R0.w;
MOV R0.x, c[9];
CMP R0.y, R0, c[6].x, R0.x;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[8];
RCP R0.z, R0.z;
MAD_SAT R0.z, R0, c[6], c[6].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[9];
MUL R0.xy, R0.x, c[9];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[9].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[9].x;
END
# 35 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 35 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c9, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
add r0.xyz, v4, -c1
add r2.xyz, v4, -c4
dp3 r0.x, r0, r0
add r1.xyz, v4, -c2
dp3 r0.y, r1, r1
add r1.xyz, v4, -c3
dp3 r0.w, r2, r2
dp3 r0.z, r1, r1
add r0, r0, -c5
cmp r1, r0, c9.x, c9.y
add_sat r2.xyz, r1.yzww, -r1
mul r0.xyz, r2.x, v1
mad r0.xyz, r1.x, v0, r0
add r1.xyz, -v4, c7
mad r0.xyz, r2.y, v2, r0
mad r0.xyz, v3, r2.z, r0
texld r0.x, r0, s2
dp3 r0.w, r1, r1
rsq r0.y, r0.w
add r0.x, r0, -r0.z
rcp r0.z, r0.y
mov r0.y, c6.x
cmp r0.x, r0, c9.y, r0.y
mad_sat r0.z, r0, c6, c6.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c9
mul r1.xy, r0.y, c9.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c8
cmp r0.x, r0, c9, c9.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c9.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c9
"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "opengl " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 35 ALU, 2 TEX
OPTION ARB_fragment_program_shadow;
PARAM c[10] = { program.local[0..8],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
TEMP R2;
ADD R0.xyz, fragment.texcoord[4], -c[1];
ADD R2.xyz, fragment.texcoord[4], -c[4];
DP3 R0.x, R0, R0;
ADD R1.xyz, fragment.texcoord[4], -c[2];
DP3 R0.y, R1, R1;
ADD R1.xyz, fragment.texcoord[4], -c[3];
DP3 R0.w, R2, R2;
DP3 R0.z, R1, R1;
SLT R2, R0, c[5];
ADD_SAT R0.xyz, R2.yzww, -R2;
MUL R1.xyz, R0.x, fragment.texcoord[1];
MAD R1.xyz, R2.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.y, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.z, R1;
TEX R0.x, R0, texture[2], SHADOW2D;
ADD R1.xyz, -fragment.texcoord[4], c[7];
DP3 R0.z, R1, R1;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[8];
MOV R0.y, c[9].x;
RSQ R0.z, R0.z;
ADD R0.y, R0, -c[6].x;
MAD R0.y, R0.x, R0, c[6].x;
RCP R0.z, R0.z;
MAD_SAT R0.z, R0, c[6], c[6].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[9];
MUL R0.xy, R0.x, c[9];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[9].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[9].x;
END
# 35 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 35 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c9, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
add r0.xyz, v4, -c1
add r2.xyz, v4, -c4
dp3 r0.x, r0, r0
add r1.xyz, v4, -c2
dp3 r0.y, r1, r1
add r1.xyz, v4, -c3
dp3 r0.w, r2, r2
dp3 r0.z, r1, r1
add r0, r0, -c5
cmp r1, r0, c9.x, c9.y
add_sat r2.xyz, r1.yzww, -r1
mul r0.xyz, r2.x, v1
mad r0.xyz, r1.x, v0, r0
add r1.xyz, -v4, c7
mad r0.xyz, r2.y, v2, r0
mad r0.xyz, v3, r2.z, r0
texld r0.x, r0, s2
dp3 r0.w, r1, r1
rsq r0.z, r0.w
mov r0.y, c6.x
add r0.y, c9, -r0
mad r0.x, r0, r0.y, c6
rcp r0.z, r0.z
mad_sat r0.z, r0, c6, c6.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c9
mul r1.xy, r0.y, c9.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c8
cmp r0.x, r0, c9, c9.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c9.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c9
"
}

SubProgram "d3d11 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 0 [unity_ShadowSplitSpheres0] 4
Vector 16 [unity_ShadowSplitSpheres1] 4
Vector 32 [unity_ShadowSplitSpheres2] 4
Vector 48 [unity_ShadowSplitSpheres3] 4
Vector 64 [unity_ShadowSplitSqRadii] 4
Vector 384 [_LightShadowData] 4
Vector 400 [unity_ShadowFadeCenterAndType] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_ShadowMapTexture] 2D 0
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 28 float, 0 int, 1 uint
// TEX 1 (0 load, 1 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednineicacbnpppeohfmioolodlpkoakndabaaaaaajeagaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfmafaaaaeaaaaaaafhabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagcbaaaaddcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaagaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahccaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaacaaaaaabaaaaaahecaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaadaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaadbaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaacaaaaaaaeaaaaaadhaaaaaphcaabaaaabaaaaaa
egacbaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaaaceaaaaa
aaaaaaiaaaaaaaiaaaaaaaiaaaaaaaaaabaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaahocaabaaa
aaaaaaaaagajbaaaabaaaaaafgaobaaaaaaaaaaadeaaaaakocaabaaaaaaaaaaa
fgaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegbcbaaaacaaaaaadcaaaaajhcaabaaa
abaaaaaaegbcbaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegbcbaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegbcbaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaehaaaaalbcaabaaaaaaaaaaaegaabaaaaaaaaaaaaghabaaaabaaaaaa
aagabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaaakiacaia
ebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaaaaaaaaaj
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaiaebaaaaaaacaaaaaabjaaaaaa
baaaaaahccaabaaaaaaaaaaajgahbaaaaaaaaaaajgahbaaaaaaaaaaaelaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadccaaaalccaabaaaaaaaaaaabkaabaaa
aaaaaaaackiacaaaacaaaaaabiaaaaaadkiacaaaacaaaaaabiaaaaaaaacaaaah
bccabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaalbcaabaaa
aaaaaaaadkbabaiaebaaaaaaafaaaaaadkiacaaaabaaaaaaafaaaaaaabeaaaaa
aaaaiadpdiaaaaakdcaabaaaaaaaaaaaagaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaahpedaaaaaaaaaaaaaaaabkaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
dcaaaaakeccabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaabeaaaaaibiaiadl
akaabaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaf
cccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_LINEAR" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 24 ALU, 2 TEX
PARAM c[6] = { program.local[0..4],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
SLT R1, fragment.texcoord[4].w, c[2];
SGE R0, fragment.texcoord[4].w, c[1];
MUL R0, R0, R1;
MUL R1.xyz, R0.y, fragment.texcoord[1];
MAD R1.xyz, R0.x, fragment.texcoord[0], R1;
MAD R0.xyz, R0.z, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.w, R0;
TEX R0.x, R0, texture[2], 2D;
ADD R0.x, R0, -R0.z;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[4];
MOV R0.y, c[5].x;
CMP R0.y, R0.x, c[3].x, R0;
MAD_SAT R0.z, fragment.texcoord[4].w, c[3], c[3].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[5];
MUL R0.xy, R0.x, c[5];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[5].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[5].x;
END
# 24 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 25 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c5, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyzw
dcl_texcoord5 v5.xy
add r1, v4.w, -c2
add r0, v4.w, -c1
cmp r1, r1, c5.x, c5.y
cmp r0, r0, c5.y, c5.x
mul r0, r0, r1
mul r1.xyz, r0.y, v1
mad r1.xyz, r0.x, v0, r1
mad r0.xyz, r0.z, v2, r1
mad r0.xyz, v3, r0.w, r0
texld r0.x, r0, s2
add r0.x, r0, -r0.z
mov r0.y, c3.x
cmp r0.x, r0, c5.y, r0.y
mad_sat r0.z, v4.w, c3, c3.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c5
mul r1.xy, r0.y, c5.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c4
cmp r0.x, r0, c5, c5.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c5.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c5
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" }
"!!GLES"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 24 ALU, 2 TEX
OPTION ARB_fragment_program_shadow;
PARAM c[6] = { program.local[0..4],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
SLT R1, fragment.texcoord[4].w, c[2];
SGE R0, fragment.texcoord[4].w, c[1];
MUL R0, R0, R1;
MUL R1.xyz, R0.y, fragment.texcoord[1];
MAD R1.xyz, R0.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.z, fragment.texcoord[2], R1;
MAD R1.xyz, fragment.texcoord[3], R0.w, R1;
MOV R0.x, c[5];
ADD R0.y, R0.x, -c[3].x;
TEX R0.x, R1, texture[2], SHADOW2D;
MAD R0.y, R0.x, R0, c[3].x;
MAD_SAT R0.z, fragment.texcoord[4].w, c[3], c[3].w;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[4];
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[5];
MUL R0.xy, R0.x, c[5];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[5].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[5].x;
END
# 24 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 25 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c5, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyzw
dcl_texcoord5 v5.xy
add r1, v4.w, -c2
add r0, v4.w, -c1
cmp r1, r1, c5.x, c5.y
cmp r0, r0, c5.y, c5.x
mul r0, r0, r1
mul r1.xyz, r0.y, v1
mad r1.xyz, r0.x, v0, r1
mad r0.xyz, r0.z, v2, r1
mad r0.xyz, v3, r0.w, r0
texld r0.x, r0, s2
mov r0.w, c3.x
add r0.y, c5, -r0.w
mad r0.x, r0, r0.y, c3
mad_sat r0.z, v4.w, c3, c3.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c5
mul r1.xy, r0.y, c5.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c4
cmp r0.x, r0, c5, c5.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c5.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 96 [_LightSplitsNear] 4
Vector 112 [_LightSplitsFar] 4
Vector 384 [_LightShadowData] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_ShadowMapTexture] 2D 0
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 2 uint
// TEX 1 (0 load, 1 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddidlcfpheciclkcepkpdhphbgnfgiodiabaaaaaaceafaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomadaaaaeaaaaaaaplaaaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabjaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadicbabaaa
afaaaaaagcbaaaaddcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaagaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaabnaaaaaipcaabaaaaaaaaaaa
pgbpbaaaafaaaaaaegiocaaaacaaaaaaagaaaaaaabaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdbaaaaai
pcaabaaaabaaaaaapgbpbaaaafaaaaaaegiocaaaacaaaaaaahaaaaaaabaaaaak
pcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaafgafbaaaaaaaaaaaegbcbaaaacaaaaaadcaaaaaj
hcaabaaaabaaaaaaegbcbaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegbcbaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaegbcbaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaehaaaaalbcaabaaaaaaaaaaaegaabaaaaaaaaaaaaghabaaa
abaaaaaaaagabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
akiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaa
dccaaaalccaabaaaaaaaaaaadkbabaaaafaaaaaackiacaaaacaaaaaabiaaaaaa
dkiacaaaacaaaaaabiaaaaaaaacaaaahbccabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaalbcaabaaaaaaaaaaadkbabaiaebaaaaaaafaaaaaa
dkiacaaaabaaaaaaafaaaaaaabeaaaaaaaaaiadpdiaaaaakdcaabaaaaaaaaaaa
agaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaahpedaaaaaaaaaaaaaaaabkaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakeccabaaaaaaaaaaabkaabaia
ebaaaaaaaaaaaaaaabeaaaaaibiaiadlakaabaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaabkaabaaaaaaaaaaadgaaaaafcccabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 35 ALU, 2 TEX
PARAM c[10] = { program.local[0..8],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
TEMP R2;
ADD R0.xyz, fragment.texcoord[4], -c[1];
ADD R2.xyz, fragment.texcoord[4], -c[4];
DP3 R0.x, R0, R0;
ADD R1.xyz, fragment.texcoord[4], -c[2];
DP3 R0.y, R1, R1;
ADD R1.xyz, fragment.texcoord[4], -c[3];
DP3 R0.w, R2, R2;
DP3 R0.z, R1, R1;
SLT R2, R0, c[5];
ADD_SAT R0.xyz, R2.yzww, -R2;
MUL R1.xyz, R0.x, fragment.texcoord[1];
MAD R1.xyz, R2.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.y, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.z, R1;
TEX R0.x, R0, texture[2], 2D;
ADD R0.y, R0.x, -R0.z;
ADD R1.xyz, -fragment.texcoord[4], c[7];
DP3 R0.w, R1, R1;
RSQ R0.z, R0.w;
MOV R0.x, c[9];
CMP R0.y, R0, c[6].x, R0.x;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[8];
RCP R0.z, R0.z;
MAD_SAT R0.z, R0, c[6], c[6].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[9];
MUL R0.xy, R0.x, c[9];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[9].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[9].x;
END
# 35 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 35 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c9, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
add r0.xyz, v4, -c1
add r2.xyz, v4, -c4
dp3 r0.x, r0, r0
add r1.xyz, v4, -c2
dp3 r0.y, r1, r1
add r1.xyz, v4, -c3
dp3 r0.w, r2, r2
dp3 r0.z, r1, r1
add r0, r0, -c5
cmp r1, r0, c9.x, c9.y
add_sat r2.xyz, r1.yzww, -r1
mul r0.xyz, r2.x, v1
mad r0.xyz, r1.x, v0, r0
add r1.xyz, -v4, c7
mad r0.xyz, r2.y, v2, r0
mad r0.xyz, v3, r2.z, r0
texld r0.x, r0, s2
dp3 r0.w, r1, r1
rsq r0.y, r0.w
add r0.x, r0, -r0.z
rcp r0.z, r0.y
mov r0.y, c6.x
cmp r0.x, r0, c9.y, r0.y
mad_sat r0.z, r0, c6, c6.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c9
mul r1.xy, r0.y, c9.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c8
cmp r0.x, r0, c9, c9.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c9.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c9
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 35 ALU, 2 TEX
OPTION ARB_fragment_program_shadow;
PARAM c[10] = { program.local[0..8],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
TEMP R2;
ADD R0.xyz, fragment.texcoord[4], -c[1];
ADD R2.xyz, fragment.texcoord[4], -c[4];
DP3 R0.x, R0, R0;
ADD R1.xyz, fragment.texcoord[4], -c[2];
DP3 R0.y, R1, R1;
ADD R1.xyz, fragment.texcoord[4], -c[3];
DP3 R0.w, R2, R2;
DP3 R0.z, R1, R1;
SLT R2, R0, c[5];
ADD_SAT R0.xyz, R2.yzww, -R2;
MUL R1.xyz, R0.x, fragment.texcoord[1];
MAD R1.xyz, R2.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.y, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.z, R1;
TEX R0.x, R0, texture[2], SHADOW2D;
ADD R1.xyz, -fragment.texcoord[4], c[7];
DP3 R0.z, R1, R1;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[8];
MOV R0.y, c[9].x;
RSQ R0.z, R0.z;
ADD R0.y, R0, -c[6].x;
MAD R0.y, R0.x, R0, c[6].x;
RCP R0.z, R0.z;
MAD_SAT R0.z, R0, c[6], c[6].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[9];
MUL R0.xy, R0.x, c[9];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[9].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[9].x;
END
# 35 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 35 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c9, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
add r0.xyz, v4, -c1
add r2.xyz, v4, -c4
dp3 r0.x, r0, r0
add r1.xyz, v4, -c2
dp3 r0.y, r1, r1
add r1.xyz, v4, -c3
dp3 r0.w, r2, r2
dp3 r0.z, r1, r1
add r0, r0, -c5
cmp r1, r0, c9.x, c9.y
add_sat r2.xyz, r1.yzww, -r1
mul r0.xyz, r2.x, v1
mad r0.xyz, r1.x, v0, r0
add r1.xyz, -v4, c7
mad r0.xyz, r2.y, v2, r0
mad r0.xyz, v3, r2.z, r0
texld r0.x, r0, s2
dp3 r0.w, r1, r1
rsq r0.z, r0.w
mov r0.y, c6.x
add r0.y, c9, -r0
mad r0.x, r0, r0.y, c6
rcp r0.z, r0.z
mad_sat r0.z, r0, c6, c6.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c9
mul r1.xy, r0.y, c9.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c8
cmp r0.x, r0, c9, c9.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c9.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c9
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 0 [unity_ShadowSplitSpheres0] 4
Vector 16 [unity_ShadowSplitSpheres1] 4
Vector 32 [unity_ShadowSplitSpheres2] 4
Vector 48 [unity_ShadowSplitSpheres3] 4
Vector 64 [unity_ShadowSplitSqRadii] 4
Vector 384 [_LightShadowData] 4
Vector 400 [unity_ShadowFadeCenterAndType] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_ShadowMapTexture] 2D 0
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 28 float, 0 int, 1 uint
// TEX 1 (0 load, 1 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednineicacbnpppeohfmioolodlpkoakndabaaaaaajeagaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfmafaaaaeaaaaaaafhabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagcbaaaaddcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaagaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahccaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaacaaaaaabaaaaaahecaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaadaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaadbaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaacaaaaaaaeaaaaaadhaaaaaphcaabaaaabaaaaaa
egacbaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaaaceaaaaa
aaaaaaiaaaaaaaiaaaaaaaiaaaaaaaaaabaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaahocaabaaa
aaaaaaaaagajbaaaabaaaaaafgaobaaaaaaaaaaadeaaaaakocaabaaaaaaaaaaa
fgaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegbcbaaaacaaaaaadcaaaaajhcaabaaa
abaaaaaaegbcbaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegbcbaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegbcbaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaehaaaaalbcaabaaaaaaaaaaaegaabaaaaaaaaaaaaghabaaaabaaaaaa
aagabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaaakiacaia
ebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaaaaaaaaaj
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaiaebaaaaaaacaaaaaabjaaaaaa
baaaaaahccaabaaaaaaaaaaajgahbaaaaaaaaaaajgahbaaaaaaaaaaaelaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadccaaaalccaabaaaaaaaaaaabkaabaaa
aaaaaaaackiacaaaacaaaaaabiaaaaaadkiacaaaacaaaaaabiaaaaaaaacaaaah
bccabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaalbcaabaaa
aaaaaaaadkbabaiaebaaaaaaafaaaaaadkiacaaaabaaaaaaafaaaaaaabeaaaaa
aaaaiadpdiaaaaakdcaabaaaaaaaaaaaagaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaahpedaaaaaaaaaaaaaaaabkaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
dcaaaaakeccabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaabeaaaaaibiaiadl
akaabaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaf
cccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_ON" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 24 ALU, 2 TEX
PARAM c[6] = { program.local[0..4],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
SLT R1, fragment.texcoord[4].w, c[2];
SGE R0, fragment.texcoord[4].w, c[1];
MUL R0, R0, R1;
MUL R1.xyz, R0.y, fragment.texcoord[1];
MAD R1.xyz, R0.x, fragment.texcoord[0], R1;
MAD R0.xyz, R0.z, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.w, R0;
TEX R0.x, R0, texture[2], 2D;
ADD R0.x, R0, -R0.z;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[4];
MOV R0.y, c[5].x;
CMP R0.y, R0.x, c[3].x, R0;
MAD_SAT R0.z, fragment.texcoord[4].w, c[3], c[3].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[5];
MUL R0.xy, R0.x, c[5];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[5].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[5].x;
END
# 24 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 25 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c5, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyzw
dcl_texcoord5 v5.xy
add r1, v4.w, -c2
add r0, v4.w, -c1
cmp r1, r1, c5.x, c5.y
cmp r0, r0, c5.y, c5.x
mul r0, r0, r1
mul r1.xyz, r0.y, v1
mad r1.xyz, r0.x, v0, r1
mad r0.xyz, r0.z, v2, r1
mad r0.xyz, v3, r0.w, r0
texld r0.x, r0, s2
add r0.x, r0, -r0.z
mov r0.y, c3.x
cmp r0.x, r0, c5.y, r0.y
mad_sat r0.z, v4.w, c3, c3.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c5
mul r1.xy, r0.y, c5.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c4
cmp r0.x, r0, c5, c5.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c5.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c5
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" }
"!!GLES"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 24 ALU, 2 TEX
OPTION ARB_fragment_program_shadow;
PARAM c[6] = { program.local[0..4],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
SLT R1, fragment.texcoord[4].w, c[2];
SGE R0, fragment.texcoord[4].w, c[1];
MUL R0, R0, R1;
MUL R1.xyz, R0.y, fragment.texcoord[1];
MAD R1.xyz, R0.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.z, fragment.texcoord[2], R1;
MAD R1.xyz, fragment.texcoord[3], R0.w, R1;
MOV R0.x, c[5];
ADD R0.y, R0.x, -c[3].x;
TEX R0.x, R1, texture[2], SHADOW2D;
MAD R0.y, R0.x, R0, c[3].x;
MAD_SAT R0.z, fragment.texcoord[4].w, c[3], c[3].w;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[4];
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[5];
MUL R0.xy, R0.x, c[5];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[5].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[5].x;
END
# 24 instructions, 2 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
Vector 0 [_ProjectionParams]
Vector 1 [_LightSplitsNear]
Vector 2 [_LightSplitsFar]
Vector 3 [_LightShadowData]
Float 4 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 25 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c5, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyzw
dcl_texcoord5 v5.xy
add r1, v4.w, -c2
add r0, v4.w, -c1
cmp r1, r1, c5.x, c5.y
cmp r0, r0, c5.y, c5.x
mul r0, r0, r1
mul r1.xyz, r0.y, v1
mad r1.xyz, r0.x, v0, r1
mad r0.xyz, r0.z, v2, r1
mad r0.xyz, v3, r0.w, r0
texld r0.x, r0, s2
mov r0.w, c3.x
add r0.y, c5, -r0.w
mad r0.x, r0, r0.y, c3
mad_sat r0.z, v4.w, c3, c3.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c5
mul r1.xy, r0.y, c5.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c4
cmp r0.x, r0, c5, c5.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c5.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c5
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 400 used size, 8 vars
Vector 96 [_LightSplitsNear] 4
Vector 112 [_LightSplitsFar] 4
Vector 384 [_LightShadowData] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_ShadowMapTexture] 2D 0
// 25 instructions, 2 temp regs, 0 temp arrays:
// ALU 17 float, 0 int, 2 uint
// TEX 1 (0 load, 1 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefieceddidlcfpheciclkcepkpdhphbgnfgiodiabaaaaaaceafaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapaiaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcomadaaaaeaaaaaaaplaaaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabjaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadicbabaaa
afaaaaaagcbaaaaddcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaagaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaabnaaaaaipcaabaaaaaaaaaaa
pgbpbaaaafaaaaaaegiocaaaacaaaaaaagaaaaaaabaaaaakpcaabaaaaaaaaaaa
egaobaaaaaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpdbaaaaai
pcaabaaaabaaaaaapgbpbaaaafaaaaaaegiocaaaacaaaaaaahaaaaaaabaaaaak
pcaabaaaabaaaaaaegaobaaaabaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadp
aaaaiadpdiaaaaahpcaabaaaaaaaaaaaegaobaaaaaaaaaaaegaobaaaabaaaaaa
diaaaaahhcaabaaaabaaaaaafgafbaaaaaaaaaaaegbcbaaaacaaaaaadcaaaaaj
hcaabaaaabaaaaaaegbcbaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegbcbaaaadaaaaaakgakbaaaaaaaaaaaegacbaaa
abaaaaaadcaaaaajhcaabaaaaaaaaaaaegbcbaaaaeaaaaaapgapbaaaaaaaaaaa
egacbaaaaaaaaaaaehaaaaalbcaabaaaaaaaaaaaegaabaaaaaaaaaaaaghabaaa
abaaaaaaaagabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaa
akiacaiaebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaa
dccaaaalccaabaaaaaaaaaaadkbabaaaafaaaaaackiacaaaacaaaaaabiaaaaaa
dkiacaaaacaaaaaabiaaaaaaaacaaaahbccabaaaaaaaaaaabkaabaaaaaaaaaaa
akaabaaaaaaaaaaadcaaaaalbcaabaaaaaaaaaaadkbabaiaebaaaaaaafaaaaaa
dkiacaaaabaaaaaaafaaaaaaabeaaaaaaaaaiadpdiaaaaakdcaabaaaaaaaaaaa
agaabaaaaaaaaaaaaceaaaaaaaaaiadpaaaahpedaaaaaaaaaaaaaaaabkaaaaaf
dcaabaaaaaaaaaaaegaabaaaaaaaaaaadcaaaaakeccabaaaaaaaaaaabkaabaia
ebaaaaaaaaaaaaaaabeaaaaaibiaiadlakaabaaaaaaaaaaadgaaaaaficcabaaa
aaaaaaaabkaabaaaaaaaaaaadgaaaaafcccabaaaaaaaaaaaabeaaaaaaaaaiadp
doaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 35 ALU, 2 TEX
PARAM c[10] = { program.local[0..8],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
TEMP R2;
ADD R0.xyz, fragment.texcoord[4], -c[1];
ADD R2.xyz, fragment.texcoord[4], -c[4];
DP3 R0.x, R0, R0;
ADD R1.xyz, fragment.texcoord[4], -c[2];
DP3 R0.y, R1, R1;
ADD R1.xyz, fragment.texcoord[4], -c[3];
DP3 R0.w, R2, R2;
DP3 R0.z, R1, R1;
SLT R2, R0, c[5];
ADD_SAT R0.xyz, R2.yzww, -R2;
MUL R1.xyz, R0.x, fragment.texcoord[1];
MAD R1.xyz, R2.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.y, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.z, R1;
TEX R0.x, R0, texture[2], 2D;
ADD R0.y, R0.x, -R0.z;
ADD R1.xyz, -fragment.texcoord[4], c[7];
DP3 R0.w, R1, R1;
RSQ R0.z, R0.w;
MOV R0.x, c[9];
CMP R0.y, R0, c[6].x, R0.x;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[8];
RCP R0.z, R0.z;
MAD_SAT R0.z, R0, c[6], c[6].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[9];
MUL R0.xy, R0.x, c[9];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[9].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[9].x;
END
# 35 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 35 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c9, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
add r0.xyz, v4, -c1
add r2.xyz, v4, -c4
dp3 r0.x, r0, r0
add r1.xyz, v4, -c2
dp3 r0.y, r1, r1
add r1.xyz, v4, -c3
dp3 r0.w, r2, r2
dp3 r0.z, r1, r1
add r0, r0, -c5
cmp r1, r0, c9.x, c9.y
add_sat r2.xyz, r1.yzww, -r1
mul r0.xyz, r2.x, v1
mad r0.xyz, r1.x, v0, r0
add r1.xyz, -v4, c7
mad r0.xyz, r2.y, v2, r0
mad r0.xyz, v3, r2.z, r0
texld r0.x, r0, s2
dp3 r0.w, r1, r1
rsq r0.y, r0.w
add r0.x, r0, -r0.z
rcp r0.z, r0.y
mov r0.y, c6.x
cmp r0.x, r0, c9.y, r0.y
mad_sat r0.z, r0, c6, c6.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c9
mul r1.xy, r0.y, c9.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c8
cmp r0.x, r0, c9, c9.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c9.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c9
"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NONATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "opengl " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"3.0-!!ARBfp1.0
# 35 ALU, 2 TEX
OPTION ARB_fragment_program_shadow;
PARAM c[10] = { program.local[0..8],
		{ 1, 255, 0.0039215689 } };
TEMP R0;
TEMP R1;
TEMP R2;
ADD R0.xyz, fragment.texcoord[4], -c[1];
ADD R2.xyz, fragment.texcoord[4], -c[4];
DP3 R0.x, R0, R0;
ADD R1.xyz, fragment.texcoord[4], -c[2];
DP3 R0.y, R1, R1;
ADD R1.xyz, fragment.texcoord[4], -c[3];
DP3 R0.w, R2, R2;
DP3 R0.z, R1, R1;
SLT R2, R0, c[5];
ADD_SAT R0.xyz, R2.yzww, -R2;
MUL R1.xyz, R0.x, fragment.texcoord[1];
MAD R1.xyz, R2.x, fragment.texcoord[0], R1;
MAD R1.xyz, R0.y, fragment.texcoord[2], R1;
MAD R0.xyz, fragment.texcoord[3], R0.z, R1;
TEX R0.x, R0, texture[2], SHADOW2D;
ADD R1.xyz, -fragment.texcoord[4], c[7];
DP3 R0.z, R1, R1;
TEX R0.w, fragment.texcoord[5], texture[0], 2D;
SLT R1.x, R0.w, c[8];
MOV R0.y, c[9].x;
RSQ R0.z, R0.z;
ADD R0.y, R0, -c[6].x;
MAD R0.y, R0.x, R0, c[6].x;
RCP R0.z, R0.z;
MAD_SAT R0.z, R0, c[6], c[6].w;
MUL R0.x, -fragment.texcoord[4].w, c[0].w;
ADD_SAT result.color.x, R0.y, R0.z;
ADD R0.x, R0, c[9];
MUL R0.xy, R0.x, c[9];
FRC R0.zw, R0.xyxy;
MOV R0.y, R0.w;
MAD R0.x, -R0.w, c[9].z, R0.z;
KIL -R1.x;
MOV result.color.zw, R0.xyxy;
MOV result.color.y, c[9].x;
END
# 35 instructions, 3 R-regs
"
}

SubProgram "d3d9 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
Vector 0 [_ProjectionParams]
Vector 1 [unity_ShadowSplitSpheres0]
Vector 2 [unity_ShadowSplitSpheres1]
Vector 3 [unity_ShadowSplitSpheres2]
Vector 4 [unity_ShadowSplitSpheres3]
Vector 5 [unity_ShadowSplitSqRadii]
Vector 6 [_LightShadowData]
Vector 7 [unity_ShadowFadeCenterAndType]
Float 8 [_Cutoff]
SetTexture 0 [_MainTex] 2D
SetTexture 2 [_ShadowMapTexture] 2D
"ps_3_0
; 35 ALU, 3 TEX
dcl_2d s0
dcl_2d s2
def c9, 0.00000000, 1.00000000, 255.00000000, 0.00392157
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4
dcl_texcoord5 v5.xy
add r0.xyz, v4, -c1
add r2.xyz, v4, -c4
dp3 r0.x, r0, r0
add r1.xyz, v4, -c2
dp3 r0.y, r1, r1
add r1.xyz, v4, -c3
dp3 r0.w, r2, r2
dp3 r0.z, r1, r1
add r0, r0, -c5
cmp r1, r0, c9.x, c9.y
add_sat r2.xyz, r1.yzww, -r1
mul r0.xyz, r2.x, v1
mad r0.xyz, r1.x, v0, r0
add r1.xyz, -v4, c7
mad r0.xyz, r2.y, v2, r0
mad r0.xyz, v3, r2.z, r0
texld r0.x, r0, s2
dp3 r0.w, r1, r1
rsq r0.z, r0.w
mov r0.y, c6.x
add r0.y, c9, -r0
mad r0.x, r0, r0.y, c6
rcp r0.z, r0.z
mad_sat r0.z, r0, c6, c6.w
mul r0.y, -v4.w, c0.w
add r0.y, r0, c9
mul r1.xy, r0.y, c9.yzzw
add_sat oC0.x, r0, r0.z
texld r0.w, v5, s0
add_pp r0.x, r0.w, -c8
cmp r0.x, r0, c9, c9.y
mov_pp r0, -r0.x
frc r1.xy, r1
texkill r0.xyzw
mov r0.y, r1
mad r0.x, -r1.y, c9.w, r1
mov oC0.zw, r0.xyxy
mov oC0.y, c9
"
}

SubProgram "d3d11 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
ConstBuffer "$Globals" 160 // 148 used size, 12 vars
Float 144 [_Cutoff]
ConstBuffer "UnityPerCamera" 128 // 96 used size, 8 vars
Vector 80 [_ProjectionParams] 4
ConstBuffer "UnityShadows" 416 // 416 used size, 8 vars
Vector 0 [unity_ShadowSplitSpheres0] 4
Vector 16 [unity_ShadowSplitSpheres1] 4
Vector 32 [unity_ShadowSplitSpheres2] 4
Vector 48 [unity_ShadowSplitSpheres3] 4
Vector 64 [unity_ShadowSplitSqRadii] 4
Vector 384 [_LightShadowData] 4
Vector 400 [unity_ShadowFadeCenterAndType] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
BindCB "UnityShadows" 2
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_ShadowMapTexture] 2D 0
// 36 instructions, 2 temp regs, 0 temp arrays:
// ALU 28 float, 0 int, 1 uint
// TEX 1 (0 load, 1 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecednineicacbnpppeohfmioolodlpkoakndabaaaaaajeagaaaaadaaaaaa
cmaaaaaapmaaaaaadaabaaaaejfdeheomiaaaaaaahaaaaaaaiaaaaaalaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaalmaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaalmaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaalmaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaahahaaaalmaaaaaa
adaaaaaaaaaaaaaaadaaaaaaaeaaaaaaahahaaaalmaaaaaaaeaaaaaaaaaaaaaa
adaaaaaaafaaaaaaapapaaaalmaaaaaaafaaaaaaaaaaaaaaadaaaaaaagaaaaaa
adadaaaafdfgfpfaepfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheo
cmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaa
apaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcfmafaaaaeaaaaaaafhabaaaa
fjaaaaaeegiocaaaaaaaaaaaakaaaaaafjaaaaaeegiocaaaabaaaaaaagaaaaaa
fjaaaaaeegiocaaaacaaaaaabkaaaaaafkaiaaadaagabaaaaaaaaaaafkaaaaad
aagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaafibiaaaeaahabaaa
abaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaadhcbabaaaacaaaaaa
gcbaaaadhcbabaaaadaaaaaagcbaaaadhcbabaaaaeaaaaaagcbaaaadpcbabaaa
afaaaaaagcbaaaaddcbabaaaagaaaaaagfaaaaadpccabaaaaaaaaaaagiaaaaac
acaaaaaaefaaaaajpcaabaaaaaaaaaaaegbabaaaagaaaaaaeghobaaaaaaaaaaa
aagabaaaabaaaaaaaaaaaaajbcaabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaia
ebaaaaaaaaaaaaaaajaaaaaadbaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
abeaaaaaaaaaaaaaanaaaeadakaabaaaaaaaaaaaaaaaaaajhcaabaaaaaaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaaaaaaaaabaaaaaahbcaabaaa
aaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaabaaaaaabaaaaaahccaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaacaaaaaabaaaaaahecaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaaaaaaaaajhcaabaaaabaaaaaa
egbcbaaaafaaaaaaegiccaiaebaaaaaaacaaaaaaadaaaaaabaaaaaahicaabaaa
aaaaaaaaegacbaaaabaaaaaaegacbaaaabaaaaaadbaaaaaipcaabaaaaaaaaaaa
egaobaaaaaaaaaaaegiocaaaacaaaaaaaeaaaaaadhaaaaaphcaabaaaabaaaaaa
egacbaaaaaaaaaaaaceaaaaaaaaaialpaaaaialpaaaaialpaaaaaaaaaceaaaaa
aaaaaaiaaaaaaaiaaaaaaaiaaaaaaaaaabaaaaakpcaabaaaaaaaaaaaegaobaaa
aaaaaaaaaceaaaaaaaaaiadpaaaaiadpaaaaiadpaaaaiadpaaaaaaahocaabaaa
aaaaaaaaagajbaaaabaaaaaafgaobaaaaaaaaaaadeaaaaakocaabaaaaaaaaaaa
fgaobaaaaaaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadiaaaaah
hcaabaaaabaaaaaafgafbaaaaaaaaaaaegbcbaaaacaaaaaadcaaaaajhcaabaaa
abaaaaaaegbcbaaaabaaaaaaagaabaaaaaaaaaaaegacbaaaabaaaaaadcaaaaaj
hcaabaaaaaaaaaaaegbcbaaaadaaaaaakgakbaaaaaaaaaaaegacbaaaabaaaaaa
dcaaaaajhcaabaaaaaaaaaaaegbcbaaaaeaaaaaapgapbaaaaaaaaaaaegacbaaa
aaaaaaaaehaaaaalbcaabaaaaaaaaaaaegaabaaaaaaaaaaaaghabaaaabaaaaaa
aagabaaaaaaaaaaackaabaaaaaaaaaaaaaaaaaajccaabaaaaaaaaaaaakiacaia
ebaaaaaaacaaaaaabiaaaaaaabeaaaaaaaaaiadpdcaaaaakbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaakiacaaaacaaaaaabiaaaaaaaaaaaaaj
ocaabaaaaaaaaaaaagbjbaaaafaaaaaaagijcaiaebaaaaaaacaaaaaabjaaaaaa
baaaaaahccaabaaaaaaaaaaajgahbaaaaaaaaaaajgahbaaaaaaaaaaaelaaaaaf
ccaabaaaaaaaaaaabkaabaaaaaaaaaaadccaaaalccaabaaaaaaaaaaabkaabaaa
aaaaaaaackiacaaaacaaaaaabiaaaaaadkiacaaaacaaaaaabiaaaaaaaacaaaah
bccabaaaaaaaaaaabkaabaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaalbcaabaaa
aaaaaaaadkbabaiaebaaaaaaafaaaaaadkiacaaaabaaaaaaafaaaaaaabeaaaaa
aaaaiadpdiaaaaakdcaabaaaaaaaaaaaagaabaaaaaaaaaaaaceaaaaaaaaaiadp
aaaahpedaaaaaaaaaaaaaaaabkaaaaafdcaabaaaaaaaaaaaegaabaaaaaaaaaaa
dcaaaaakeccabaaaaaaaaaaabkaabaiaebaaaaaaaaaaaaaaabeaaaaaibiaiadl
akaabaaaaaaaaaaadgaaaaaficcabaaaaaaaaaaabkaabaaaaaaaaaaadgaaaaaf
cccabaaaaaaaaaaaabeaaaaaaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "LUX_GAMMA" "GLDIFFCUBE_OFF" "SHADOWS_NATIVE" "SHADOWS_SPLIT_SPHERES" }
"!!GLES3"
}

}
	}

#LINE 78

}

Dependency "OptimizedShader" = "Hidden/Lux/Nature/Tree Creator Leaves Optimized"
FallBack "Diffuse"
}
